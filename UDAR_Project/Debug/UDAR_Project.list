
UDAR_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005644  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005944  08005944  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005944  08005944  00015944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800594c  0800594c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005950  08005950  00015950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000084  080059d8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080059d8  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010082  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002462  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00032598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00033388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182bb  00000000  00000000  00034080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001120a  00000000  00000000  0004c33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000998ba  00000000  00000000  0005d545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6dff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d88  00000000  00000000  000f6e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057cc 	.word	0x080057cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080057cc 	.word	0x080057cc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	463b      	mov	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <MX_ADC1_Init+0x98>)
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_ADC1_Init+0x98>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80005b2:	4b1e      	ldr	r3, [pc, #120]	; (800062c <MX_ADC1_Init+0x98>)
 80005b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80005b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_ADC1_Init+0x98>)
 80005bc:	2201      	movs	r2, #1
 80005be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_ADC1_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_ADC1_Init+0x98>)
 80005d6:	4a17      	ldr	r2, [pc, #92]	; (8000634 <MX_ADC1_Init+0xa0>)
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_ADC1_Init+0x98>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_ADC1_Init+0x98>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <MX_ADC1_Init+0x98>)
 80005f6:	f001 f985 	bl	8001904 <HAL_ADC_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000600:	f000 fe02 	bl	8001208 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000604:	2309      	movs	r3, #9
 8000606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000608:	2301      	movs	r3, #1
 800060a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800060c:	2301      	movs	r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_ADC1_Init+0x98>)
 8000616:	f001 fb39 	bl	8001c8c <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000620:	f000 fdf2 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000a0 	.word	0x200000a0
 8000630:	40012000 	.word	0x40012000
 8000634:	0f000001 	.word	0x0f000001

08000638 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a24      	ldr	r2, [pc, #144]	; (80006e8 <HAL_ADC_MspInit+0xb0>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d141      	bne.n	80006de <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	4b23      	ldr	r3, [pc, #140]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 8000664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000668:	6453      	str	r3, [r2, #68]	; 0x44
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0304 	and.w	r3, r3, #4
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ae:	2310      	movs	r3, #16
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	480b      	ldr	r0, [pc, #44]	; (80006f0 <HAL_ADC_MspInit+0xb8>)
 80006c2:	f001 fea5 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006c6:	2302      	movs	r3, #2
 80006c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ca:	2303      	movs	r3, #3
 80006cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	4806      	ldr	r0, [pc, #24]	; (80006f4 <HAL_ADC_MspInit+0xbc>)
 80006da:	f001 fe99 	bl	8002410 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	; 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40012000 	.word	0x40012000
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020400 	.word	0x40020400

080006f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a38      	ldr	r2, [pc, #224]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b32      	ldr	r3, [pc, #200]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a31      	ldr	r2, [pc, #196]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <MX_GPIO_Init+0x100>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <MX_GPIO_Init+0x100>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a2a      	ldr	r2, [pc, #168]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a23      	ldr	r2, [pc, #140]	; (80007f8 <MX_GPIO_Init+0x100>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|BLU_Pin|GRN_Pin|RED_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8000784:	481d      	ldr	r0, [pc, #116]	; (80007fc <MX_GPIO_Init+0x104>)
 8000786:	f001 ffdf 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASERn_GPIO_Port, LASERn_Pin, GPIO_PIN_SET);
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000790:	481b      	ldr	r0, [pc, #108]	; (8000800 <MX_GPIO_Init+0x108>)
 8000792:	f001 ffd9 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4815      	ldr	r0, [pc, #84]	; (8000804 <MX_GPIO_Init+0x10c>)
 80007ae:	f001 fe2f 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|BLU_Pin|GRN_Pin|RED_Pin;
 80007b2:	f44f 53c9 	mov.w	r3, #6432	; 0x1920
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <MX_GPIO_Init+0x104>)
 80007cc:	f001 fe20 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LASERn_Pin;
 80007d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LASERn_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_GPIO_Init+0x108>)
 80007ea:	f001 fe11 	bl	8002410 <HAL_GPIO_Init>

}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	; 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020400 	.word	0x40020400
 8000804:	40020800 	.word	0x40020800

08000808 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b092      	sub	sp, #72	; 0x48
 800080c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f000 ffe3 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f931 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000816:	f7ff ff6f 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800081a:	f000 fea5 	bl	8001568 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800081e:	f000 fd9d 	bl	800135c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000822:	f000 fe77 	bl	8001514 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000826:	f000 fec9 	bl	80015bc <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800082a:	f7ff feb3 	bl	8000594 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  int TIM2_Ch1_DCVAL = 1500;
 800082e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000832:	623b      	str	r3, [r7, #32]
  int TIM2_Ch2_DCVAL = 1500;
 8000834:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000838:	61fb      	str	r3, [r7, #28]
  pulse_width = 1500;
 800083a:	4b84      	ldr	r3, [pc, #528]	; (8000a4c <main+0x244>)
 800083c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000840:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start(&htim2);
 8000842:	4883      	ldr	r0, [pc, #524]	; (8000a50 <main+0x248>)
 8000844:	f002 fc82 	bl	800314c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000848:	2100      	movs	r1, #0
 800084a:	4881      	ldr	r0, [pc, #516]	; (8000a50 <main+0x248>)
 800084c:	f002 fd32 	bl	80032b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000850:	2104      	movs	r1, #4
 8000852:	487f      	ldr	r0, [pc, #508]	; (8000a50 <main+0x248>)
 8000854:	f002 fd2e 	bl	80032b4 <HAL_TIM_PWM_Start>

  TIM2->PSC = 16 - 1;
 8000858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800085c:	220f      	movs	r2, #15
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  TIM2->ARR = 20000 - 1;
 8000860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000864:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000868:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->CCR1 = TIM2_Ch1_DCVAL;
 800086a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086e:	6a3b      	ldr	r3, [r7, #32]
 8000870:	6353      	str	r3, [r2, #52]	; 0x34
  TIM2->CCR2 = TIM2_Ch2_DCVAL;
 8000872:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	6393      	str	r3, [r2, #56]	; 0x38

  toggle_laser(0);
 800087a:	2000      	movs	r0, #0
 800087c:	f000 fad6 	bl	8000e2c <toggle_laser>

  /* startup code */
  int manual_mode = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  int automatic_mode = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0)
 8000888:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088c:	4871      	ldr	r0, [pc, #452]	; (8000a54 <main+0x24c>)
 800088e:	f001 ff43 	bl	8002718 <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10a      	bne.n	80008ae <main+0xa6>
  {
    manual_mode = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2120      	movs	r1, #32
 80008a0:	486d      	ldr	r0, [pc, #436]	; (8000a58 <main+0x250>)
 80008a2:	f001 ff51 	bl	8002748 <HAL_GPIO_WritePin>
    toggle_laser(1);
 80008a6:	2001      	movs	r0, #1
 80008a8:	f000 fac0 	bl	8000e2c <toggle_laser>
 80008ac:	e022      	b.n	80008f4 <main+0xec>
  }
  else
  {
    automatic_mode = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2120      	movs	r1, #32
 80008b6:	4868      	ldr	r0, [pc, #416]	; (8000a58 <main+0x250>)
 80008b8:	f001 ff46 	bl	8002748 <HAL_GPIO_WritePin>
    toggle_laser(0);
 80008bc:	2000      	movs	r0, #0
 80008be:	f000 fab5 	bl	8000e2c <toggle_laser>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (manual_mode)
 80008c2:	e017      	b.n	80008f4 <main+0xec>
  {
    cycle_led();
 80008c4:	f000 f9b4 	bl	8000c30 <cycle_led>
    read_us100_dist();
 80008c8:	f000 f94c 	bl	8000b64 <read_us100_dist>
    get_joystick();
 80008cc:	f000 f97c 	bl	8000bc8 <get_joystick>
    update_pulse_widths();
 80008d0:	f000 fa06 	bl	8000ce0 <update_pulse_widths>
    TIM2->CCR1 = pulse_width_y;
 80008d4:	4b61      	ldr	r3, [pc, #388]	; (8000a5c <main+0x254>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CCR2 = pulse_width_x;
 80008de:	4b60      	ldr	r3, [pc, #384]	; (8000a60 <main+0x258>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008e6:	639a      	str	r2, [r3, #56]	; 0x38
    // send bearing and distance to computer
    send_bearing_and_distance();
 80008e8:	f000 fc1a 	bl	8001120 <send_bearing_and_distance>
    HAL_Delay(500);
 80008ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008f0:	f000 ffe4 	bl	80018bc <HAL_Delay>
  while (manual_mode)
 80008f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1e4      	bne.n	80008c4 <main+0xbc>
  }

  // we are not in manual mode, so we are in automatic mode

  /* setup for automatic mode */
  TIM2->CCR1 = 1500;
 80008fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008fe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 1500;
 8000904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000908:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800090c:	639a      	str	r2, [r3, #56]	; 0x38
  int num_objs = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
  int obj_detected = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  int rising_edge;
  int falling_edge;
  int num_samples = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  int avg_distance = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  int angular_width_ticks = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  int centerline_ticks = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  int prev;

  print_automatic_mode_header();
 8000926:	f000 fc55 	bl	80011d4 <print_automatic_mode_header>
  read_us100_dist();
 800092a:	f000 f91b 	bl	8000b64 <read_us100_dist>
  while (automatic_mode)
 800092e:	e081      	b.n	8000a34 <main+0x22c>
  {
    /* increment the sensor */
    TIM2->CCR2 = pulse_width_x;
 8000930:	4b4b      	ldr	r3, [pc, #300]	; (8000a60 <main+0x258>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000938:	639a      	str	r2, [r3, #56]	; 0x38
    prev = distance;
 800093a:	4b4a      	ldr	r3, [pc, #296]	; (8000a64 <main+0x25c>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	b29b      	uxth	r3, r3
 8000940:	613b      	str	r3, [r7, #16]

    /* compute avg of current measurement */
    read_us100_dist();
 8000942:	f000 f90f 	bl	8000b64 <read_us100_dist>

    /* check for significant jump */

    if (jump(prev, distance))
 8000946:	4b47      	ldr	r3, [pc, #284]	; (8000a64 <main+0x25c>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	b29b      	uxth	r3, r3
 800094c:	4619      	mov	r1, r3
 800094e:	6938      	ldr	r0, [r7, #16]
 8000950:	f000 fc24 	bl	800119c <jump>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d051      	beq.n	80009fe <main+0x1f6>
    {
      // set led red
      // set object = 1
      if (obj_detected)
 800095a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800095c:	2b00      	cmp	r3, #0
 800095e:	d049      	beq.n	80009f4 <main+0x1ec>
      {
        falling_edge = pulse_width_x;
 8000960:	4b3f      	ldr	r3, [pc, #252]	; (8000a60 <main+0x258>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	60fb      	str	r3, [r7, #12]
        num_objs += 1;
 8000966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000968:	3301      	adds	r3, #1
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
        obj_detected = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
        // print output
        /*
         * angular width = rising - falling - 211
         * centerline (microseconds) = avg(rising, falling) - [(pb1+pb2)/2-1500]
         */
        angular_width_ticks = rising_edge - falling_edge - 211;
 8000970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	3bd3      	subs	r3, #211	; 0xd3
 8000978:	61bb      	str	r3, [r7, #24]
        centerline_ticks = (rising_edge + falling_edge) / 2 + 20;
 800097a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	0fda      	lsrs	r2, r3, #31
 8000982:	4413      	add	r3, r2
 8000984:	105b      	asrs	r3, r3, #1
 8000986:	3314      	adds	r3, #20
 8000988:	617b      	str	r3, [r7, #20]
        avg_distance = avg_distance / num_samples;
 800098a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000992:	627b      	str	r3, [r7, #36]	; 0x24

        /* convert to degrees */
        int bearing_center =  -(((9 * centerline_ticks) / 100) - 135);
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	4613      	mov	r3, r2
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	4413      	add	r3, r2
 800099c:	4a32      	ldr	r2, [pc, #200]	; (8000a68 <main+0x260>)
 800099e:	fb82 1203 	smull	r1, r2, r2, r3
 80009a2:	1152      	asrs	r2, r2, #5
 80009a4:	17db      	asrs	r3, r3, #31
 80009a6:	1a9b      	subs	r3, r3, r2
 80009a8:	3387      	adds	r3, #135	; 0x87
 80009aa:	60bb      	str	r3, [r7, #8]
        int angular_width = abs(9*angular_width_ticks/100);
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4613      	mov	r3, r2
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	4413      	add	r3, r2
 80009b4:	4a2c      	ldr	r2, [pc, #176]	; (8000a68 <main+0x260>)
 80009b6:	fb82 1203 	smull	r1, r2, r2, r3
 80009ba:	1152      	asrs	r2, r2, #5
 80009bc:	17db      	asrs	r3, r3, #31
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	bfb8      	it	lt
 80009c4:	425b      	neglt	r3, r3
 80009c6:	607b      	str	r3, [r7, #4]
        sprintf((char *)msg_buffer, "\r\n%d,\t%d\t%d\t%d", num_objs, bearing_center, avg_distance, angular_width);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d4:	4925      	ldr	r1, [pc, #148]	; (8000a6c <main+0x264>)
 80009d6:	4826      	ldr	r0, [pc, #152]	; (8000a70 <main+0x268>)
 80009d8:	f004 fa8a 	bl	8004ef0 <siprintf>
          HAL_UART_Transmit(&huart6, msg_buffer, strlen((char *)msg_buffer), 500);
 80009dc:	4824      	ldr	r0, [pc, #144]	; (8000a70 <main+0x268>)
 80009de:	f7ff fbff 	bl	80001e0 <strlen>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009ea:	4921      	ldr	r1, [pc, #132]	; (8000a70 <main+0x268>)
 80009ec:	4821      	ldr	r0, [pc, #132]	; (8000a74 <main+0x26c>)
 80009ee:	f003 fa22 	bl	8003e36 <HAL_UART_Transmit>
 80009f2:	e004      	b.n	80009fe <main+0x1f6>
      }
      else
      {
        rising_edge = pulse_width_x;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <main+0x258>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        obj_detected = 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	633b      	str	r3, [r7, #48]	; 0x30
      }
    }

    /* log information */
    if (obj_detected)
 80009fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d009      	beq.n	8000a18 <main+0x210>
    {
      avg_distance += distance;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <main+0x25c>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	4413      	add	r3, r2
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
      num_samples += 1;
 8000a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a14:	3301      	adds	r3, #1
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    HAL_Delay(200);
 8000a18:	20c8      	movs	r0, #200	; 0xc8
 8000a1a:	f000 ff4f 	bl	80018bc <HAL_Delay>
    pulse_width_x += 20;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <main+0x258>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3314      	adds	r3, #20
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <main+0x258>)
 8000a26:	6013      	str	r3, [r2, #0]
    if (pulse_width_x >= 2500)
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <main+0x258>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000a30:	4293      	cmp	r3, r2
 8000a32:	dc04      	bgt.n	8000a3e <main+0x236>
  while (automatic_mode)
 8000a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f47f af7a 	bne.w	8000930 <main+0x128>
 8000a3c:	e000      	b.n	8000a40 <main+0x238>
    {
      break;
 8000a3e:	bf00      	nop
 8000a40:	2300      	movs	r3, #0
  }
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3740      	adds	r7, #64	; 0x40
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000e8 	.word	0x200000e8
 8000a50:	200001c4 	.word	0x200001c4
 8000a54:	40020800 	.word	0x40020800
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	20000004 	.word	0x20000004
 8000a60:	20000000 	.word	0x20000000
 8000a64:	200001ba 	.word	0x200001ba
 8000a68:	51eb851f 	.word	0x51eb851f
 8000a6c:	080057e4 	.word	0x080057e4
 8000a70:	200000ec 	.word	0x200000ec
 8000a74:	20000294 	.word	0x20000294

08000a78 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	; 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	2230      	movs	r2, #48	; 0x30
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f004 fa2a 	bl	8004ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <SystemClock_Config+0xb8>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <SystemClock_Config+0xb8>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <SystemClock_Config+0xb8>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <SystemClock_Config+0xbc>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <SystemClock_Config+0xbc>)
 8000ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <SystemClock_Config+0xbc>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 0320 	add.w	r3, r7, #32
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 fe45 	bl	800277c <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000af8:	f000 fb86 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000afc:	230f      	movs	r3, #15
 8000afe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 f8a7 	bl	8002c6c <HAL_RCC_ClockConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b24:	f000 fb70 	bl	8001208 <Error_Handler>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3750      	adds	r7, #80	; 0x50
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <HAL_UART_RxCpltCallback+0x24>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d102      	bne.n	8000b50 <HAL_UART_RxCpltCallback+0x18>
  {
    us100_rx_flag = 01; // this flag is set to show that an receiver interrupt has occurred
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_UART_RxCpltCallback+0x28>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
  }
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	40011000 	.word	0x40011000
 8000b60:	200001b4 	.word	0x200001b4

08000b64 <read_us100_dist>:

void read_us100_dist()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart1, &us100_buffer, 2); // get the UART Receiver ready to receive data and then generate an interrupt
 8000b68:	2202      	movs	r2, #2
 8000b6a:	4912      	ldr	r1, [pc, #72]	; (8000bb4 <read_us100_dist+0x50>)
 8000b6c:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <read_us100_dist+0x54>)
 8000b6e:	f003 f9f4 	bl	8003f5a <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1, &cmd_dist, 1, 500);  // send out the command to the US-100 (TRIG Input)
 8000b72:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b76:	2201      	movs	r2, #1
 8000b78:	4910      	ldr	r1, [pc, #64]	; (8000bbc <read_us100_dist+0x58>)
 8000b7a:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <read_us100_dist+0x54>)
 8000b7c:	f003 f95b 	bl	8003e36 <HAL_UART_Transmit>

  while (us100_rx_flag == (00))
 8000b80:	bf00      	nop
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <read_us100_dist+0x5c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0fa      	beq.n	8000b82 <read_us100_dist+0x1e>
  {
  }; // wait for the Flag to be set by the Interrupt Callback routine

  distance = (us100_buffer[0] << 8) + us100_buffer[1]; // convert the two indivual byts into a single 16 bit quantity
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <read_us100_dist+0x50>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <read_us100_dist+0x50>)
 8000b9a:	785b      	ldrb	r3, [r3, #1]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <read_us100_dist+0x60>)
 8000ba6:	801a      	strh	r2, [r3, #0]

  // this section is handled by send_dist_to_pc();
  us100_rx_flag = 00;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <read_us100_dist+0x5c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
  return;
 8000bae:	bf00      	nop
}
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200001b8 	.word	0x200001b8
 8000bb8:	2000020c 	.word	0x2000020c
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	200001b4 	.word	0x200001b4
 8000bc4:	200001ba 	.word	0x200001ba

08000bc8 <get_joystick>:
{
  return;
}

void get_joystick()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  ADC_Select_CH(9);
 8000bcc:	2009      	movs	r0, #9
 8000bce:	f000 f947 	bl	8000e60 <ADC_Select_CH>
  HAL_ADC_Start(&hadc1);
 8000bd2:	4814      	ldr	r0, [pc, #80]	; (8000c24 <get_joystick+0x5c>)
 8000bd4:	f000 feda 	bl	800198c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000bd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bdc:	4811      	ldr	r0, [pc, #68]	; (8000c24 <get_joystick+0x5c>)
 8000bde:	f000 ffbc 	bl	8001b5a <HAL_ADC_PollForConversion>
  y = HAL_ADC_GetValue(&hadc1);
 8000be2:	4810      	ldr	r0, [pc, #64]	; (8000c24 <get_joystick+0x5c>)
 8000be4:	f001 f844 	bl	8001c70 <HAL_ADC_GetValue>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <get_joystick+0x60>)
 8000bee:	601a      	str	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <get_joystick+0x5c>)
 8000bf2:	f000 ff7f 	bl	8001af4 <HAL_ADC_Stop>

  ADC_Select_CH(14);
 8000bf6:	200e      	movs	r0, #14
 8000bf8:	f000 f932 	bl	8000e60 <ADC_Select_CH>
  HAL_ADC_Start(&hadc1);
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <get_joystick+0x5c>)
 8000bfe:	f000 fec5 	bl	800198c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000c02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <get_joystick+0x5c>)
 8000c08:	f000 ffa7 	bl	8001b5a <HAL_ADC_PollForConversion>
  x = HAL_ADC_GetValue(&hadc1);
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <get_joystick+0x5c>)
 8000c0e:	f001 f82f 	bl	8001c70 <HAL_ADC_GetValue>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <get_joystick+0x64>)
 8000c18:	601a      	str	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 8000c1a:	4802      	ldr	r0, [pc, #8]	; (8000c24 <get_joystick+0x5c>)
 8000c1c:	f000 ff6a 	bl	8001af4 <HAL_ADC_Stop>
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  //  sprintf((char *)txd_msg_buffer, "\r\n x = %d, y = %d", x, y);
  //  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char *)txd_msg_buffer), 1000);
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200000a0 	.word	0x200000a0
 8000c28:	20000010 	.word	0x20000010
 8000c2c:	2000000c 	.word	0x2000000c

08000c30 <cycle_led>:

void cycle_led()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  switch (led_col)
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <cycle_led+0xa8>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d84b      	bhi.n	8000cd4 <cycle_led+0xa4>
 8000c3c:	a201      	add	r2, pc, #4	; (adr r2, 8000c44 <cycle_led+0x14>)
 8000c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c42:	bf00      	nop
 8000c44:	08000c55 	.word	0x08000c55
 8000c48:	08000c75 	.word	0x08000c75
 8000c4c:	08000c95 	.word	0x08000c95
 8000c50:	08000cb5 	.word	0x08000cb5
  {
  case 0:
    // all off
    // turn RED on
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LD2_Pin | BLU_Pin | GRN_Pin | RED_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8000c5a:	4820      	ldr	r0, [pc, #128]	; (8000cdc <cycle_led+0xac>)
 8000c5c:	f001 fd74 	bl	8002748 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c66:	481d      	ldr	r0, [pc, #116]	; (8000cdc <cycle_led+0xac>)
 8000c68:	f001 fd6e 	bl	8002748 <HAL_GPIO_WritePin>
    led_col = 1;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <cycle_led+0xa8>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	601a      	str	r2, [r3, #0]
    break;
 8000c72:	e02f      	b.n	8000cd4 <cycle_led+0xa4>
  case 1:
    // red on
    // turn GRN on
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LD2_Pin | BLU_Pin | GRN_Pin | RED_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8000c7a:	4818      	ldr	r0, [pc, #96]	; (8000cdc <cycle_led+0xac>)
 8000c7c:	f001 fd64 	bl	8002748 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c86:	4815      	ldr	r0, [pc, #84]	; (8000cdc <cycle_led+0xac>)
 8000c88:	f001 fd5e 	bl	8002748 <HAL_GPIO_WritePin>
    led_col = 2;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <cycle_led+0xa8>)
 8000c8e:	2202      	movs	r2, #2
 8000c90:	601a      	str	r2, [r3, #0]
    break;
 8000c92:	e01f      	b.n	8000cd4 <cycle_led+0xa4>
  case 2:
    // grn on
    // turn BLU on
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LD2_Pin | BLU_Pin | GRN_Pin | RED_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8000c9a:	4810      	ldr	r0, [pc, #64]	; (8000cdc <cycle_led+0xac>)
 8000c9c:	f001 fd54 	bl	8002748 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <cycle_led+0xac>)
 8000ca8:	f001 fd4e 	bl	8002748 <HAL_GPIO_WritePin>
    led_col = 3;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <cycle_led+0xa8>)
 8000cae:	2203      	movs	r2, #3
 8000cb0:	601a      	str	r2, [r3, #0]
    break;
 8000cb2:	e00f      	b.n	8000cd4 <cycle_led+0xa4>
  case 3:
    // blu on
    // turn RED on
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LD2_Pin | BLU_Pin | GRN_Pin | RED_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8000cba:	4808      	ldr	r0, [pc, #32]	; (8000cdc <cycle_led+0xac>)
 8000cbc:	f001 fd44 	bl	8002748 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <cycle_led+0xac>)
 8000cc8:	f001 fd3e 	bl	8002748 <HAL_GPIO_WritePin>
    led_col = 1;
 8000ccc:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <cycle_led+0xa8>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
    break;
 8000cd2:	bf00      	nop
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200001bc 	.word	0x200001bc
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <update_pulse_widths>:
    break;
  }
}

void update_pulse_widths()
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  // update x.
  if (0 <= x && x <= 68)
 8000ce4:	4b4d      	ldr	r3, [pc, #308]	; (8000e1c <update_pulse_widths+0x13c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db09      	blt.n	8000d00 <update_pulse_widths+0x20>
 8000cec:	4b4b      	ldr	r3, [pc, #300]	; (8000e1c <update_pulse_widths+0x13c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b44      	cmp	r3, #68	; 0x44
 8000cf2:	dc05      	bgt.n	8000d00 <update_pulse_widths+0x20>
  {
    pulse_width_x -= 40;
 8000cf4:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <update_pulse_widths+0x140>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3b28      	subs	r3, #40	; 0x28
 8000cfa:	4a49      	ldr	r2, [pc, #292]	; (8000e20 <update_pulse_widths+0x140>)
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e028      	b.n	8000d52 <update_pulse_widths+0x72>
  }
  else if (69 <= x && x <= 119)
 8000d00:	4b46      	ldr	r3, [pc, #280]	; (8000e1c <update_pulse_widths+0x13c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b44      	cmp	r3, #68	; 0x44
 8000d06:	dd09      	ble.n	8000d1c <update_pulse_widths+0x3c>
 8000d08:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <update_pulse_widths+0x13c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b77      	cmp	r3, #119	; 0x77
 8000d0e:	dc05      	bgt.n	8000d1c <update_pulse_widths+0x3c>
  {
    pulse_width_x -= 20;
 8000d10:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <update_pulse_widths+0x140>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3b14      	subs	r3, #20
 8000d16:	4a42      	ldr	r2, [pc, #264]	; (8000e20 <update_pulse_widths+0x140>)
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e01a      	b.n	8000d52 <update_pulse_widths+0x72>
  }
  else if (131 <= x && x <= 180)
 8000d1c:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <update_pulse_widths+0x13c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b82      	cmp	r3, #130	; 0x82
 8000d22:	dd09      	ble.n	8000d38 <update_pulse_widths+0x58>
 8000d24:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <update_pulse_widths+0x13c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2bb4      	cmp	r3, #180	; 0xb4
 8000d2a:	dc05      	bgt.n	8000d38 <update_pulse_widths+0x58>
  {
    pulse_width_x += 20;
 8000d2c:	4b3c      	ldr	r3, [pc, #240]	; (8000e20 <update_pulse_widths+0x140>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3314      	adds	r3, #20
 8000d32:	4a3b      	ldr	r2, [pc, #236]	; (8000e20 <update_pulse_widths+0x140>)
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e00c      	b.n	8000d52 <update_pulse_widths+0x72>
  }
  else if (181 <= x && x <= 255)
 8000d38:	4b38      	ldr	r3, [pc, #224]	; (8000e1c <update_pulse_widths+0x13c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2bb4      	cmp	r3, #180	; 0xb4
 8000d3e:	dd08      	ble.n	8000d52 <update_pulse_widths+0x72>
 8000d40:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <update_pulse_widths+0x13c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2bff      	cmp	r3, #255	; 0xff
 8000d46:	dc04      	bgt.n	8000d52 <update_pulse_widths+0x72>
  {
    pulse_width_x += 40;
 8000d48:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <update_pulse_widths+0x140>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3328      	adds	r3, #40	; 0x28
 8000d4e:	4a34      	ldr	r2, [pc, #208]	; (8000e20 <update_pulse_widths+0x140>)
 8000d50:	6013      	str	r3, [r2, #0]
  }

  // update y
  if (0 <= y && y <= 68)
 8000d52:	4b34      	ldr	r3, [pc, #208]	; (8000e24 <update_pulse_widths+0x144>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db09      	blt.n	8000d6e <update_pulse_widths+0x8e>
 8000d5a:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <update_pulse_widths+0x144>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b44      	cmp	r3, #68	; 0x44
 8000d60:	dc05      	bgt.n	8000d6e <update_pulse_widths+0x8e>
  {
    pulse_width_y -= 40;
 8000d62:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <update_pulse_widths+0x148>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3b28      	subs	r3, #40	; 0x28
 8000d68:	4a2f      	ldr	r2, [pc, #188]	; (8000e28 <update_pulse_widths+0x148>)
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	e028      	b.n	8000dc0 <update_pulse_widths+0xe0>
  }
  else if (69 <= y && y <= 119)
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <update_pulse_widths+0x144>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b44      	cmp	r3, #68	; 0x44
 8000d74:	dd09      	ble.n	8000d8a <update_pulse_widths+0xaa>
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <update_pulse_widths+0x144>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b77      	cmp	r3, #119	; 0x77
 8000d7c:	dc05      	bgt.n	8000d8a <update_pulse_widths+0xaa>
  {
    pulse_width_y -= 20;
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <update_pulse_widths+0x148>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	3b14      	subs	r3, #20
 8000d84:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <update_pulse_widths+0x148>)
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	e01a      	b.n	8000dc0 <update_pulse_widths+0xe0>
  }
  else if (131 <= y && y <= 180)
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <update_pulse_widths+0x144>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b82      	cmp	r3, #130	; 0x82
 8000d90:	dd09      	ble.n	8000da6 <update_pulse_widths+0xc6>
 8000d92:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <update_pulse_widths+0x144>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2bb4      	cmp	r3, #180	; 0xb4
 8000d98:	dc05      	bgt.n	8000da6 <update_pulse_widths+0xc6>
  {
    pulse_width_y += 20;
 8000d9a:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <update_pulse_widths+0x148>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3314      	adds	r3, #20
 8000da0:	4a21      	ldr	r2, [pc, #132]	; (8000e28 <update_pulse_widths+0x148>)
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	e00c      	b.n	8000dc0 <update_pulse_widths+0xe0>
  }
  else if (181 <= y && y <= 255)
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <update_pulse_widths+0x144>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2bb4      	cmp	r3, #180	; 0xb4
 8000dac:	dd08      	ble.n	8000dc0 <update_pulse_widths+0xe0>
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <update_pulse_widths+0x144>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2bff      	cmp	r3, #255	; 0xff
 8000db4:	dc04      	bgt.n	8000dc0 <update_pulse_widths+0xe0>
  {
    pulse_width_y += 40;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <update_pulse_widths+0x148>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3328      	adds	r3, #40	; 0x28
 8000dbc:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <update_pulse_widths+0x148>)
 8000dbe:	6013      	str	r3, [r2, #0]
  }

  // bound checking
  if (pulse_width_x <= 500)
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <update_pulse_widths+0x140>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000dc8:	dc04      	bgt.n	8000dd4 <update_pulse_widths+0xf4>
  {
    pulse_width_x = 500;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <update_pulse_widths+0x140>)
 8000dcc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e009      	b.n	8000de8 <update_pulse_widths+0x108>
  }
  else if (pulse_width_x >= 2500)
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <update_pulse_widths+0x140>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	dd03      	ble.n	8000de8 <update_pulse_widths+0x108>
  {
    pulse_width_x = 2500;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <update_pulse_widths+0x140>)
 8000de2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000de6:	601a      	str	r2, [r3, #0]
  }

  if (pulse_width_y <= 500)
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <update_pulse_widths+0x148>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000df0:	dc04      	bgt.n	8000dfc <update_pulse_widths+0x11c>
  {
    pulse_width_y = 500;
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <update_pulse_widths+0x148>)
 8000df4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000df8:	601a      	str	r2, [r3, #0]
  {
    pulse_width_y = 2500;
  }

  // bound checking
}
 8000dfa:	e009      	b.n	8000e10 <update_pulse_widths+0x130>
  else if (pulse_width_y >= 2500)
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <update_pulse_widths+0x148>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e04:	4293      	cmp	r3, r2
 8000e06:	dd03      	ble.n	8000e10 <update_pulse_widths+0x130>
    pulse_width_y = 2500;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <update_pulse_widths+0x148>)
 8000e0a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000e0e:	601a      	str	r2, [r3, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2000000c 	.word	0x2000000c
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000010 	.word	0x20000010
 8000e28:	20000004 	.word	0x20000004

08000e2c <toggle_laser>:

void toggle_laser(int state)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if (state == 1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d106      	bne.n	8000e48 <toggle_laser+0x1c>
  {
    // on
    HAL_GPIO_WritePin(LASERn_GPIO_Port, LASERn_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <toggle_laser+0x30>)
 8000e42:	f001 fc81 	bl	8002748 <HAL_GPIO_WritePin>
  else
  {
    // off
    HAL_GPIO_WritePin(LASERn_GPIO_Port, LASERn_Pin, GPIO_PIN_RESET);
  }
}
 8000e46:	e005      	b.n	8000e54 <toggle_laser+0x28>
    HAL_GPIO_WritePin(LASERn_GPIO_Port, LASERn_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e4e:	4803      	ldr	r0, [pc, #12]	; (8000e5c <toggle_laser+0x30>)
 8000e50:	f001 fc7a 	bl	8002748 <HAL_GPIO_WritePin>
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40020400 	.word	0x40020400

08000e60 <ADC_Select_CH>:
void ADC_Select_CH(int CH)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
  switch (CH)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	f200 814b 	bhi.w	8001114 <ADC_Select_CH+0x2b4>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <ADC_Select_CH+0x24>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000ec5 	.word	0x08000ec5
 8000e88:	08000ee7 	.word	0x08000ee7
 8000e8c:	08000f09 	.word	0x08000f09
 8000e90:	08000f2b 	.word	0x08000f2b
 8000e94:	08000f4d 	.word	0x08000f4d
 8000e98:	08000f6f 	.word	0x08000f6f
 8000e9c:	08000f91 	.word	0x08000f91
 8000ea0:	08000fb3 	.word	0x08000fb3
 8000ea4:	08000fd5 	.word	0x08000fd5
 8000ea8:	08000ff7 	.word	0x08000ff7
 8000eac:	08001017 	.word	0x08001017
 8000eb0:	08001037 	.word	0x08001037
 8000eb4:	08001057 	.word	0x08001057
 8000eb8:	08001077 	.word	0x08001077
 8000ebc:	08001097 	.word	0x08001097
 8000ec0:	080010b7 	.word	0x080010b7
  {
  case 0:
    sConfig.Channel = ADC_CHANNEL_0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ecc:	f107 0308 	add.w	r3, r7, #8
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4892      	ldr	r0, [pc, #584]	; (800111c <ADC_Select_CH+0x2bc>)
 8000ed4:	f000 feda 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 80fb 	beq.w	80010d6 <ADC_Select_CH+0x276>
    {
      Error_Handler();
 8000ee0:	f000 f992 	bl	8001208 <Error_Handler>
    }
    break;
 8000ee4:	e0f7      	b.n	80010d6 <ADC_Select_CH+0x276>
  case 1:
    sConfig.Channel = ADC_CHANNEL_1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4889      	ldr	r0, [pc, #548]	; (800111c <ADC_Select_CH+0x2bc>)
 8000ef6:	f000 fec9 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80ec 	beq.w	80010da <ADC_Select_CH+0x27a>
    {
      Error_Handler();
 8000f02:	f000 f981 	bl	8001208 <Error_Handler>
    }
    break;
 8000f06:	e0e8      	b.n	80010da <ADC_Select_CH+0x27a>
  case 2:
    sConfig.Channel = ADC_CHANNEL_2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4619      	mov	r1, r3
 8000f16:	4881      	ldr	r0, [pc, #516]	; (800111c <ADC_Select_CH+0x2bc>)
 8000f18:	f000 feb8 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 80dd 	beq.w	80010de <ADC_Select_CH+0x27e>
    {
      Error_Handler();
 8000f24:	f000 f970 	bl	8001208 <Error_Handler>
    }
    break;
 8000f28:	e0d9      	b.n	80010de <ADC_Select_CH+0x27e>
  case 3:
    sConfig.Channel = ADC_CHANNEL_3;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	4619      	mov	r1, r3
 8000f38:	4878      	ldr	r0, [pc, #480]	; (800111c <ADC_Select_CH+0x2bc>)
 8000f3a:	f000 fea7 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80ce 	beq.w	80010e2 <ADC_Select_CH+0x282>
    {
      Error_Handler();
 8000f46:	f000 f95f 	bl	8001208 <Error_Handler>
    }
    break;
 8000f4a:	e0ca      	b.n	80010e2 <ADC_Select_CH+0x282>
  case 4:
    sConfig.Channel = ADC_CHANNEL_4;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4870      	ldr	r0, [pc, #448]	; (800111c <ADC_Select_CH+0x2bc>)
 8000f5c:	f000 fe96 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 80bf 	beq.w	80010e6 <ADC_Select_CH+0x286>
    {
      Error_Handler();
 8000f68:	f000 f94e 	bl	8001208 <Error_Handler>
    }
    break;
 8000f6c:	e0bb      	b.n	80010e6 <ADC_Select_CH+0x286>
  case 5:
    sConfig.Channel = ADC_CHANNEL_5;
 8000f6e:	2305      	movs	r3, #5
 8000f70:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4867      	ldr	r0, [pc, #412]	; (800111c <ADC_Select_CH+0x2bc>)
 8000f7e:	f000 fe85 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80b0 	beq.w	80010ea <ADC_Select_CH+0x28a>
    {
      Error_Handler();
 8000f8a:	f000 f93d 	bl	8001208 <Error_Handler>
    }
    break;
 8000f8e:	e0ac      	b.n	80010ea <ADC_Select_CH+0x28a>
  case 6:
    sConfig.Channel = ADC_CHANNEL_6;
 8000f90:	2306      	movs	r3, #6
 8000f92:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	485f      	ldr	r0, [pc, #380]	; (800111c <ADC_Select_CH+0x2bc>)
 8000fa0:	f000 fe74 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 80a1 	beq.w	80010ee <ADC_Select_CH+0x28e>
    {
      Error_Handler();
 8000fac:	f000 f92c 	bl	8001208 <Error_Handler>
    }
    break;
 8000fb0:	e09d      	b.n	80010ee <ADC_Select_CH+0x28e>
  case 7:
    sConfig.Channel = ADC_CHANNEL_7;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4856      	ldr	r0, [pc, #344]	; (800111c <ADC_Select_CH+0x2bc>)
 8000fc2:	f000 fe63 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 8092 	beq.w	80010f2 <ADC_Select_CH+0x292>
    {
      Error_Handler();
 8000fce:	f000 f91b 	bl	8001208 <Error_Handler>
    }
    break;
 8000fd2:	e08e      	b.n	80010f2 <ADC_Select_CH+0x292>
  case 8:
    sConfig.Channel = ADC_CHANNEL_8;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	f107 0308 	add.w	r3, r7, #8
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	484e      	ldr	r0, [pc, #312]	; (800111c <ADC_Select_CH+0x2bc>)
 8000fe4:	f000 fe52 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 8083 	beq.w	80010f6 <ADC_Select_CH+0x296>
    {
      Error_Handler();
 8000ff0:	f000 f90a 	bl	8001208 <Error_Handler>
    }
    break;
 8000ff4:	e07f      	b.n	80010f6 <ADC_Select_CH+0x296>
  case 9:
    sConfig.Channel = ADC_CHANNEL_9;
 8000ff6:	2309      	movs	r3, #9
 8000ff8:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4619      	mov	r1, r3
 8001004:	4845      	ldr	r0, [pc, #276]	; (800111c <ADC_Select_CH+0x2bc>)
 8001006:	f000 fe41 	bl	8001c8c <HAL_ADC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d074      	beq.n	80010fa <ADC_Select_CH+0x29a>
    {
      Error_Handler();
 8001010:	f000 f8fa 	bl	8001208 <Error_Handler>
    }
    break;
 8001014:	e071      	b.n	80010fa <ADC_Select_CH+0x29a>
  case 10:
    sConfig.Channel = ADC_CHANNEL_10;
 8001016:	230a      	movs	r3, #10
 8001018:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	4619      	mov	r1, r3
 8001024:	483d      	ldr	r0, [pc, #244]	; (800111c <ADC_Select_CH+0x2bc>)
 8001026:	f000 fe31 	bl	8001c8c <HAL_ADC_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d066      	beq.n	80010fe <ADC_Select_CH+0x29e>
    {
      Error_Handler();
 8001030:	f000 f8ea 	bl	8001208 <Error_Handler>
    }
    break;
 8001034:	e063      	b.n	80010fe <ADC_Select_CH+0x29e>
  case 11:
    sConfig.Channel = ADC_CHANNEL_11;
 8001036:	230b      	movs	r3, #11
 8001038:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 800103a:	2301      	movs	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4619      	mov	r1, r3
 8001044:	4835      	ldr	r0, [pc, #212]	; (800111c <ADC_Select_CH+0x2bc>)
 8001046:	f000 fe21 	bl	8001c8c <HAL_ADC_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d058      	beq.n	8001102 <ADC_Select_CH+0x2a2>
    {
      Error_Handler();
 8001050:	f000 f8da 	bl	8001208 <Error_Handler>
    }
    break;
 8001054:	e055      	b.n	8001102 <ADC_Select_CH+0x2a2>
  case 12:
    sConfig.Channel = ADC_CHANNEL_12;
 8001056:	230c      	movs	r3, #12
 8001058:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 800105a:	2301      	movs	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	4619      	mov	r1, r3
 8001064:	482d      	ldr	r0, [pc, #180]	; (800111c <ADC_Select_CH+0x2bc>)
 8001066:	f000 fe11 	bl	8001c8c <HAL_ADC_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d04a      	beq.n	8001106 <ADC_Select_CH+0x2a6>
    {
      Error_Handler();
 8001070:	f000 f8ca 	bl	8001208 <Error_Handler>
    }
    break;
 8001074:	e047      	b.n	8001106 <ADC_Select_CH+0x2a6>
  case 13:
    sConfig.Channel = ADC_CHANNEL_13;
 8001076:	230d      	movs	r3, #13
 8001078:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 800107a:	2301      	movs	r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	4619      	mov	r1, r3
 8001084:	4825      	ldr	r0, [pc, #148]	; (800111c <ADC_Select_CH+0x2bc>)
 8001086:	f000 fe01 	bl	8001c8c <HAL_ADC_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d03c      	beq.n	800110a <ADC_Select_CH+0x2aa>
    {
      Error_Handler();
 8001090:	f000 f8ba 	bl	8001208 <Error_Handler>
    }
    break;
 8001094:	e039      	b.n	800110a <ADC_Select_CH+0x2aa>
  case 14:
    sConfig.Channel = ADC_CHANNEL_14;
 8001096:	230e      	movs	r3, #14
 8001098:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	4619      	mov	r1, r3
 80010a4:	481d      	ldr	r0, [pc, #116]	; (800111c <ADC_Select_CH+0x2bc>)
 80010a6:	f000 fdf1 	bl	8001c8c <HAL_ADC_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d02e      	beq.n	800110e <ADC_Select_CH+0x2ae>
    {
      Error_Handler();
 80010b0:	f000 f8aa 	bl	8001208 <Error_Handler>
    }
    break;
 80010b4:	e02b      	b.n	800110e <ADC_Select_CH+0x2ae>
  case 15:
    sConfig.Channel = ADC_CHANNEL_15;
 80010b6:	230f      	movs	r3, #15
 80010b8:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4619      	mov	r1, r3
 80010c4:	4815      	ldr	r0, [pc, #84]	; (800111c <ADC_Select_CH+0x2bc>)
 80010c6:	f000 fde1 	bl	8001c8c <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d020      	beq.n	8001112 <ADC_Select_CH+0x2b2>
    {
      Error_Handler();
 80010d0:	f000 f89a 	bl	8001208 <Error_Handler>
    }
    break;
 80010d4:	e01d      	b.n	8001112 <ADC_Select_CH+0x2b2>
    break;
 80010d6:	bf00      	nop
 80010d8:	e01c      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 80010da:	bf00      	nop
 80010dc:	e01a      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 80010de:	bf00      	nop
 80010e0:	e018      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 80010e2:	bf00      	nop
 80010e4:	e016      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 80010e6:	bf00      	nop
 80010e8:	e014      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 80010ea:	bf00      	nop
 80010ec:	e012      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 80010ee:	bf00      	nop
 80010f0:	e010      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 80010f2:	bf00      	nop
 80010f4:	e00e      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 80010f6:	bf00      	nop
 80010f8:	e00c      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 80010fa:	bf00      	nop
 80010fc:	e00a      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 80010fe:	bf00      	nop
 8001100:	e008      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 8001102:	bf00      	nop
 8001104:	e006      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 8001106:	bf00      	nop
 8001108:	e004      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 800110a:	bf00      	nop
 800110c:	e002      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 800110e:	bf00      	nop
 8001110:	e000      	b.n	8001114 <ADC_Select_CH+0x2b4>
    break;
 8001112:	bf00      	nop
  }
}
 8001114:	bf00      	nop
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200000a0 	.word	0x200000a0

08001120 <send_bearing_and_distance>:

void send_bearing_and_distance()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
  int min_pw = 500;
 8001126:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800112a:	617b      	str	r3, [r7, #20]
  int max_pw = 2500;
 800112c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001130:	613b      	str	r3, [r7, #16]

  int min_deg = -90;
 8001132:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8001136:	60fb      	str	r3, [r7, #12]
  int max_deg = 90;
 8001138:	235a      	movs	r3, #90	; 0x5a
 800113a:	60bb      	str	r3, [r7, #8]

  // acc deg = (max_deg - min_deg) / (max_pw - min_pw) * pw - 135?

  int deg = -(((9 * pulse_width_x) / 100) - 135);
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <send_bearing_and_distance+0x64>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4613      	mov	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4413      	add	r3, r2
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <send_bearing_and_distance+0x68>)
 8001148:	fb82 1203 	smull	r1, r2, r2, r3
 800114c:	1152      	asrs	r2, r2, #5
 800114e:	17db      	asrs	r3, r3, #31
 8001150:	1a9b      	subs	r3, r3, r2
 8001152:	3387      	adds	r3, #135	; 0x87
 8001154:	607b      	str	r3, [r7, #4]

  sprintf((char *)msg_buffer, "\r\n Bearing = %d degrees, Distance Sensed (mm)= %d", deg, distance); // set up the report content                                                       // this is just used to slow down the sequence (user determined)
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <send_bearing_and_distance+0x6c>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	490c      	ldr	r1, [pc, #48]	; (8001190 <send_bearing_and_distance+0x70>)
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <send_bearing_and_distance+0x74>)
 8001162:	f003 fec5 	bl	8004ef0 <siprintf>
  HAL_UART_Transmit(&huart6, msg_buffer, strlen((char *)msg_buffer), 500);                           // send out the report
 8001166:	480b      	ldr	r0, [pc, #44]	; (8001194 <send_bearing_and_distance+0x74>)
 8001168:	f7ff f83a 	bl	80001e0 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	b29a      	uxth	r2, r3
 8001170:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001174:	4907      	ldr	r1, [pc, #28]	; (8001194 <send_bearing_and_distance+0x74>)
 8001176:	4808      	ldr	r0, [pc, #32]	; (8001198 <send_bearing_and_distance+0x78>)
 8001178:	f002 fe5d 	bl	8003e36 <HAL_UART_Transmit>
  return;
 800117c:	bf00      	nop
}
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000000 	.word	0x20000000
 8001188:	51eb851f 	.word	0x51eb851f
 800118c:	200001ba 	.word	0x200001ba
 8001190:	08005810 	.word	0x08005810
 8001194:	200000ec 	.word	0x200000ec
 8001198:	20000294 	.word	0x20000294

0800119c <jump>:

int jump(int A, int B)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  int ratio = A / B;
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80011ae:	60fb      	str	r3, [r7, #12]
  if (ratio < -1.2)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b6:	da01      	bge.n	80011bc <jump+0x20>
  {
    return 1; // jump
 80011b8:	2301      	movs	r3, #1
 80011ba:	e005      	b.n	80011c8 <jump+0x2c>
  }
  else if (ratio > 1.2)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	dd01      	ble.n	80011c6 <jump+0x2a>
  {
    return 1; // jump
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <jump+0x2c>
  }
  else
  {
    return 0;
 80011c6:	2300      	movs	r3, #0
  }
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <print_automatic_mode_header>:

void print_automatic_mode_header()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  sprintf((char *)msg_buffer, "\r\n LS004 Team08,\tCalibrated FOV ,\tFOV Centerline correction (degrees)\nObject:(n),\t Bearing to Object CENTER: (degrees),\tDISTANCE: to Object (mm),\tObject Angular Width:(degrees)"); // set up the report content                                                       // this is just used to slow down the sequence (user determined)
 80011d8:	4908      	ldr	r1, [pc, #32]	; (80011fc <print_automatic_mode_header+0x28>)
 80011da:	4809      	ldr	r0, [pc, #36]	; (8001200 <print_automatic_mode_header+0x2c>)
 80011dc:	f003 fe88 	bl	8004ef0 <siprintf>
  HAL_UART_Transmit(&huart6, msg_buffer, strlen((char *)msg_buffer), 500);                                  // send out the report
 80011e0:	4807      	ldr	r0, [pc, #28]	; (8001200 <print_automatic_mode_header+0x2c>)
 80011e2:	f7fe fffd 	bl	80001e0 <strlen>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011ee:	4904      	ldr	r1, [pc, #16]	; (8001200 <print_automatic_mode_header+0x2c>)
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <print_automatic_mode_header+0x30>)
 80011f2:	f002 fe20 	bl	8003e36 <HAL_UART_Transmit>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	08005844 	.word	0x08005844
 8001200:	200000ec 	.word	0x200000ec
 8001204:	20000294 	.word	0x20000294

08001208 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001210:	e7fe      	b.n	8001210 <Error_Handler+0x8>
	...

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_MspInit+0x4c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <HAL_MspInit+0x4c>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <HAL_MspInit+0x4c>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_MspInit+0x4c>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a08      	ldr	r2, [pc, #32]	; (8001260 <HAL_MspInit+0x4c>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_MspInit+0x4c>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001252:	2007      	movs	r0, #7
 8001254:	f001 f808 	bl	8002268 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <NMI_Handler+0x4>

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler+0x4>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <UsageFault_Handler+0x4>

08001282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b0:	f000 fae4 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <USART1_IRQHandler+0x10>)
 80012be:	f002 fe7d 	bl	8003fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000020c 	.word	0x2000020c

080012cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <_sbrk+0x5c>)
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <_sbrk+0x60>)
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <_sbrk+0x64>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <_sbrk+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d207      	bcs.n	800130c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012fc:	f003 fdc6 	bl	8004e8c <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	220c      	movs	r2, #12
 8001304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	e009      	b.n	8001320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <_sbrk+0x64>)
 800131c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20018000 	.word	0x20018000
 800132c:	00000400 	.word	0x00000400
 8001330:	200001c0 	.word	0x200001c0
 8001334:	200002f0 	.word	0x200002f0

08001338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <SystemInit+0x20>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <SystemInit+0x20>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08e      	sub	sp, #56	; 0x38
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	f107 0320 	add.w	r3, r7, #32
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800138c:	4b34      	ldr	r3, [pc, #208]	; (8001460 <MX_TIM2_Init+0x104>)
 800138e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001392:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001394:	4b32      	ldr	r3, [pc, #200]	; (8001460 <MX_TIM2_Init+0x104>)
 8001396:	220f      	movs	r2, #15
 8001398:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <MX_TIM2_Init+0x104>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80013a0:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <MX_TIM2_Init+0x104>)
 80013a2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <MX_TIM2_Init+0x104>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ae:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <MX_TIM2_Init+0x104>)
 80013b0:	2280      	movs	r2, #128	; 0x80
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013b4:	482a      	ldr	r0, [pc, #168]	; (8001460 <MX_TIM2_Init+0x104>)
 80013b6:	f001 fe79 	bl	80030ac <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013c0:	f7ff ff22 	bl	8001208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ce:	4619      	mov	r1, r3
 80013d0:	4823      	ldr	r0, [pc, #140]	; (8001460 <MX_TIM2_Init+0x104>)
 80013d2:	f002 f8e1 	bl	8003598 <HAL_TIM_ConfigClockSource>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013dc:	f7ff ff14 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013e0:	481f      	ldr	r0, [pc, #124]	; (8001460 <MX_TIM2_Init+0x104>)
 80013e2:	f001 ff0d 	bl	8003200 <HAL_TIM_PWM_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013ec:	f7ff ff0c 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	4619      	mov	r1, r3
 80013fe:	4818      	ldr	r0, [pc, #96]	; (8001460 <MX_TIM2_Init+0x104>)
 8001400:	f002 fc5e 	bl	8003cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800140a:	f7ff fefd 	bl	8001208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140e:	2360      	movs	r3, #96	; 0x60
 8001410:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001412:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001416:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	480e      	ldr	r0, [pc, #56]	; (8001460 <MX_TIM2_Init+0x104>)
 8001428:	f001 fff4 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001432:	f7ff fee9 	bl	8001208 <Error_Handler>
  }
  sConfigOC.Pulse = 2500-1;
 8001436:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800143a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2204      	movs	r2, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <MX_TIM2_Init+0x104>)
 8001444:	f001 ffe6 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800144e:	f7ff fedb 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <MX_TIM2_Init+0x104>)
 8001454:	f000 f826 	bl	80014a4 <HAL_TIM_MspPostInit>

}
 8001458:	bf00      	nop
 800145a:	3738      	adds	r7, #56	; 0x38
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200001c4 	.word	0x200001c4

08001464 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001474:	d10d      	bne.n	8001492 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_TIM_Base_MspInit+0x3c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c4:	d11d      	bne.n	8001502 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_TIM_MspPostInit+0x68>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_TIM_MspPostInit+0x68>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_TIM_MspPostInit+0x68>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014e2:	2303      	movs	r3, #3
 80014e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4619      	mov	r1, r3
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <HAL_TIM_MspPostInit+0x6c>)
 80014fe:	f000 ff87 	bl	8002410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40020000 	.word	0x40020000

08001514 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <MX_USART1_UART_Init+0x50>)
 800151c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001520:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800154c:	f002 fc26 	bl	8003d9c <HAL_UART_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001556:	f7ff fe57 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2000020c 	.word	0x2000020c
 8001564:	40011000 	.word	0x40011000

08001568 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <MX_USART2_UART_Init+0x50>)
 8001570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 80015a0:	f002 fbfc 	bl	8003d9c <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015aa:	f7ff fe2d 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000250 	.word	0x20000250
 80015b8:	40004400 	.word	0x40004400

080015bc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <MX_USART6_UART_Init+0x50>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015f4:	f002 fbd2 	bl	8003d9c <HAL_UART_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80015fe:	f7ff fe03 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000294 	.word	0x20000294
 800160c:	40011400 	.word	0x40011400

08001610 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08e      	sub	sp, #56	; 0x38
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a4f      	ldr	r2, [pc, #316]	; (800176c <HAL_UART_MspInit+0x15c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d135      	bne.n	800169e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
 8001636:	4b4e      	ldr	r3, [pc, #312]	; (8001770 <HAL_UART_MspInit+0x160>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a4d      	ldr	r2, [pc, #308]	; (8001770 <HAL_UART_MspInit+0x160>)
 800163c:	f043 0310 	orr.w	r3, r3, #16
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b4b      	ldr	r3, [pc, #300]	; (8001770 <HAL_UART_MspInit+0x160>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f003 0310 	and.w	r3, r3, #16
 800164a:	623b      	str	r3, [r7, #32]
 800164c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	4b47      	ldr	r3, [pc, #284]	; (8001770 <HAL_UART_MspInit+0x160>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a46      	ldr	r2, [pc, #280]	; (8001770 <HAL_UART_MspInit+0x160>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b44      	ldr	r3, [pc, #272]	; (8001770 <HAL_UART_MspInit+0x160>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
 8001668:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800166a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800167c:	2307      	movs	r3, #7
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001684:	4619      	mov	r1, r3
 8001686:	483b      	ldr	r0, [pc, #236]	; (8001774 <HAL_UART_MspInit+0x164>)
 8001688:	f000 fec2 	bl	8002410 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	2025      	movs	r0, #37	; 0x25
 8001692:	f000 fdf4 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001696:	2025      	movs	r0, #37	; 0x25
 8001698:	f000 fe0d 	bl	80022b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800169c:	e062      	b.n	8001764 <HAL_UART_MspInit+0x154>
  else if(uartHandle->Instance==USART2)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a35      	ldr	r2, [pc, #212]	; (8001778 <HAL_UART_MspInit+0x168>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d12c      	bne.n	8001702 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <HAL_UART_MspInit+0x160>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <HAL_UART_MspInit+0x160>)
 80016b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b6:	6413      	str	r3, [r2, #64]	; 0x40
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_UART_MspInit+0x160>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	4b29      	ldr	r3, [pc, #164]	; (8001770 <HAL_UART_MspInit+0x160>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	4a28      	ldr	r2, [pc, #160]	; (8001770 <HAL_UART_MspInit+0x160>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6313      	str	r3, [r2, #48]	; 0x30
 80016d4:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_UART_MspInit+0x160>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016e0:	230c      	movs	r3, #12
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f0:	2307      	movs	r3, #7
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	481e      	ldr	r0, [pc, #120]	; (8001774 <HAL_UART_MspInit+0x164>)
 80016fc:	f000 fe88 	bl	8002410 <HAL_GPIO_Init>
}
 8001700:	e030      	b.n	8001764 <HAL_UART_MspInit+0x154>
  else if(uartHandle->Instance==USART6)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1d      	ldr	r2, [pc, #116]	; (800177c <HAL_UART_MspInit+0x16c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d12b      	bne.n	8001764 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_UART_MspInit+0x160>)
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	4a16      	ldr	r2, [pc, #88]	; (8001770 <HAL_UART_MspInit+0x160>)
 8001716:	f043 0320 	orr.w	r3, r3, #32
 800171a:	6453      	str	r3, [r2, #68]	; 0x44
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_UART_MspInit+0x160>)
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_UART_MspInit+0x160>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <HAL_UART_MspInit+0x160>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6313      	str	r3, [r2, #48]	; 0x30
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_UART_MspInit+0x160>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001744:	23c0      	movs	r3, #192	; 0xc0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001754:	2308      	movs	r3, #8
 8001756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	4619      	mov	r1, r3
 800175e:	4808      	ldr	r0, [pc, #32]	; (8001780 <HAL_UART_MspInit+0x170>)
 8001760:	f000 fe56 	bl	8002410 <HAL_GPIO_Init>
}
 8001764:	bf00      	nop
 8001766:	3738      	adds	r7, #56	; 0x38
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40011000 	.word	0x40011000
 8001770:	40023800 	.word	0x40023800
 8001774:	40020000 	.word	0x40020000
 8001778:	40004400 	.word	0x40004400
 800177c:	40011400 	.word	0x40011400
 8001780:	40020800 	.word	0x40020800

08001784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800178a:	490e      	ldr	r1, [pc, #56]	; (80017c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800178c:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017a0:	4c0b      	ldr	r4, [pc, #44]	; (80017d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ae:	f7ff fdc3 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b2:	f003 fb71 	bl	8004e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b6:	f7ff f827 	bl	8000808 <main>
  bx  lr    
 80017ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80017c8:	08005954 	.word	0x08005954
  ldr r2, =_sbss
 80017cc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80017d0:	200002ec 	.word	0x200002ec

080017d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_Init+0x40>)
 80017e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_Init+0x40>)
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_Init+0x40>)
 80017fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 fd31 	bl	8002268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f808 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff fd02 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x54>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_InitTick+0x58>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fd49 	bl	80022d2 <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f000 fd11 	bl	800227e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_InitTick+0x5c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000014 	.word	0x20000014
 8001874:	2000001c 	.word	0x2000001c
 8001878:	20000018 	.word	0x20000018

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	2000001c 	.word	0x2000001c
 80018a0:	200002d8 	.word	0x200002d8

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200002d8 	.word	0x200002d8

080018bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff ffee 	bl	80018a4 <HAL_GetTick>
 80018c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d4:	d005      	beq.n	80018e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_Delay+0x44>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018e2:	bf00      	nop
 80018e4:	f7ff ffde 	bl	80018a4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d8f7      	bhi.n	80018e4 <HAL_Delay+0x28>
  {
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000001c 	.word	0x2000001c

08001904 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e033      	b.n	8001982 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7fe fe88 	bl	8000638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	2b00      	cmp	r3, #0
 8001940:	d118      	bne.n	8001974 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800194a:	f023 0302 	bic.w	r3, r3, #2
 800194e:	f043 0202 	orr.w	r2, r3, #2
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 faba 	bl	8001ed0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f023 0303 	bic.w	r3, r3, #3
 800196a:	f043 0201 	orr.w	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
 8001972:	e001      	b.n	8001978 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_Start+0x1a>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e097      	b.n	8001ad6 <HAL_ADC_Start+0x14a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d018      	beq.n	80019ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019cc:	4b45      	ldr	r3, [pc, #276]	; (8001ae4 <HAL_ADC_Start+0x158>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a45      	ldr	r2, [pc, #276]	; (8001ae8 <HAL_ADC_Start+0x15c>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0c9a      	lsrs	r2, r3, #18
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019e0:	e002      	b.n	80019e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f9      	bne.n	80019e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d15f      	bne.n	8001abc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a3a:	d106      	bne.n	8001a4a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	f023 0206 	bic.w	r2, r3, #6
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44
 8001a48:	e002      	b.n	8001a50 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_ADC_Start+0x160>)
 8001a5a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a64:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10f      	bne.n	8001a92 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d129      	bne.n	8001ad4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	e020      	b.n	8001ad4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <HAL_ADC_Start+0x164>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d11b      	bne.n	8001ad4 <HAL_ADC_Start+0x148>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d114      	bne.n	8001ad4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	e00b      	b.n	8001ad4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f043 0210 	orr.w	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000014 	.word	0x20000014
 8001ae8:	431bde83 	.word	0x431bde83
 8001aec:	40012300 	.word	0x40012300
 8001af0:	40012000 	.word	0x40012000

08001af4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_Stop+0x16>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e021      	b.n	8001b4e <HAL_ADC_Stop+0x5a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0201 	bic.w	r2, r2, #1
 8001b20:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d109      	bne.n	8001b44 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b76:	d113      	bne.n	8001ba0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b86:	d10b      	bne.n	8001ba0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f043 0220 	orr.w	r2, r3, #32
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e063      	b.n	8001c68 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001ba0:	f7ff fe80 	bl	80018a4 <HAL_GetTick>
 8001ba4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ba6:	e021      	b.n	8001bec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bae:	d01d      	beq.n	8001bec <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d007      	beq.n	8001bc6 <HAL_ADC_PollForConversion+0x6c>
 8001bb6:	f7ff fe75 	bl	80018a4 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d212      	bcs.n	8001bec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d00b      	beq.n	8001bec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f043 0204 	orr.w	r2, r3, #4
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e03d      	b.n	8001c68 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d1d6      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f06f 0212 	mvn.w	r2, #18
 8001c02:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d123      	bne.n	8001c66 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d11f      	bne.n	8001c66 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d111      	bne.n	8001c66 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d105      	bne.n	8001c66 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x1c>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e105      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x228>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b09      	cmp	r3, #9
 8001cb6:	d925      	bls.n	8001d04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68d9      	ldr	r1, [r3, #12]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	3b1e      	subs	r3, #30
 8001cce:	2207      	movs	r2, #7
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43da      	mvns	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	400a      	ands	r2, r1
 8001cdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68d9      	ldr	r1, [r3, #12]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4403      	add	r3, r0
 8001cf6:	3b1e      	subs	r3, #30
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	e022      	b.n	8001d4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6919      	ldr	r1, [r3, #16]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	2207      	movs	r2, #7
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	400a      	ands	r2, r1
 8001d26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6919      	ldr	r1, [r3, #16]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4403      	add	r3, r0
 8001d40:	409a      	lsls	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d824      	bhi.n	8001d9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	3b05      	subs	r3, #5
 8001d64:	221f      	movs	r2, #31
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	400a      	ands	r2, r1
 8001d72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3b05      	subs	r3, #5
 8001d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	635a      	str	r2, [r3, #52]	; 0x34
 8001d9a:	e04c      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b0c      	cmp	r3, #12
 8001da2:	d824      	bhi.n	8001dee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	3b23      	subs	r3, #35	; 0x23
 8001db6:	221f      	movs	r2, #31
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b23      	subs	r3, #35	; 0x23
 8001de0:	fa00 f203 	lsl.w	r2, r0, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	631a      	str	r2, [r3, #48]	; 0x30
 8001dec:	e023      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3b41      	subs	r3, #65	; 0x41
 8001e00:	221f      	movs	r2, #31
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	3b41      	subs	r3, #65	; 0x41
 8001e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_ADC_ConfigChannel+0x234>)
 8001e38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a21      	ldr	r2, [pc, #132]	; (8001ec4 <HAL_ADC_ConfigChannel+0x238>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d109      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x1cc>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b12      	cmp	r3, #18
 8001e4a:	d105      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a19      	ldr	r2, [pc, #100]	; (8001ec4 <HAL_ADC_ConfigChannel+0x238>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d123      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x21e>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d003      	beq.n	8001e72 <HAL_ADC_ConfigChannel+0x1e6>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b11      	cmp	r3, #17
 8001e70:	d11b      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d111      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_ADC_ConfigChannel+0x23c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a10      	ldr	r2, [pc, #64]	; (8001ecc <HAL_ADC_ConfigChannel+0x240>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	0c9a      	lsrs	r2, r3, #18
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e9c:	e002      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f9      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40012300 	.word	0x40012300
 8001ec4:	40012000 	.word	0x40012000
 8001ec8:	20000014 	.word	0x20000014
 8001ecc:	431bde83 	.word	0x431bde83

08001ed0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed8:	4b79      	ldr	r3, [pc, #484]	; (80020c0 <ADC_Init+0x1f0>)
 8001eda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	021a      	lsls	r2, r3, #8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6899      	ldr	r1, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	4a58      	ldr	r2, [pc, #352]	; (80020c4 <ADC_Init+0x1f4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d022      	beq.n	8001fae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6899      	ldr	r1, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6899      	ldr	r1, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	e00f      	b.n	8001fce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0202 	bic.w	r2, r2, #2
 8001fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6899      	ldr	r1, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7e1b      	ldrb	r3, [r3, #24]
 8001fe8:	005a      	lsls	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800200a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800201a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	3b01      	subs	r3, #1
 8002028:	035a      	lsls	r2, r3, #13
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	e007      	b.n	8002044 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002042:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	3b01      	subs	r3, #1
 8002060:	051a      	lsls	r2, r3, #20
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002078:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6899      	ldr	r1, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002086:	025a      	lsls	r2, r3, #9
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800209e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6899      	ldr	r1, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	029a      	lsls	r2, r3, #10
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	609a      	str	r2, [r3, #8]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40012300 	.word	0x40012300
 80020c4:	0f000001 	.word	0x0f000001

080020c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fa:	4a04      	ldr	r2, [pc, #16]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60d3      	str	r3, [r2, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <__NVIC_GetPriorityGrouping+0x18>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 0307 	and.w	r3, r3, #7
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	2b00      	cmp	r3, #0
 800213c:	db0b      	blt.n	8002156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 021f 	and.w	r2, r3, #31
 8002144:	4907      	ldr	r1, [pc, #28]	; (8002164 <__NVIC_EnableIRQ+0x38>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2001      	movs	r0, #1
 800214e:	fa00 f202 	lsl.w	r2, r0, r2
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000e100 	.word	0xe000e100

08002168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	6039      	str	r1, [r7, #0]
 8002172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	2b00      	cmp	r3, #0
 800217a:	db0a      	blt.n	8002192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	b2da      	uxtb	r2, r3
 8002180:	490c      	ldr	r1, [pc, #48]	; (80021b4 <__NVIC_SetPriority+0x4c>)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	0112      	lsls	r2, r2, #4
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	440b      	add	r3, r1
 800218c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002190:	e00a      	b.n	80021a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4908      	ldr	r1, [pc, #32]	; (80021b8 <__NVIC_SetPriority+0x50>)
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	3b04      	subs	r3, #4
 80021a0:	0112      	lsls	r2, r2, #4
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	440b      	add	r3, r1
 80021a6:	761a      	strb	r2, [r3, #24]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000e100 	.word	0xe000e100
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f1c3 0307 	rsb	r3, r3, #7
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	bf28      	it	cs
 80021da:	2304      	movcs	r3, #4
 80021dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3304      	adds	r3, #4
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d902      	bls.n	80021ec <NVIC_EncodePriority+0x30>
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3b03      	subs	r3, #3
 80021ea:	e000      	b.n	80021ee <NVIC_EncodePriority+0x32>
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	f04f 32ff 	mov.w	r2, #4294967295
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	401a      	ands	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002204:	f04f 31ff 	mov.w	r1, #4294967295
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	43d9      	mvns	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002214:	4313      	orrs	r3, r2
         );
}
 8002216:	4618      	mov	r0, r3
 8002218:	3724      	adds	r7, #36	; 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002234:	d301      	bcc.n	800223a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002236:	2301      	movs	r3, #1
 8002238:	e00f      	b.n	800225a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <SysTick_Config+0x40>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002242:	210f      	movs	r1, #15
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f7ff ff8e 	bl	8002168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <SysTick_Config+0x40>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002252:	4b04      	ldr	r3, [pc, #16]	; (8002264 <SysTick_Config+0x40>)
 8002254:	2207      	movs	r2, #7
 8002256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	e000e010 	.word	0xe000e010

08002268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ff29 	bl	80020c8 <__NVIC_SetPriorityGrouping>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002290:	f7ff ff3e 	bl	8002110 <__NVIC_GetPriorityGrouping>
 8002294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	6978      	ldr	r0, [r7, #20]
 800229c:	f7ff ff8e 	bl	80021bc <NVIC_EncodePriority>
 80022a0:	4602      	mov	r2, r0
 80022a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff5d 	bl	8002168 <__NVIC_SetPriority>
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff31 	bl	800212c <__NVIC_EnableIRQ>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffa2 	bl	8002224 <SysTick_Config>
 80022e0:	4603      	mov	r3, r0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff fad4 	bl	80018a4 <HAL_GetTick>
 80022fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d008      	beq.n	800231c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2280      	movs	r2, #128	; 0x80
 800230e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e052      	b.n	80023c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0216 	bic.w	r2, r2, #22
 800232a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800233a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d103      	bne.n	800234c <HAL_DMA_Abort+0x62>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0208 	bic.w	r2, r2, #8
 800235a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800236c:	e013      	b.n	8002396 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800236e:	f7ff fa99 	bl	80018a4 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b05      	cmp	r3, #5
 800237a:	d90c      	bls.n	8002396 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2203      	movs	r2, #3
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e015      	b.n	80023c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e4      	bne.n	800236e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	223f      	movs	r2, #63	; 0x3f
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d004      	beq.n	80023e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2280      	movs	r2, #128	; 0x80
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e00c      	b.n	8002402 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2205      	movs	r2, #5
 80023ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	e159      	b.n	80026e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	429a      	cmp	r2, r3
 8002446:	f040 8148 	bne.w	80026da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d005      	beq.n	8002462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245e:	2b02      	cmp	r3, #2
 8002460:	d130      	bne.n	80024c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	2203      	movs	r2, #3
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 0201 	and.w	r2, r3, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d017      	beq.n	8002500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d123      	bne.n	8002554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	08da      	lsrs	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3208      	adds	r2, #8
 8002514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	08da      	lsrs	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3208      	adds	r2, #8
 800254e:	69b9      	ldr	r1, [r7, #24]
 8002550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0203 	and.w	r2, r3, #3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a2 	beq.w	80026da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b57      	ldr	r3, [pc, #348]	; (80026f8 <HAL_GPIO_Init+0x2e8>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	4a56      	ldr	r2, [pc, #344]	; (80026f8 <HAL_GPIO_Init+0x2e8>)
 80025a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a4:	6453      	str	r3, [r2, #68]	; 0x44
 80025a6:	4b54      	ldr	r3, [pc, #336]	; (80026f8 <HAL_GPIO_Init+0x2e8>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b2:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_GPIO_Init+0x2ec>)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	3302      	adds	r3, #2
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a49      	ldr	r2, [pc, #292]	; (8002700 <HAL_GPIO_Init+0x2f0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d019      	beq.n	8002612 <HAL_GPIO_Init+0x202>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a48      	ldr	r2, [pc, #288]	; (8002704 <HAL_GPIO_Init+0x2f4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_GPIO_Init+0x1fe>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a47      	ldr	r2, [pc, #284]	; (8002708 <HAL_GPIO_Init+0x2f8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00d      	beq.n	800260a <HAL_GPIO_Init+0x1fa>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a46      	ldr	r2, [pc, #280]	; (800270c <HAL_GPIO_Init+0x2fc>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d007      	beq.n	8002606 <HAL_GPIO_Init+0x1f6>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a45      	ldr	r2, [pc, #276]	; (8002710 <HAL_GPIO_Init+0x300>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_GPIO_Init+0x1f2>
 80025fe:	2304      	movs	r3, #4
 8002600:	e008      	b.n	8002614 <HAL_GPIO_Init+0x204>
 8002602:	2307      	movs	r3, #7
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x204>
 8002606:	2303      	movs	r3, #3
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x204>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x204>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x204>
 8002612:	2300      	movs	r3, #0
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f002 0203 	and.w	r2, r2, #3
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	4093      	lsls	r3, r2
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002624:	4935      	ldr	r1, [pc, #212]	; (80026fc <HAL_GPIO_Init+0x2ec>)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002632:	4b38      	ldr	r3, [pc, #224]	; (8002714 <HAL_GPIO_Init+0x304>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002656:	4a2f      	ldr	r2, [pc, #188]	; (8002714 <HAL_GPIO_Init+0x304>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800265c:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_GPIO_Init+0x304>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002680:	4a24      	ldr	r2, [pc, #144]	; (8002714 <HAL_GPIO_Init+0x304>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002686:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_GPIO_Init+0x304>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026aa:	4a1a      	ldr	r2, [pc, #104]	; (8002714 <HAL_GPIO_Init+0x304>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_GPIO_Init+0x304>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d4:	4a0f      	ldr	r2, [pc, #60]	; (8002714 <HAL_GPIO_Init+0x304>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	f67f aea2 	bls.w	800242c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40013800 	.word	0x40013800
 8002700:	40020000 	.word	0x40020000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020800 	.word	0x40020800
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40021000 	.word	0x40021000
 8002714:	40013c00 	.word	0x40013c00

08002718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	e001      	b.n	800273a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
 8002754:	4613      	mov	r3, r2
 8002756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002764:	e003      	b.n	800276e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	041a      	lsls	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	619a      	str	r2, [r3, #24]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e267      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d075      	beq.n	8002886 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800279a:	4b88      	ldr	r3, [pc, #544]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d00c      	beq.n	80027c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a6:	4b85      	ldr	r3, [pc, #532]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d112      	bne.n	80027d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b2:	4b82      	ldr	r3, [pc, #520]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027be:	d10b      	bne.n	80027d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	4b7e      	ldr	r3, [pc, #504]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d05b      	beq.n	8002884 <HAL_RCC_OscConfig+0x108>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d157      	bne.n	8002884 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e242      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e0:	d106      	bne.n	80027f0 <HAL_RCC_OscConfig+0x74>
 80027e2:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a75      	ldr	r2, [pc, #468]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80027e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	e01d      	b.n	800282c <HAL_RCC_OscConfig+0xb0>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x98>
 80027fa:	4b70      	ldr	r3, [pc, #448]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6f      	ldr	r2, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b6d      	ldr	r3, [pc, #436]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a6c      	ldr	r2, [pc, #432]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 800280c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e00b      	b.n	800282c <HAL_RCC_OscConfig+0xb0>
 8002814:	4b69      	ldr	r3, [pc, #420]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a68      	ldr	r2, [pc, #416]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 800281a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4b66      	ldr	r3, [pc, #408]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a65      	ldr	r2, [pc, #404]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d013      	beq.n	800285c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7ff f836 	bl	80018a4 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800283c:	f7ff f832 	bl	80018a4 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e207      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	4b5b      	ldr	r3, [pc, #364]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0xc0>
 800285a:	e014      	b.n	8002886 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7ff f822 	bl	80018a4 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002864:	f7ff f81e 	bl	80018a4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e1f3      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002876:	4b51      	ldr	r3, [pc, #324]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0xe8>
 8002882:	e000      	b.n	8002886 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d063      	beq.n	800295a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002892:	4b4a      	ldr	r3, [pc, #296]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d11c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028aa:	4b44      	ldr	r3, [pc, #272]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d116      	bne.n	80028e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <HAL_RCC_OscConfig+0x152>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d001      	beq.n	80028ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e1c7      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ce:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4937      	ldr	r1, [pc, #220]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	e03a      	b.n	800295a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d020      	beq.n	800292e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ec:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7fe ffd7 	bl	80018a4 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fa:	f7fe ffd3 	bl	80018a4 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e1a8      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002918:	4b28      	ldr	r3, [pc, #160]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4925      	ldr	r1, [pc, #148]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
 800292c:	e015      	b.n	800295a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe ffb6 	bl	80018a4 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293c:	f7fe ffb2 	bl	80018a4 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e187      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294e:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d036      	beq.n	80029d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d016      	beq.n	800299c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_RCC_OscConfig+0x248>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7fe ff96 	bl	80018a4 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800297c:	f7fe ff92 	bl	80018a4 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e167      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x200>
 800299a:	e01b      	b.n	80029d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_OscConfig+0x248>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a2:	f7fe ff7f 	bl	80018a4 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	e00e      	b.n	80029c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029aa:	f7fe ff7b 	bl	80018a4 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d907      	bls.n	80029c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e150      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	42470000 	.word	0x42470000
 80029c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c8:	4b88      	ldr	r3, [pc, #544]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 80029ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ea      	bne.n	80029aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 8097 	beq.w	8002b10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e6:	4b81      	ldr	r3, [pc, #516]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10f      	bne.n	8002a12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	4b7d      	ldr	r3, [pc, #500]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a7c      	ldr	r2, [pc, #496]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 80029fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b7a      	ldr	r3, [pc, #488]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a12:	4b77      	ldr	r3, [pc, #476]	; (8002bf0 <HAL_RCC_OscConfig+0x474>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d118      	bne.n	8002a50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1e:	4b74      	ldr	r3, [pc, #464]	; (8002bf0 <HAL_RCC_OscConfig+0x474>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a73      	ldr	r2, [pc, #460]	; (8002bf0 <HAL_RCC_OscConfig+0x474>)
 8002a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe ff3b 	bl	80018a4 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a32:	f7fe ff37 	bl	80018a4 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e10c      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a44:	4b6a      	ldr	r3, [pc, #424]	; (8002bf0 <HAL_RCC_OscConfig+0x474>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d106      	bne.n	8002a66 <HAL_RCC_OscConfig+0x2ea>
 8002a58:	4b64      	ldr	r3, [pc, #400]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	4a63      	ldr	r2, [pc, #396]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6713      	str	r3, [r2, #112]	; 0x70
 8002a64:	e01c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x324>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x30c>
 8002a6e:	4b5f      	ldr	r3, [pc, #380]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	4a5e      	ldr	r2, [pc, #376]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a74:	f043 0304 	orr.w	r3, r3, #4
 8002a78:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7a:	4b5c      	ldr	r3, [pc, #368]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	4a5b      	ldr	r2, [pc, #364]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6713      	str	r3, [r2, #112]	; 0x70
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x324>
 8002a88:	4b58      	ldr	r3, [pc, #352]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	4a57      	ldr	r2, [pc, #348]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	6713      	str	r3, [r2, #112]	; 0x70
 8002a94:	4b55      	ldr	r3, [pc, #340]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a54      	ldr	r2, [pc, #336]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a9a:	f023 0304 	bic.w	r3, r3, #4
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d015      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7fe fefc 	bl	80018a4 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7fe fef8 	bl	80018a4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e0cb      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac6:	4b49      	ldr	r3, [pc, #292]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0ee      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x334>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fee6 	bl	80018a4 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7fe fee2 	bl	80018a4 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0b5      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af2:	4b3e      	ldr	r3, [pc, #248]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ee      	bne.n	8002adc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002afe:	7dfb      	ldrb	r3, [r7, #23]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d105      	bne.n	8002b10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b04:	4b39      	ldr	r3, [pc, #228]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	4a38      	ldr	r2, [pc, #224]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80a1 	beq.w	8002c5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b1a:	4b34      	ldr	r3, [pc, #208]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d05c      	beq.n	8002be0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d141      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2e:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <HAL_RCC_OscConfig+0x478>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe feb6 	bl	80018a4 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3c:	f7fe feb2 	bl	80018a4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e087      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4e:	4b27      	ldr	r3, [pc, #156]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69da      	ldr	r2, [r3, #28]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	019b      	lsls	r3, r3, #6
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	085b      	lsrs	r3, r3, #1
 8002b72:	3b01      	subs	r3, #1
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	061b      	lsls	r3, r3, #24
 8002b7e:	491b      	ldr	r1, [pc, #108]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b84:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <HAL_RCC_OscConfig+0x478>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fe8b 	bl	80018a4 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b92:	f7fe fe87 	bl	80018a4 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e05c      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x416>
 8002bb0:	e054      	b.n	8002c5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <HAL_RCC_OscConfig+0x478>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fe74 	bl	80018a4 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe fe70 	bl	80018a4 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e045      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x444>
 8002bde:	e03d      	b.n	8002c5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d107      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e038      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40007000 	.word	0x40007000
 8002bf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_RCC_OscConfig+0x4ec>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d028      	beq.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d121      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d11a      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c28:	4013      	ands	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d111      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	085b      	lsrs	r3, r3, #1
 8002c40:	3b01      	subs	r3, #1
 8002c42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d107      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800

08002c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0cc      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d90c      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b65      	ldr	r3, [pc, #404]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0b8      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc0:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce4:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	494d      	ldr	r1, [pc, #308]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d044      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d119      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e07f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d003      	beq.n	8002d2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e06f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e067      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4a:	4b37      	ldr	r3, [pc, #220]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f023 0203 	bic.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4934      	ldr	r1, [pc, #208]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d5c:	f7fe fda2 	bl	80018a4 <HAL_GetTick>
 8002d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d64:	f7fe fd9e 	bl	80018a4 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e04f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 020c 	and.w	r2, r3, #12
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1eb      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d20c      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e032      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4916      	ldr	r1, [pc, #88]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	490e      	ldr	r1, [pc, #56]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002df2:	f000 f821 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	490a      	ldr	r1, [pc, #40]	; (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002e04:	5ccb      	ldrb	r3, [r1, r3]
 8002e06:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1c8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fd02 	bl	800181c <HAL_InitTick>

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023c00 	.word	0x40023c00
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	080058f8 	.word	0x080058f8
 8002e30:	20000014 	.word	0x20000014
 8002e34:	20000018 	.word	0x20000018

08002e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e3c:	b094      	sub	sp, #80	; 0x50
 8002e3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	647b      	str	r3, [r7, #68]	; 0x44
 8002e44:	2300      	movs	r3, #0
 8002e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e48:	2300      	movs	r3, #0
 8002e4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e50:	4b79      	ldr	r3, [pc, #484]	; (8003038 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d00d      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x40>
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	f200 80e1 	bhi.w	8003024 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x34>
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d003      	beq.n	8002e72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e6a:	e0db      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e6c:	4b73      	ldr	r3, [pc, #460]	; (800303c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e70:	e0db      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e72:	4b73      	ldr	r3, [pc, #460]	; (8003040 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e76:	e0d8      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e78:	4b6f      	ldr	r3, [pc, #444]	; (8003038 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e82:	4b6d      	ldr	r3, [pc, #436]	; (8003038 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d063      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8e:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	099b      	lsrs	r3, r3, #6
 8002e94:	2200      	movs	r2, #0
 8002e96:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002eaa:	4622      	mov	r2, r4
 8002eac:	462b      	mov	r3, r5
 8002eae:	f04f 0000 	mov.w	r0, #0
 8002eb2:	f04f 0100 	mov.w	r1, #0
 8002eb6:	0159      	lsls	r1, r3, #5
 8002eb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ebc:	0150      	lsls	r0, r2, #5
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	1a51      	subs	r1, r2, r1
 8002ec6:	6139      	str	r1, [r7, #16]
 8002ec8:	4629      	mov	r1, r5
 8002eca:	eb63 0301 	sbc.w	r3, r3, r1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002edc:	4659      	mov	r1, fp
 8002ede:	018b      	lsls	r3, r1, #6
 8002ee0:	4651      	mov	r1, sl
 8002ee2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ee6:	4651      	mov	r1, sl
 8002ee8:	018a      	lsls	r2, r1, #6
 8002eea:	4651      	mov	r1, sl
 8002eec:	ebb2 0801 	subs.w	r8, r2, r1
 8002ef0:	4659      	mov	r1, fp
 8002ef2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f0a:	4690      	mov	r8, r2
 8002f0c:	4699      	mov	r9, r3
 8002f0e:	4623      	mov	r3, r4
 8002f10:	eb18 0303 	adds.w	r3, r8, r3
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	462b      	mov	r3, r5
 8002f18:	eb49 0303 	adc.w	r3, r9, r3
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f2a:	4629      	mov	r1, r5
 8002f2c:	024b      	lsls	r3, r1, #9
 8002f2e:	4621      	mov	r1, r4
 8002f30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f34:	4621      	mov	r1, r4
 8002f36:	024a      	lsls	r2, r1, #9
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f3e:	2200      	movs	r2, #0
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f48:	f7fd f9a2 	bl	8000290 <__aeabi_uldivmod>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4613      	mov	r3, r2
 8002f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f54:	e058      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f56:	4b38      	ldr	r3, [pc, #224]	; (8003038 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	099b      	lsrs	r3, r3, #6
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	4611      	mov	r1, r2
 8002f62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f66:	623b      	str	r3, [r7, #32]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f70:	4642      	mov	r2, r8
 8002f72:	464b      	mov	r3, r9
 8002f74:	f04f 0000 	mov.w	r0, #0
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	0159      	lsls	r1, r3, #5
 8002f7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f82:	0150      	lsls	r0, r2, #5
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4641      	mov	r1, r8
 8002f8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f8e:	4649      	mov	r1, r9
 8002f90:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fa8:	ebb2 040a 	subs.w	r4, r2, sl
 8002fac:	eb63 050b 	sbc.w	r5, r3, fp
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	00eb      	lsls	r3, r5, #3
 8002fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fbe:	00e2      	lsls	r2, r4, #3
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	461d      	mov	r5, r3
 8002fc4:	4643      	mov	r3, r8
 8002fc6:	18e3      	adds	r3, r4, r3
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	464b      	mov	r3, r9
 8002fcc:	eb45 0303 	adc.w	r3, r5, r3
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fde:	4629      	mov	r1, r5
 8002fe0:	028b      	lsls	r3, r1, #10
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe8:	4621      	mov	r1, r4
 8002fea:	028a      	lsls	r2, r1, #10
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	61fa      	str	r2, [r7, #28]
 8002ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ffc:	f7fd f948 	bl	8000290 <__aeabi_uldivmod>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4613      	mov	r3, r2
 8003006:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_GetSysClockFreq+0x200>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	3301      	adds	r3, #1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003018:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800301a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003022:	e002      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_RCC_GetSysClockFreq+0x204>)
 8003026:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800302a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800302c:	4618      	mov	r0, r3
 800302e:	3750      	adds	r7, #80	; 0x50
 8003030:	46bd      	mov	sp, r7
 8003032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	00f42400 	.word	0x00f42400
 8003040:	007a1200 	.word	0x007a1200

08003044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <HAL_RCC_GetHCLKFreq+0x14>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20000014 	.word	0x20000014

0800305c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003060:	f7ff fff0 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	0a9b      	lsrs	r3, r3, #10
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	4903      	ldr	r1, [pc, #12]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003078:	4618      	mov	r0, r3
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40023800 	.word	0x40023800
 8003080:	08005908 	.word	0x08005908

08003084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003088:	f7ff ffdc 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 800308c:	4602      	mov	r2, r0
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	0b5b      	lsrs	r3, r3, #13
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	4903      	ldr	r1, [pc, #12]	; (80030a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800309a:	5ccb      	ldrb	r3, [r1, r3]
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40023800 	.word	0x40023800
 80030a8:	08005908 	.word	0x08005908

080030ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e041      	b.n	8003142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fe f9c6 	bl	8001464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f000 fb1c 	bl	8003728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d001      	beq.n	8003164 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e03c      	b.n	80031de <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1e      	ldr	r2, [pc, #120]	; (80031ec <HAL_TIM_Base_Start+0xa0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d018      	beq.n	80031a8 <HAL_TIM_Base_Start+0x5c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317e:	d013      	beq.n	80031a8 <HAL_TIM_Base_Start+0x5c>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1a      	ldr	r2, [pc, #104]	; (80031f0 <HAL_TIM_Base_Start+0xa4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00e      	beq.n	80031a8 <HAL_TIM_Base_Start+0x5c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <HAL_TIM_Base_Start+0xa8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d009      	beq.n	80031a8 <HAL_TIM_Base_Start+0x5c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <HAL_TIM_Base_Start+0xac>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d004      	beq.n	80031a8 <HAL_TIM_Base_Start+0x5c>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a16      	ldr	r2, [pc, #88]	; (80031fc <HAL_TIM_Base_Start+0xb0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d111      	bne.n	80031cc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d010      	beq.n	80031dc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ca:	e007      	b.n	80031dc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40000400 	.word	0x40000400
 80031f4:	40000800 	.word	0x40000800
 80031f8:	40000c00 	.word	0x40000c00
 80031fc:	40014000 	.word	0x40014000

08003200 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e041      	b.n	8003296 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f839 	bl	800329e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f000 fa72 	bl	8003728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <HAL_TIM_PWM_Start+0x24>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e022      	b.n	800331e <HAL_TIM_PWM_Start+0x6a>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d109      	bne.n	80032f2 <HAL_TIM_PWM_Start+0x3e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	bf14      	ite	ne
 80032ea:	2301      	movne	r3, #1
 80032ec:	2300      	moveq	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	e015      	b.n	800331e <HAL_TIM_PWM_Start+0x6a>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d109      	bne.n	800330c <HAL_TIM_PWM_Start+0x58>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	bf14      	ite	ne
 8003304:	2301      	movne	r3, #1
 8003306:	2300      	moveq	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e008      	b.n	800331e <HAL_TIM_PWM_Start+0x6a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	bf14      	ite	ne
 8003318:	2301      	movne	r3, #1
 800331a:	2300      	moveq	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e068      	b.n	80033f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d104      	bne.n	8003336 <HAL_TIM_PWM_Start+0x82>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003334:	e013      	b.n	800335e <HAL_TIM_PWM_Start+0xaa>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b04      	cmp	r3, #4
 800333a:	d104      	bne.n	8003346 <HAL_TIM_PWM_Start+0x92>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003344:	e00b      	b.n	800335e <HAL_TIM_PWM_Start+0xaa>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d104      	bne.n	8003356 <HAL_TIM_PWM_Start+0xa2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003354:	e003      	b.n	800335e <HAL_TIM_PWM_Start+0xaa>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2201      	movs	r2, #1
 8003364:	6839      	ldr	r1, [r7, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fc84 	bl	8003c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a23      	ldr	r2, [pc, #140]	; (8003400 <HAL_TIM_PWM_Start+0x14c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d107      	bne.n	8003386 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003384:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <HAL_TIM_PWM_Start+0x14c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d018      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x10e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003398:	d013      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x10e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a19      	ldr	r2, [pc, #100]	; (8003404 <HAL_TIM_PWM_Start+0x150>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x10e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a17      	ldr	r2, [pc, #92]	; (8003408 <HAL_TIM_PWM_Start+0x154>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x10e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a16      	ldr	r2, [pc, #88]	; (800340c <HAL_TIM_PWM_Start+0x158>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x10e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a14      	ldr	r2, [pc, #80]	; (8003410 <HAL_TIM_PWM_Start+0x15c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d111      	bne.n	80033e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b06      	cmp	r3, #6
 80033d2:	d010      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	e007      	b.n	80033f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40010000 	.word	0x40010000
 8003404:	40000400 	.word	0x40000400
 8003408:	40000800 	.word	0x40000800
 800340c:	40000c00 	.word	0x40000c00
 8003410:	40014000 	.word	0x40014000

08003414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800342e:	2302      	movs	r3, #2
 8003430:	e0ae      	b.n	8003590 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b0c      	cmp	r3, #12
 800343e:	f200 809f 	bhi.w	8003580 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003442:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	0800347d 	.word	0x0800347d
 800344c:	08003581 	.word	0x08003581
 8003450:	08003581 	.word	0x08003581
 8003454:	08003581 	.word	0x08003581
 8003458:	080034bd 	.word	0x080034bd
 800345c:	08003581 	.word	0x08003581
 8003460:	08003581 	.word	0x08003581
 8003464:	08003581 	.word	0x08003581
 8003468:	080034ff 	.word	0x080034ff
 800346c:	08003581 	.word	0x08003581
 8003470:	08003581 	.word	0x08003581
 8003474:	08003581 	.word	0x08003581
 8003478:	0800353f 	.word	0x0800353f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f9d0 	bl	8003828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0208 	orr.w	r2, r2, #8
 8003496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0204 	bic.w	r2, r2, #4
 80034a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6999      	ldr	r1, [r3, #24]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	619a      	str	r2, [r3, #24]
      break;
 80034ba:	e064      	b.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fa16 	bl	80038f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6999      	ldr	r1, [r3, #24]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	021a      	lsls	r2, r3, #8
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	619a      	str	r2, [r3, #24]
      break;
 80034fc:	e043      	b.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fa61 	bl	80039cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0208 	orr.w	r2, r2, #8
 8003518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0204 	bic.w	r2, r2, #4
 8003528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69d9      	ldr	r1, [r3, #28]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	61da      	str	r2, [r3, #28]
      break;
 800353c:	e023      	b.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 faab 	bl	8003aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69d9      	ldr	r1, [r3, #28]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	021a      	lsls	r2, r3, #8
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	61da      	str	r2, [r3, #28]
      break;
 800357e:	e002      	b.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
      break;
 8003584:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800358e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_TIM_ConfigClockSource+0x1c>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e0b4      	b.n	800371e <HAL_TIM_ConfigClockSource+0x186>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ec:	d03e      	beq.n	800366c <HAL_TIM_ConfigClockSource+0xd4>
 80035ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f2:	f200 8087 	bhi.w	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fa:	f000 8086 	beq.w	800370a <HAL_TIM_ConfigClockSource+0x172>
 80035fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003602:	d87f      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 8003604:	2b70      	cmp	r3, #112	; 0x70
 8003606:	d01a      	beq.n	800363e <HAL_TIM_ConfigClockSource+0xa6>
 8003608:	2b70      	cmp	r3, #112	; 0x70
 800360a:	d87b      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 800360c:	2b60      	cmp	r3, #96	; 0x60
 800360e:	d050      	beq.n	80036b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003610:	2b60      	cmp	r3, #96	; 0x60
 8003612:	d877      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 8003614:	2b50      	cmp	r3, #80	; 0x50
 8003616:	d03c      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0xfa>
 8003618:	2b50      	cmp	r3, #80	; 0x50
 800361a:	d873      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 800361c:	2b40      	cmp	r3, #64	; 0x40
 800361e:	d058      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003620:	2b40      	cmp	r3, #64	; 0x40
 8003622:	d86f      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 8003624:	2b30      	cmp	r3, #48	; 0x30
 8003626:	d064      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003628:	2b30      	cmp	r3, #48	; 0x30
 800362a:	d86b      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 800362c:	2b20      	cmp	r3, #32
 800362e:	d060      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003630:	2b20      	cmp	r3, #32
 8003632:	d867      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d05c      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003638:	2b10      	cmp	r3, #16
 800363a:	d05a      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x15a>
 800363c:	e062      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6899      	ldr	r1, [r3, #8]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f000 faf1 	bl	8003c34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003660:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	609a      	str	r2, [r3, #8]
      break;
 800366a:	e04f      	b.n	800370c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6899      	ldr	r1, [r3, #8]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f000 fada 	bl	8003c34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800368e:	609a      	str	r2, [r3, #8]
      break;
 8003690:	e03c      	b.n	800370c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	461a      	mov	r2, r3
 80036a0:	f000 fa4e 	bl	8003b40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2150      	movs	r1, #80	; 0x50
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 faa7 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 80036b0:	e02c      	b.n	800370c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6859      	ldr	r1, [r3, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	461a      	mov	r2, r3
 80036c0:	f000 fa6d 	bl	8003b9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2160      	movs	r1, #96	; 0x60
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fa97 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 80036d0:	e01c      	b.n	800370c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	461a      	mov	r2, r3
 80036e0:	f000 fa2e 	bl	8003b40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2140      	movs	r1, #64	; 0x40
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fa87 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 80036f0:	e00c      	b.n	800370c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f000 fa7e 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 8003702:	e003      	b.n	800370c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
      break;
 8003708:	e000      	b.n	800370c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800370a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800371c:	7bfb      	ldrb	r3, [r7, #15]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a34      	ldr	r2, [pc, #208]	; (800380c <TIM_Base_SetConfig+0xe4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00f      	beq.n	8003760 <TIM_Base_SetConfig+0x38>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003746:	d00b      	beq.n	8003760 <TIM_Base_SetConfig+0x38>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a31      	ldr	r2, [pc, #196]	; (8003810 <TIM_Base_SetConfig+0xe8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d007      	beq.n	8003760 <TIM_Base_SetConfig+0x38>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a30      	ldr	r2, [pc, #192]	; (8003814 <TIM_Base_SetConfig+0xec>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0x38>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <TIM_Base_SetConfig+0xf0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d108      	bne.n	8003772 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a25      	ldr	r2, [pc, #148]	; (800380c <TIM_Base_SetConfig+0xe4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01b      	beq.n	80037b2 <TIM_Base_SetConfig+0x8a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003780:	d017      	beq.n	80037b2 <TIM_Base_SetConfig+0x8a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a22      	ldr	r2, [pc, #136]	; (8003810 <TIM_Base_SetConfig+0xe8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d013      	beq.n	80037b2 <TIM_Base_SetConfig+0x8a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a21      	ldr	r2, [pc, #132]	; (8003814 <TIM_Base_SetConfig+0xec>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00f      	beq.n	80037b2 <TIM_Base_SetConfig+0x8a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a20      	ldr	r2, [pc, #128]	; (8003818 <TIM_Base_SetConfig+0xf0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00b      	beq.n	80037b2 <TIM_Base_SetConfig+0x8a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a1f      	ldr	r2, [pc, #124]	; (800381c <TIM_Base_SetConfig+0xf4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <TIM_Base_SetConfig+0x8a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <TIM_Base_SetConfig+0xf8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_Base_SetConfig+0x8a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <TIM_Base_SetConfig+0xfc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d108      	bne.n	80037c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a08      	ldr	r2, [pc, #32]	; (800380c <TIM_Base_SetConfig+0xe4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d103      	bne.n	80037f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	615a      	str	r2, [r3, #20]
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40010000 	.word	0x40010000
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800

08003828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f023 0201 	bic.w	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f023 0302 	bic.w	r3, r3, #2
 8003870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <TIM_OC1_SetConfig+0xc8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d10c      	bne.n	800389e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0308 	bic.w	r3, r3, #8
 800388a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <TIM_OC1_SetConfig+0xc8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d111      	bne.n	80038ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	621a      	str	r2, [r3, #32]
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40010000 	.word	0x40010000

080038f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0210 	bic.w	r2, r3, #16
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f023 0320 	bic.w	r3, r3, #32
 800393e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a1e      	ldr	r2, [pc, #120]	; (80039c8 <TIM_OC2_SetConfig+0xd4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d10d      	bne.n	8003970 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800396e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <TIM_OC2_SetConfig+0xd4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d113      	bne.n	80039a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800397e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003986:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000

080039cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0303 	bic.w	r3, r3, #3
 8003a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	; (8003a9c <TIM_OC3_SetConfig+0xd0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10d      	bne.n	8003a46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <TIM_OC3_SetConfig+0xd0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d113      	bne.n	8003a76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	621a      	str	r2, [r3, #32]
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40010000 	.word	0x40010000

08003aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	031b      	lsls	r3, r3, #12
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <TIM_OC4_SetConfig+0x9c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d109      	bne.n	8003b14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	019b      	lsls	r3, r3, #6
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	621a      	str	r2, [r3, #32]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40010000 	.word	0x40010000

08003b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f023 0201 	bic.w	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f023 030a 	bic.w	r3, r3, #10
 8003b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b087      	sub	sp, #28
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f023 0210 	bic.w	r2, r3, #16
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	031b      	lsls	r3, r3, #12
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f043 0307 	orr.w	r3, r3, #7
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	021a      	lsls	r2, r3, #8
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	2201      	movs	r2, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1a      	ldr	r2, [r3, #32]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	401a      	ands	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1a      	ldr	r2, [r3, #32]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	621a      	str	r2, [r3, #32]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e050      	b.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d018      	beq.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d24:	d013      	beq.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a18      	ldr	r2, [pc, #96]	; (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00e      	beq.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a16      	ldr	r2, [pc, #88]	; (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d009      	beq.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a15      	ldr	r2, [pc, #84]	; (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a13      	ldr	r2, [pc, #76]	; (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10c      	bne.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40010000 	.word	0x40010000
 8003d8c:	40000400 	.word	0x40000400
 8003d90:	40000800 	.word	0x40000800
 8003d94:	40000c00 	.word	0x40000c00
 8003d98:	40014000 	.word	0x40014000

08003d9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e03f      	b.n	8003e2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd fc24 	bl	8001610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2224      	movs	r2, #36	; 0x24
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fddf 	bl	80049a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003df4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b08a      	sub	sp, #40	; 0x28
 8003e3a:	af02      	add	r7, sp, #8
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d17c      	bne.n	8003f50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_UART_Transmit+0x2c>
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e075      	b.n	8003f52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_UART_Transmit+0x3e>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e06e      	b.n	8003f52 <HAL_UART_Transmit+0x11c>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2221      	movs	r2, #33	; 0x21
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e8a:	f7fd fd0b 	bl	80018a4 <HAL_GetTick>
 8003e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	88fa      	ldrh	r2, [r7, #6]
 8003e94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	88fa      	ldrh	r2, [r7, #6]
 8003e9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea4:	d108      	bne.n	8003eb8 <HAL_UART_Transmit+0x82>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d104      	bne.n	8003eb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	e003      	b.n	8003ec0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ec8:	e02a      	b.n	8003f20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2180      	movs	r1, #128	; 0x80
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fb1f 	bl	8004518 <UART_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e036      	b.n	8003f52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	3302      	adds	r3, #2
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	e007      	b.n	8003f12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1cf      	bne.n	8003eca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2200      	movs	r2, #0
 8003f32:	2140      	movs	r1, #64	; 0x40
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 faef 	bl	8004518 <UART_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e006      	b.n	8003f52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e000      	b.n	8003f52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f50:	2302      	movs	r3, #2
  }
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	4613      	mov	r3, r2
 8003f66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	d11d      	bne.n	8003fb0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_UART_Receive_IT+0x26>
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e016      	b.n	8003fb2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_UART_Receive_IT+0x38>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e00f      	b.n	8003fb2 <HAL_UART_Receive_IT+0x58>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fa0:	88fb      	ldrh	r3, [r7, #6]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fb24 	bl	80045f4 <UART_Start_Receive_IT>
 8003fac:	4603      	mov	r3, r0
 8003fae:	e000      	b.n	8003fb2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b0ba      	sub	sp, #232	; 0xe8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ffa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10f      	bne.n	8004022 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_UART_IRQHandler+0x66>
 800400e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fc07 	bl	800482e <UART_Receive_IT>
      return;
 8004020:	e256      	b.n	80044d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004022:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80de 	beq.w	80041e8 <HAL_UART_IRQHandler+0x22c>
 800402c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800403c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80d1 	beq.w	80041e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_UART_IRQHandler+0xae>
 8004052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f043 0201 	orr.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <HAL_UART_IRQHandler+0xd2>
 8004076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f043 0202 	orr.w	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <HAL_UART_IRQHandler+0xf6>
 800409a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f043 0204 	orr.w	r2, r3, #4
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d011      	beq.n	80040e2 <HAL_UART_IRQHandler+0x126>
 80040be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f043 0208 	orr.w	r2, r3, #8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 81ed 	beq.w	80044c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_UART_IRQHandler+0x14e>
 80040f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fb92 	bl	800482e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d103      	bne.n	8004136 <HAL_UART_IRQHandler+0x17a>
 800412e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d04f      	beq.n	80041d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fa9a 	bl	8004670 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004146:	2b40      	cmp	r3, #64	; 0x40
 8004148:	d141      	bne.n	80041ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3314      	adds	r3, #20
 8004150:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004160:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3314      	adds	r3, #20
 8004172:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004176:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800417a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004182:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800418e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1d9      	bne.n	800414a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	2b00      	cmp	r3, #0
 800419c:	d013      	beq.n	80041c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	4a7d      	ldr	r2, [pc, #500]	; (8004398 <HAL_UART_IRQHandler+0x3dc>)
 80041a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe f90d 	bl	80023ca <HAL_DMA_Abort_IT>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d016      	beq.n	80041e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041c0:	4610      	mov	r0, r2
 80041c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c4:	e00e      	b.n	80041e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f990 	bl	80044ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041cc:	e00a      	b.n	80041e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f98c 	bl	80044ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d4:	e006      	b.n	80041e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f988 	bl	80044ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041e2:	e170      	b.n	80044c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	bf00      	nop
    return;
 80041e6:	e16e      	b.n	80044c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	f040 814a 	bne.w	8004486 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f6:	f003 0310 	and.w	r3, r3, #16
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8143 	beq.w	8004486 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 813c 	beq.w	8004486 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	f040 80b4 	bne.w	800439c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004240:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8140 	beq.w	80044ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800424e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004252:	429a      	cmp	r2, r3
 8004254:	f080 8139 	bcs.w	80044ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800425e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800426a:	f000 8088 	beq.w	800437e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800428c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800429a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800429e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1d9      	bne.n	800426e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3314      	adds	r3, #20
 80042c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3314      	adds	r3, #20
 80042da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e1      	bne.n	80042ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3314      	adds	r3, #20
 80042fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800430c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3314      	adds	r3, #20
 8004316:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800431a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800431c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004320:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e3      	bne.n	80042f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	330c      	adds	r3, #12
 8004342:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800434c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800434e:	f023 0310 	bic.w	r3, r3, #16
 8004352:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004360:	65ba      	str	r2, [r7, #88]	; 0x58
 8004362:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004366:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004368:	e841 2300 	strex	r3, r2, [r1]
 800436c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800436e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e3      	bne.n	800433c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	4618      	mov	r0, r3
 800437a:	f7fd ffb6 	bl	80022ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004386:	b29b      	uxth	r3, r3
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	b29b      	uxth	r3, r3
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8b6 	bl	8004500 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004394:	e099      	b.n	80044ca <HAL_UART_IRQHandler+0x50e>
 8004396:	bf00      	nop
 8004398:	08004737 	.word	0x08004737
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 808b 	beq.w	80044ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80043b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8086 	beq.w	80044ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	330c      	adds	r3, #12
 80043c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80043e6:	647a      	str	r2, [r7, #68]	; 0x44
 80043e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e3      	bne.n	80043c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3314      	adds	r3, #20
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	623b      	str	r3, [r7, #32]
   return(result);
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	f023 0301 	bic.w	r3, r3, #1
 8004410:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3314      	adds	r3, #20
 800441a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800441e:	633a      	str	r2, [r7, #48]	; 0x30
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e3      	bne.n	80043fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0310 	bic.w	r3, r3, #16
 8004456:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	330c      	adds	r3, #12
 8004460:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004464:	61fa      	str	r2, [r7, #28]
 8004466:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	69b9      	ldr	r1, [r7, #24]
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	617b      	str	r3, [r7, #20]
   return(result);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e3      	bne.n	8004440 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800447c:	4619      	mov	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f83e 	bl	8004500 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004484:	e023      	b.n	80044ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_UART_IRQHandler+0x4ea>
 8004492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f95d 	bl	800475e <UART_Transmit_IT>
    return;
 80044a4:	e014      	b.n	80044d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00e      	beq.n	80044d0 <HAL_UART_IRQHandler+0x514>
 80044b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d008      	beq.n	80044d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f99d 	bl	80047fe <UART_EndTransmit_IT>
    return;
 80044c4:	e004      	b.n	80044d0 <HAL_UART_IRQHandler+0x514>
    return;
 80044c6:	bf00      	nop
 80044c8:	e002      	b.n	80044d0 <HAL_UART_IRQHandler+0x514>
      return;
 80044ca:	bf00      	nop
 80044cc:	e000      	b.n	80044d0 <HAL_UART_IRQHandler+0x514>
      return;
 80044ce:	bf00      	nop
  }
}
 80044d0:	37e8      	adds	r7, #232	; 0xe8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop

080044d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b090      	sub	sp, #64	; 0x40
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004528:	e050      	b.n	80045cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d04c      	beq.n	80045cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <UART_WaitOnFlagUntilTimeout+0x30>
 8004538:	f7fd f9b4 	bl	80018a4 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004544:	429a      	cmp	r2, r3
 8004546:	d241      	bcs.n	80045cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	330c      	adds	r3, #12
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800455e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004568:	637a      	str	r2, [r7, #52]	; 0x34
 800456a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800456e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e5      	bne.n	8004548 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3314      	adds	r3, #20
 8004582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	613b      	str	r3, [r7, #16]
   return(result);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	63bb      	str	r3, [r7, #56]	; 0x38
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3314      	adds	r3, #20
 800459a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800459c:	623a      	str	r2, [r7, #32]
 800459e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	69f9      	ldr	r1, [r7, #28]
 80045a2:	6a3a      	ldr	r2, [r7, #32]
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e5      	bne.n	800457c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e00f      	b.n	80045ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4013      	ands	r3, r2
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	429a      	cmp	r2, r3
 80045da:	bf0c      	ite	eq
 80045dc:	2301      	moveq	r3, #1
 80045de:	2300      	movne	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d09f      	beq.n	800452a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3740      	adds	r7, #64	; 0x40
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	4613      	mov	r3, r2
 8004600:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	88fa      	ldrh	r2, [r7, #6]
 800460c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2222      	movs	r2, #34	; 0x22
 800461e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004640:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0220 	orr.w	r2, r2, #32
 8004660:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004670:	b480      	push	{r7}
 8004672:	b095      	sub	sp, #84	; 0x54
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800468e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	330c      	adds	r3, #12
 8004696:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004698:	643a      	str	r2, [r7, #64]	; 0x40
 800469a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800469e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e5      	bne.n	8004678 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3314      	adds	r3, #20
 80046b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3314      	adds	r3, #20
 80046ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e5      	bne.n	80046ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d119      	bne.n	800471c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	330c      	adds	r3, #12
 80046ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	e853 3f00 	ldrex	r3, [r3]
 80046f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f023 0310 	bic.w	r3, r3, #16
 80046fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	330c      	adds	r3, #12
 8004706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004708:	61ba      	str	r2, [r7, #24]
 800470a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	6979      	ldr	r1, [r7, #20]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	613b      	str	r3, [r7, #16]
   return(result);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e5      	bne.n	80046e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
}
 800472a:	bf00      	nop
 800472c:	3754      	adds	r7, #84	; 0x54
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f7ff fecb 	bl	80044ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b21      	cmp	r3, #33	; 0x21
 8004770:	d13e      	bne.n	80047f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477a:	d114      	bne.n	80047a6 <UART_Transmit_IT+0x48>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d110      	bne.n	80047a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004798:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	1c9a      	adds	r2, r3, #2
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	621a      	str	r2, [r3, #32]
 80047a4:	e008      	b.n	80047b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	1c59      	adds	r1, r3, #1
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6211      	str	r1, [r2, #32]
 80047b0:	781a      	ldrb	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	4619      	mov	r1, r3
 80047c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10f      	bne.n	80047ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e000      	b.n	80047f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047f0:	2302      	movs	r3, #2
  }
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004814:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fe5a 	bl	80044d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b08c      	sub	sp, #48	; 0x30
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b22      	cmp	r3, #34	; 0x22
 8004840:	f040 80ab 	bne.w	800499a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484c:	d117      	bne.n	800487e <UART_Receive_IT+0x50>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d113      	bne.n	800487e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004856:	2300      	movs	r3, #0
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486c:	b29a      	uxth	r2, r3
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	1c9a      	adds	r2, r3, #2
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	629a      	str	r2, [r3, #40]	; 0x28
 800487c:	e026      	b.n	80048cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004890:	d007      	beq.n	80048a2 <UART_Receive_IT+0x74>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10a      	bne.n	80048b0 <UART_Receive_IT+0x82>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	e008      	b.n	80048c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4619      	mov	r1, r3
 80048da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d15a      	bne.n	8004996 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0220 	bic.w	r2, r2, #32
 80048ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	2b01      	cmp	r3, #1
 800491e:	d135      	bne.n	800498c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	613b      	str	r3, [r7, #16]
   return(result);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f023 0310 	bic.w	r3, r3, #16
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004946:	623a      	str	r2, [r7, #32]
 8004948:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	69f9      	ldr	r1, [r7, #28]
 800494c:	6a3a      	ldr	r2, [r7, #32]
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	61bb      	str	r3, [r7, #24]
   return(result);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e5      	bne.n	8004926 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b10      	cmp	r3, #16
 8004966:	d10a      	bne.n	800497e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff fdbb 	bl	8004500 <HAL_UARTEx_RxEventCallback>
 800498a:	e002      	b.n	8004992 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7fc f8d3 	bl	8000b38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e002      	b.n	800499c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e000      	b.n	800499c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800499a:	2302      	movs	r3, #2
  }
}
 800499c:	4618      	mov	r0, r3
 800499e:	3730      	adds	r7, #48	; 0x30
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a8:	b0c0      	sub	sp, #256	; 0x100
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	68d9      	ldr	r1, [r3, #12]
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	ea40 0301 	orr.w	r3, r0, r1
 80049cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	431a      	orrs	r2, r3
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049fc:	f021 010c 	bic.w	r1, r1, #12
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1e:	6999      	ldr	r1, [r3, #24]
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	ea40 0301 	orr.w	r3, r0, r1
 8004a2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4b8f      	ldr	r3, [pc, #572]	; (8004c70 <UART_SetConfig+0x2cc>)
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d005      	beq.n	8004a44 <UART_SetConfig+0xa0>
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b8d      	ldr	r3, [pc, #564]	; (8004c74 <UART_SetConfig+0x2d0>)
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d104      	bne.n	8004a4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a44:	f7fe fb1e 	bl	8003084 <HAL_RCC_GetPCLK2Freq>
 8004a48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a4c:	e003      	b.n	8004a56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a4e:	f7fe fb05 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 8004a52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a60:	f040 810c 	bne.w	8004c7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a76:	4622      	mov	r2, r4
 8004a78:	462b      	mov	r3, r5
 8004a7a:	1891      	adds	r1, r2, r2
 8004a7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a7e:	415b      	adcs	r3, r3
 8004a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a86:	4621      	mov	r1, r4
 8004a88:	eb12 0801 	adds.w	r8, r2, r1
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	eb43 0901 	adc.w	r9, r3, r1
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aa6:	4690      	mov	r8, r2
 8004aa8:	4699      	mov	r9, r3
 8004aaa:	4623      	mov	r3, r4
 8004aac:	eb18 0303 	adds.w	r3, r8, r3
 8004ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	eb49 0303 	adc.w	r3, r9, r3
 8004aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ace:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	18db      	adds	r3, r3, r3
 8004ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ad8:	4613      	mov	r3, r2
 8004ada:	eb42 0303 	adc.w	r3, r2, r3
 8004ade:	657b      	str	r3, [r7, #84]	; 0x54
 8004ae0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ae4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ae8:	f7fb fbd2 	bl	8000290 <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4b61      	ldr	r3, [pc, #388]	; (8004c78 <UART_SetConfig+0x2d4>)
 8004af2:	fba3 2302 	umull	r2, r3, r3, r2
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	011c      	lsls	r4, r3, #4
 8004afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	464b      	mov	r3, r9
 8004b10:	1891      	adds	r1, r2, r2
 8004b12:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b14:	415b      	adcs	r3, r3
 8004b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b22:	4649      	mov	r1, r9
 8004b24:	eb43 0b01 	adc.w	fp, r3, r1
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b3c:	4692      	mov	sl, r2
 8004b3e:	469b      	mov	fp, r3
 8004b40:	4643      	mov	r3, r8
 8004b42:	eb1a 0303 	adds.w	r3, sl, r3
 8004b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	18db      	adds	r3, r3, r3
 8004b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b6e:	4613      	mov	r3, r2
 8004b70:	eb42 0303 	adc.w	r3, r2, r3
 8004b74:	647b      	str	r3, [r7, #68]	; 0x44
 8004b76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b7e:	f7fb fb87 	bl	8000290 <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	4b3b      	ldr	r3, [pc, #236]	; (8004c78 <UART_SetConfig+0x2d4>)
 8004b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	2264      	movs	r2, #100	; 0x64
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	1acb      	subs	r3, r1, r3
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b9e:	4b36      	ldr	r3, [pc, #216]	; (8004c78 <UART_SetConfig+0x2d4>)
 8004ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bac:	441c      	add	r4, r3
 8004bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	1891      	adds	r1, r2, r2
 8004bc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bc8:	415b      	adcs	r3, r3
 8004bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	1851      	adds	r1, r2, r1
 8004bd4:	6339      	str	r1, [r7, #48]	; 0x30
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	414b      	adcs	r3, r1
 8004bda:	637b      	str	r3, [r7, #52]	; 0x34
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004be8:	4659      	mov	r1, fp
 8004bea:	00cb      	lsls	r3, r1, #3
 8004bec:	4651      	mov	r1, sl
 8004bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf2:	4651      	mov	r1, sl
 8004bf4:	00ca      	lsls	r2, r1, #3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	189b      	adds	r3, r3, r2
 8004c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c04:	464b      	mov	r3, r9
 8004c06:	460a      	mov	r2, r1
 8004c08:	eb42 0303 	adc.w	r3, r2, r3
 8004c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c24:	460b      	mov	r3, r1
 8004c26:	18db      	adds	r3, r3, r3
 8004c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	eb42 0303 	adc.w	r3, r2, r3
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c3a:	f7fb fb29 	bl	8000290 <__aeabi_uldivmod>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <UART_SetConfig+0x2d4>)
 8004c44:	fba3 1302 	umull	r1, r3, r3, r2
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	2164      	movs	r1, #100	; 0x64
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	3332      	adds	r3, #50	; 0x32
 8004c56:	4a08      	ldr	r2, [pc, #32]	; (8004c78 <UART_SetConfig+0x2d4>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	f003 0207 	and.w	r2, r3, #7
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4422      	add	r2, r4
 8004c6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c6c:	e105      	b.n	8004e7a <UART_SetConfig+0x4d6>
 8004c6e:	bf00      	nop
 8004c70:	40011000 	.word	0x40011000
 8004c74:	40011400 	.word	0x40011400
 8004c78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c8e:	4642      	mov	r2, r8
 8004c90:	464b      	mov	r3, r9
 8004c92:	1891      	adds	r1, r2, r2
 8004c94:	6239      	str	r1, [r7, #32]
 8004c96:	415b      	adcs	r3, r3
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c9e:	4641      	mov	r1, r8
 8004ca0:	1854      	adds	r4, r2, r1
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	eb43 0501 	adc.w	r5, r3, r1
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	00eb      	lsls	r3, r5, #3
 8004cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cb6:	00e2      	lsls	r2, r4, #3
 8004cb8:	4614      	mov	r4, r2
 8004cba:	461d      	mov	r5, r3
 8004cbc:	4643      	mov	r3, r8
 8004cbe:	18e3      	adds	r3, r4, r3
 8004cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	eb45 0303 	adc.w	r3, r5, r3
 8004cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cea:	4629      	mov	r1, r5
 8004cec:	008b      	lsls	r3, r1, #2
 8004cee:	4621      	mov	r1, r4
 8004cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	008a      	lsls	r2, r1, #2
 8004cf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cfc:	f7fb fac8 	bl	8000290 <__aeabi_uldivmod>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4b60      	ldr	r3, [pc, #384]	; (8004e88 <UART_SetConfig+0x4e4>)
 8004d06:	fba3 2302 	umull	r2, r3, r3, r2
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	011c      	lsls	r4, r3, #4
 8004d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d20:	4642      	mov	r2, r8
 8004d22:	464b      	mov	r3, r9
 8004d24:	1891      	adds	r1, r2, r2
 8004d26:	61b9      	str	r1, [r7, #24]
 8004d28:	415b      	adcs	r3, r3
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d30:	4641      	mov	r1, r8
 8004d32:	1851      	adds	r1, r2, r1
 8004d34:	6139      	str	r1, [r7, #16]
 8004d36:	4649      	mov	r1, r9
 8004d38:	414b      	adcs	r3, r1
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d48:	4659      	mov	r1, fp
 8004d4a:	00cb      	lsls	r3, r1, #3
 8004d4c:	4651      	mov	r1, sl
 8004d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d52:	4651      	mov	r1, sl
 8004d54:	00ca      	lsls	r2, r1, #3
 8004d56:	4610      	mov	r0, r2
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	189b      	adds	r3, r3, r2
 8004d60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d64:	464b      	mov	r3, r9
 8004d66:	460a      	mov	r2, r1
 8004d68:	eb42 0303 	adc.w	r3, r2, r3
 8004d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d88:	4649      	mov	r1, r9
 8004d8a:	008b      	lsls	r3, r1, #2
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d92:	4641      	mov	r1, r8
 8004d94:	008a      	lsls	r2, r1, #2
 8004d96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d9a:	f7fb fa79 	bl	8000290 <__aeabi_uldivmod>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4b39      	ldr	r3, [pc, #228]	; (8004e88 <UART_SetConfig+0x4e4>)
 8004da4:	fba3 1302 	umull	r1, r3, r3, r2
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	2164      	movs	r1, #100	; 0x64
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	3332      	adds	r3, #50	; 0x32
 8004db6:	4a34      	ldr	r2, [pc, #208]	; (8004e88 <UART_SetConfig+0x4e4>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	095b      	lsrs	r3, r3, #5
 8004dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dc2:	441c      	add	r4, r3
 8004dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dc8:	2200      	movs	r2, #0
 8004dca:	673b      	str	r3, [r7, #112]	; 0x70
 8004dcc:	677a      	str	r2, [r7, #116]	; 0x74
 8004dce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dd2:	4642      	mov	r2, r8
 8004dd4:	464b      	mov	r3, r9
 8004dd6:	1891      	adds	r1, r2, r2
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	415b      	adcs	r3, r3
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004de2:	4641      	mov	r1, r8
 8004de4:	1851      	adds	r1, r2, r1
 8004de6:	6039      	str	r1, [r7, #0]
 8004de8:	4649      	mov	r1, r9
 8004dea:	414b      	adcs	r3, r1
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dfa:	4659      	mov	r1, fp
 8004dfc:	00cb      	lsls	r3, r1, #3
 8004dfe:	4651      	mov	r1, sl
 8004e00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e04:	4651      	mov	r1, sl
 8004e06:	00ca      	lsls	r2, r1, #3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4642      	mov	r2, r8
 8004e10:	189b      	adds	r3, r3, r2
 8004e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e14:	464b      	mov	r3, r9
 8004e16:	460a      	mov	r2, r1
 8004e18:	eb42 0303 	adc.w	r3, r2, r3
 8004e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	663b      	str	r3, [r7, #96]	; 0x60
 8004e28:	667a      	str	r2, [r7, #100]	; 0x64
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e36:	4649      	mov	r1, r9
 8004e38:	008b      	lsls	r3, r1, #2
 8004e3a:	4641      	mov	r1, r8
 8004e3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e40:	4641      	mov	r1, r8
 8004e42:	008a      	lsls	r2, r1, #2
 8004e44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e48:	f7fb fa22 	bl	8000290 <__aeabi_uldivmod>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <UART_SetConfig+0x4e4>)
 8004e52:	fba3 1302 	umull	r1, r3, r3, r2
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	2164      	movs	r1, #100	; 0x64
 8004e5a:	fb01 f303 	mul.w	r3, r1, r3
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	3332      	adds	r3, #50	; 0x32
 8004e64:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <UART_SetConfig+0x4e4>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	f003 020f 	and.w	r2, r3, #15
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4422      	add	r2, r4
 8004e78:	609a      	str	r2, [r3, #8]
}
 8004e7a:	bf00      	nop
 8004e7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e80:	46bd      	mov	sp, r7
 8004e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e86:	bf00      	nop
 8004e88:	51eb851f 	.word	0x51eb851f

08004e8c <__errno>:
 8004e8c:	4b01      	ldr	r3, [pc, #4]	; (8004e94 <__errno+0x8>)
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20000020 	.word	0x20000020

08004e98 <__libc_init_array>:
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	4d0d      	ldr	r5, [pc, #52]	; (8004ed0 <__libc_init_array+0x38>)
 8004e9c:	4c0d      	ldr	r4, [pc, #52]	; (8004ed4 <__libc_init_array+0x3c>)
 8004e9e:	1b64      	subs	r4, r4, r5
 8004ea0:	10a4      	asrs	r4, r4, #2
 8004ea2:	2600      	movs	r6, #0
 8004ea4:	42a6      	cmp	r6, r4
 8004ea6:	d109      	bne.n	8004ebc <__libc_init_array+0x24>
 8004ea8:	4d0b      	ldr	r5, [pc, #44]	; (8004ed8 <__libc_init_array+0x40>)
 8004eaa:	4c0c      	ldr	r4, [pc, #48]	; (8004edc <__libc_init_array+0x44>)
 8004eac:	f000 fc8e 	bl	80057cc <_init>
 8004eb0:	1b64      	subs	r4, r4, r5
 8004eb2:	10a4      	asrs	r4, r4, #2
 8004eb4:	2600      	movs	r6, #0
 8004eb6:	42a6      	cmp	r6, r4
 8004eb8:	d105      	bne.n	8004ec6 <__libc_init_array+0x2e>
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec0:	4798      	blx	r3
 8004ec2:	3601      	adds	r6, #1
 8004ec4:	e7ee      	b.n	8004ea4 <__libc_init_array+0xc>
 8004ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eca:	4798      	blx	r3
 8004ecc:	3601      	adds	r6, #1
 8004ece:	e7f2      	b.n	8004eb6 <__libc_init_array+0x1e>
 8004ed0:	0800594c 	.word	0x0800594c
 8004ed4:	0800594c 	.word	0x0800594c
 8004ed8:	0800594c 	.word	0x0800594c
 8004edc:	08005950 	.word	0x08005950

08004ee0 <memset>:
 8004ee0:	4402      	add	r2, r0
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d100      	bne.n	8004eea <memset+0xa>
 8004ee8:	4770      	bx	lr
 8004eea:	f803 1b01 	strb.w	r1, [r3], #1
 8004eee:	e7f9      	b.n	8004ee4 <memset+0x4>

08004ef0 <siprintf>:
 8004ef0:	b40e      	push	{r1, r2, r3}
 8004ef2:	b500      	push	{lr}
 8004ef4:	b09c      	sub	sp, #112	; 0x70
 8004ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ef8:	9002      	str	r0, [sp, #8]
 8004efa:	9006      	str	r0, [sp, #24]
 8004efc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f00:	4809      	ldr	r0, [pc, #36]	; (8004f28 <siprintf+0x38>)
 8004f02:	9107      	str	r1, [sp, #28]
 8004f04:	9104      	str	r1, [sp, #16]
 8004f06:	4909      	ldr	r1, [pc, #36]	; (8004f2c <siprintf+0x3c>)
 8004f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f0c:	9105      	str	r1, [sp, #20]
 8004f0e:	6800      	ldr	r0, [r0, #0]
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	a902      	add	r1, sp, #8
 8004f14:	f000 f868 	bl	8004fe8 <_svfiprintf_r>
 8004f18:	9b02      	ldr	r3, [sp, #8]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	b01c      	add	sp, #112	; 0x70
 8004f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f24:	b003      	add	sp, #12
 8004f26:	4770      	bx	lr
 8004f28:	20000020 	.word	0x20000020
 8004f2c:	ffff0208 	.word	0xffff0208

08004f30 <__ssputs_r>:
 8004f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f34:	688e      	ldr	r6, [r1, #8]
 8004f36:	429e      	cmp	r6, r3
 8004f38:	4682      	mov	sl, r0
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	4690      	mov	r8, r2
 8004f3e:	461f      	mov	r7, r3
 8004f40:	d838      	bhi.n	8004fb4 <__ssputs_r+0x84>
 8004f42:	898a      	ldrh	r2, [r1, #12]
 8004f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f48:	d032      	beq.n	8004fb0 <__ssputs_r+0x80>
 8004f4a:	6825      	ldr	r5, [r4, #0]
 8004f4c:	6909      	ldr	r1, [r1, #16]
 8004f4e:	eba5 0901 	sub.w	r9, r5, r1
 8004f52:	6965      	ldr	r5, [r4, #20]
 8004f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	444b      	add	r3, r9
 8004f60:	106d      	asrs	r5, r5, #1
 8004f62:	429d      	cmp	r5, r3
 8004f64:	bf38      	it	cc
 8004f66:	461d      	movcc	r5, r3
 8004f68:	0553      	lsls	r3, r2, #21
 8004f6a:	d531      	bpl.n	8004fd0 <__ssputs_r+0xa0>
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	f000 fb63 	bl	8005638 <_malloc_r>
 8004f72:	4606      	mov	r6, r0
 8004f74:	b950      	cbnz	r0, 8004f8c <__ssputs_r+0x5c>
 8004f76:	230c      	movs	r3, #12
 8004f78:	f8ca 3000 	str.w	r3, [sl]
 8004f7c:	89a3      	ldrh	r3, [r4, #12]
 8004f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f82:	81a3      	strh	r3, [r4, #12]
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8c:	6921      	ldr	r1, [r4, #16]
 8004f8e:	464a      	mov	r2, r9
 8004f90:	f000 fabe 	bl	8005510 <memcpy>
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9e:	81a3      	strh	r3, [r4, #12]
 8004fa0:	6126      	str	r6, [r4, #16]
 8004fa2:	6165      	str	r5, [r4, #20]
 8004fa4:	444e      	add	r6, r9
 8004fa6:	eba5 0509 	sub.w	r5, r5, r9
 8004faa:	6026      	str	r6, [r4, #0]
 8004fac:	60a5      	str	r5, [r4, #8]
 8004fae:	463e      	mov	r6, r7
 8004fb0:	42be      	cmp	r6, r7
 8004fb2:	d900      	bls.n	8004fb6 <__ssputs_r+0x86>
 8004fb4:	463e      	mov	r6, r7
 8004fb6:	6820      	ldr	r0, [r4, #0]
 8004fb8:	4632      	mov	r2, r6
 8004fba:	4641      	mov	r1, r8
 8004fbc:	f000 fab6 	bl	800552c <memmove>
 8004fc0:	68a3      	ldr	r3, [r4, #8]
 8004fc2:	1b9b      	subs	r3, r3, r6
 8004fc4:	60a3      	str	r3, [r4, #8]
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	4433      	add	r3, r6
 8004fca:	6023      	str	r3, [r4, #0]
 8004fcc:	2000      	movs	r0, #0
 8004fce:	e7db      	b.n	8004f88 <__ssputs_r+0x58>
 8004fd0:	462a      	mov	r2, r5
 8004fd2:	f000 fba5 	bl	8005720 <_realloc_r>
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d1e1      	bne.n	8004fa0 <__ssputs_r+0x70>
 8004fdc:	6921      	ldr	r1, [r4, #16]
 8004fde:	4650      	mov	r0, sl
 8004fe0:	f000 fabe 	bl	8005560 <_free_r>
 8004fe4:	e7c7      	b.n	8004f76 <__ssputs_r+0x46>
	...

08004fe8 <_svfiprintf_r>:
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	4698      	mov	r8, r3
 8004fee:	898b      	ldrh	r3, [r1, #12]
 8004ff0:	061b      	lsls	r3, r3, #24
 8004ff2:	b09d      	sub	sp, #116	; 0x74
 8004ff4:	4607      	mov	r7, r0
 8004ff6:	460d      	mov	r5, r1
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	d50e      	bpl.n	800501a <_svfiprintf_r+0x32>
 8004ffc:	690b      	ldr	r3, [r1, #16]
 8004ffe:	b963      	cbnz	r3, 800501a <_svfiprintf_r+0x32>
 8005000:	2140      	movs	r1, #64	; 0x40
 8005002:	f000 fb19 	bl	8005638 <_malloc_r>
 8005006:	6028      	str	r0, [r5, #0]
 8005008:	6128      	str	r0, [r5, #16]
 800500a:	b920      	cbnz	r0, 8005016 <_svfiprintf_r+0x2e>
 800500c:	230c      	movs	r3, #12
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	e0d1      	b.n	80051ba <_svfiprintf_r+0x1d2>
 8005016:	2340      	movs	r3, #64	; 0x40
 8005018:	616b      	str	r3, [r5, #20]
 800501a:	2300      	movs	r3, #0
 800501c:	9309      	str	r3, [sp, #36]	; 0x24
 800501e:	2320      	movs	r3, #32
 8005020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005024:	f8cd 800c 	str.w	r8, [sp, #12]
 8005028:	2330      	movs	r3, #48	; 0x30
 800502a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80051d4 <_svfiprintf_r+0x1ec>
 800502e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005032:	f04f 0901 	mov.w	r9, #1
 8005036:	4623      	mov	r3, r4
 8005038:	469a      	mov	sl, r3
 800503a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800503e:	b10a      	cbz	r2, 8005044 <_svfiprintf_r+0x5c>
 8005040:	2a25      	cmp	r2, #37	; 0x25
 8005042:	d1f9      	bne.n	8005038 <_svfiprintf_r+0x50>
 8005044:	ebba 0b04 	subs.w	fp, sl, r4
 8005048:	d00b      	beq.n	8005062 <_svfiprintf_r+0x7a>
 800504a:	465b      	mov	r3, fp
 800504c:	4622      	mov	r2, r4
 800504e:	4629      	mov	r1, r5
 8005050:	4638      	mov	r0, r7
 8005052:	f7ff ff6d 	bl	8004f30 <__ssputs_r>
 8005056:	3001      	adds	r0, #1
 8005058:	f000 80aa 	beq.w	80051b0 <_svfiprintf_r+0x1c8>
 800505c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800505e:	445a      	add	r2, fp
 8005060:	9209      	str	r2, [sp, #36]	; 0x24
 8005062:	f89a 3000 	ldrb.w	r3, [sl]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80a2 	beq.w	80051b0 <_svfiprintf_r+0x1c8>
 800506c:	2300      	movs	r3, #0
 800506e:	f04f 32ff 	mov.w	r2, #4294967295
 8005072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005076:	f10a 0a01 	add.w	sl, sl, #1
 800507a:	9304      	str	r3, [sp, #16]
 800507c:	9307      	str	r3, [sp, #28]
 800507e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005082:	931a      	str	r3, [sp, #104]	; 0x68
 8005084:	4654      	mov	r4, sl
 8005086:	2205      	movs	r2, #5
 8005088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800508c:	4851      	ldr	r0, [pc, #324]	; (80051d4 <_svfiprintf_r+0x1ec>)
 800508e:	f7fb f8af 	bl	80001f0 <memchr>
 8005092:	9a04      	ldr	r2, [sp, #16]
 8005094:	b9d8      	cbnz	r0, 80050ce <_svfiprintf_r+0xe6>
 8005096:	06d0      	lsls	r0, r2, #27
 8005098:	bf44      	itt	mi
 800509a:	2320      	movmi	r3, #32
 800509c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050a0:	0711      	lsls	r1, r2, #28
 80050a2:	bf44      	itt	mi
 80050a4:	232b      	movmi	r3, #43	; 0x2b
 80050a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050aa:	f89a 3000 	ldrb.w	r3, [sl]
 80050ae:	2b2a      	cmp	r3, #42	; 0x2a
 80050b0:	d015      	beq.n	80050de <_svfiprintf_r+0xf6>
 80050b2:	9a07      	ldr	r2, [sp, #28]
 80050b4:	4654      	mov	r4, sl
 80050b6:	2000      	movs	r0, #0
 80050b8:	f04f 0c0a 	mov.w	ip, #10
 80050bc:	4621      	mov	r1, r4
 80050be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050c2:	3b30      	subs	r3, #48	; 0x30
 80050c4:	2b09      	cmp	r3, #9
 80050c6:	d94e      	bls.n	8005166 <_svfiprintf_r+0x17e>
 80050c8:	b1b0      	cbz	r0, 80050f8 <_svfiprintf_r+0x110>
 80050ca:	9207      	str	r2, [sp, #28]
 80050cc:	e014      	b.n	80050f8 <_svfiprintf_r+0x110>
 80050ce:	eba0 0308 	sub.w	r3, r0, r8
 80050d2:	fa09 f303 	lsl.w	r3, r9, r3
 80050d6:	4313      	orrs	r3, r2
 80050d8:	9304      	str	r3, [sp, #16]
 80050da:	46a2      	mov	sl, r4
 80050dc:	e7d2      	b.n	8005084 <_svfiprintf_r+0x9c>
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	1d19      	adds	r1, r3, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	9103      	str	r1, [sp, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bfbb      	ittet	lt
 80050ea:	425b      	neglt	r3, r3
 80050ec:	f042 0202 	orrlt.w	r2, r2, #2
 80050f0:	9307      	strge	r3, [sp, #28]
 80050f2:	9307      	strlt	r3, [sp, #28]
 80050f4:	bfb8      	it	lt
 80050f6:	9204      	strlt	r2, [sp, #16]
 80050f8:	7823      	ldrb	r3, [r4, #0]
 80050fa:	2b2e      	cmp	r3, #46	; 0x2e
 80050fc:	d10c      	bne.n	8005118 <_svfiprintf_r+0x130>
 80050fe:	7863      	ldrb	r3, [r4, #1]
 8005100:	2b2a      	cmp	r3, #42	; 0x2a
 8005102:	d135      	bne.n	8005170 <_svfiprintf_r+0x188>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	1d1a      	adds	r2, r3, #4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	9203      	str	r2, [sp, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	bfb8      	it	lt
 8005110:	f04f 33ff 	movlt.w	r3, #4294967295
 8005114:	3402      	adds	r4, #2
 8005116:	9305      	str	r3, [sp, #20]
 8005118:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80051e4 <_svfiprintf_r+0x1fc>
 800511c:	7821      	ldrb	r1, [r4, #0]
 800511e:	2203      	movs	r2, #3
 8005120:	4650      	mov	r0, sl
 8005122:	f7fb f865 	bl	80001f0 <memchr>
 8005126:	b140      	cbz	r0, 800513a <_svfiprintf_r+0x152>
 8005128:	2340      	movs	r3, #64	; 0x40
 800512a:	eba0 000a 	sub.w	r0, r0, sl
 800512e:	fa03 f000 	lsl.w	r0, r3, r0
 8005132:	9b04      	ldr	r3, [sp, #16]
 8005134:	4303      	orrs	r3, r0
 8005136:	3401      	adds	r4, #1
 8005138:	9304      	str	r3, [sp, #16]
 800513a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513e:	4826      	ldr	r0, [pc, #152]	; (80051d8 <_svfiprintf_r+0x1f0>)
 8005140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005144:	2206      	movs	r2, #6
 8005146:	f7fb f853 	bl	80001f0 <memchr>
 800514a:	2800      	cmp	r0, #0
 800514c:	d038      	beq.n	80051c0 <_svfiprintf_r+0x1d8>
 800514e:	4b23      	ldr	r3, [pc, #140]	; (80051dc <_svfiprintf_r+0x1f4>)
 8005150:	bb1b      	cbnz	r3, 800519a <_svfiprintf_r+0x1b2>
 8005152:	9b03      	ldr	r3, [sp, #12]
 8005154:	3307      	adds	r3, #7
 8005156:	f023 0307 	bic.w	r3, r3, #7
 800515a:	3308      	adds	r3, #8
 800515c:	9303      	str	r3, [sp, #12]
 800515e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005160:	4433      	add	r3, r6
 8005162:	9309      	str	r3, [sp, #36]	; 0x24
 8005164:	e767      	b.n	8005036 <_svfiprintf_r+0x4e>
 8005166:	fb0c 3202 	mla	r2, ip, r2, r3
 800516a:	460c      	mov	r4, r1
 800516c:	2001      	movs	r0, #1
 800516e:	e7a5      	b.n	80050bc <_svfiprintf_r+0xd4>
 8005170:	2300      	movs	r3, #0
 8005172:	3401      	adds	r4, #1
 8005174:	9305      	str	r3, [sp, #20]
 8005176:	4619      	mov	r1, r3
 8005178:	f04f 0c0a 	mov.w	ip, #10
 800517c:	4620      	mov	r0, r4
 800517e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005182:	3a30      	subs	r2, #48	; 0x30
 8005184:	2a09      	cmp	r2, #9
 8005186:	d903      	bls.n	8005190 <_svfiprintf_r+0x1a8>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0c5      	beq.n	8005118 <_svfiprintf_r+0x130>
 800518c:	9105      	str	r1, [sp, #20]
 800518e:	e7c3      	b.n	8005118 <_svfiprintf_r+0x130>
 8005190:	fb0c 2101 	mla	r1, ip, r1, r2
 8005194:	4604      	mov	r4, r0
 8005196:	2301      	movs	r3, #1
 8005198:	e7f0      	b.n	800517c <_svfiprintf_r+0x194>
 800519a:	ab03      	add	r3, sp, #12
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	462a      	mov	r2, r5
 80051a0:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <_svfiprintf_r+0x1f8>)
 80051a2:	a904      	add	r1, sp, #16
 80051a4:	4638      	mov	r0, r7
 80051a6:	f3af 8000 	nop.w
 80051aa:	1c42      	adds	r2, r0, #1
 80051ac:	4606      	mov	r6, r0
 80051ae:	d1d6      	bne.n	800515e <_svfiprintf_r+0x176>
 80051b0:	89ab      	ldrh	r3, [r5, #12]
 80051b2:	065b      	lsls	r3, r3, #25
 80051b4:	f53f af2c 	bmi.w	8005010 <_svfiprintf_r+0x28>
 80051b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ba:	b01d      	add	sp, #116	; 0x74
 80051bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c0:	ab03      	add	r3, sp, #12
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	462a      	mov	r2, r5
 80051c6:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <_svfiprintf_r+0x1f8>)
 80051c8:	a904      	add	r1, sp, #16
 80051ca:	4638      	mov	r0, r7
 80051cc:	f000 f87a 	bl	80052c4 <_printf_i>
 80051d0:	e7eb      	b.n	80051aa <_svfiprintf_r+0x1c2>
 80051d2:	bf00      	nop
 80051d4:	08005910 	.word	0x08005910
 80051d8:	0800591a 	.word	0x0800591a
 80051dc:	00000000 	.word	0x00000000
 80051e0:	08004f31 	.word	0x08004f31
 80051e4:	08005916 	.word	0x08005916

080051e8 <_printf_common>:
 80051e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ec:	4616      	mov	r6, r2
 80051ee:	4699      	mov	r9, r3
 80051f0:	688a      	ldr	r2, [r1, #8]
 80051f2:	690b      	ldr	r3, [r1, #16]
 80051f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	bfb8      	it	lt
 80051fc:	4613      	movlt	r3, r2
 80051fe:	6033      	str	r3, [r6, #0]
 8005200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005204:	4607      	mov	r7, r0
 8005206:	460c      	mov	r4, r1
 8005208:	b10a      	cbz	r2, 800520e <_printf_common+0x26>
 800520a:	3301      	adds	r3, #1
 800520c:	6033      	str	r3, [r6, #0]
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	0699      	lsls	r1, r3, #26
 8005212:	bf42      	ittt	mi
 8005214:	6833      	ldrmi	r3, [r6, #0]
 8005216:	3302      	addmi	r3, #2
 8005218:	6033      	strmi	r3, [r6, #0]
 800521a:	6825      	ldr	r5, [r4, #0]
 800521c:	f015 0506 	ands.w	r5, r5, #6
 8005220:	d106      	bne.n	8005230 <_printf_common+0x48>
 8005222:	f104 0a19 	add.w	sl, r4, #25
 8005226:	68e3      	ldr	r3, [r4, #12]
 8005228:	6832      	ldr	r2, [r6, #0]
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	42ab      	cmp	r3, r5
 800522e:	dc26      	bgt.n	800527e <_printf_common+0x96>
 8005230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005234:	1e13      	subs	r3, r2, #0
 8005236:	6822      	ldr	r2, [r4, #0]
 8005238:	bf18      	it	ne
 800523a:	2301      	movne	r3, #1
 800523c:	0692      	lsls	r2, r2, #26
 800523e:	d42b      	bmi.n	8005298 <_printf_common+0xb0>
 8005240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005244:	4649      	mov	r1, r9
 8005246:	4638      	mov	r0, r7
 8005248:	47c0      	blx	r8
 800524a:	3001      	adds	r0, #1
 800524c:	d01e      	beq.n	800528c <_printf_common+0xa4>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	68e5      	ldr	r5, [r4, #12]
 8005252:	6832      	ldr	r2, [r6, #0]
 8005254:	f003 0306 	and.w	r3, r3, #6
 8005258:	2b04      	cmp	r3, #4
 800525a:	bf08      	it	eq
 800525c:	1aad      	subeq	r5, r5, r2
 800525e:	68a3      	ldr	r3, [r4, #8]
 8005260:	6922      	ldr	r2, [r4, #16]
 8005262:	bf0c      	ite	eq
 8005264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005268:	2500      	movne	r5, #0
 800526a:	4293      	cmp	r3, r2
 800526c:	bfc4      	itt	gt
 800526e:	1a9b      	subgt	r3, r3, r2
 8005270:	18ed      	addgt	r5, r5, r3
 8005272:	2600      	movs	r6, #0
 8005274:	341a      	adds	r4, #26
 8005276:	42b5      	cmp	r5, r6
 8005278:	d11a      	bne.n	80052b0 <_printf_common+0xc8>
 800527a:	2000      	movs	r0, #0
 800527c:	e008      	b.n	8005290 <_printf_common+0xa8>
 800527e:	2301      	movs	r3, #1
 8005280:	4652      	mov	r2, sl
 8005282:	4649      	mov	r1, r9
 8005284:	4638      	mov	r0, r7
 8005286:	47c0      	blx	r8
 8005288:	3001      	adds	r0, #1
 800528a:	d103      	bne.n	8005294 <_printf_common+0xac>
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005294:	3501      	adds	r5, #1
 8005296:	e7c6      	b.n	8005226 <_printf_common+0x3e>
 8005298:	18e1      	adds	r1, r4, r3
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	2030      	movs	r0, #48	; 0x30
 800529e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052a2:	4422      	add	r2, r4
 80052a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052ac:	3302      	adds	r3, #2
 80052ae:	e7c7      	b.n	8005240 <_printf_common+0x58>
 80052b0:	2301      	movs	r3, #1
 80052b2:	4622      	mov	r2, r4
 80052b4:	4649      	mov	r1, r9
 80052b6:	4638      	mov	r0, r7
 80052b8:	47c0      	blx	r8
 80052ba:	3001      	adds	r0, #1
 80052bc:	d0e6      	beq.n	800528c <_printf_common+0xa4>
 80052be:	3601      	adds	r6, #1
 80052c0:	e7d9      	b.n	8005276 <_printf_common+0x8e>
	...

080052c4 <_printf_i>:
 80052c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c8:	7e0f      	ldrb	r7, [r1, #24]
 80052ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052cc:	2f78      	cmp	r7, #120	; 0x78
 80052ce:	4691      	mov	r9, r2
 80052d0:	4680      	mov	r8, r0
 80052d2:	460c      	mov	r4, r1
 80052d4:	469a      	mov	sl, r3
 80052d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052da:	d807      	bhi.n	80052ec <_printf_i+0x28>
 80052dc:	2f62      	cmp	r7, #98	; 0x62
 80052de:	d80a      	bhi.n	80052f6 <_printf_i+0x32>
 80052e0:	2f00      	cmp	r7, #0
 80052e2:	f000 80d8 	beq.w	8005496 <_printf_i+0x1d2>
 80052e6:	2f58      	cmp	r7, #88	; 0x58
 80052e8:	f000 80a3 	beq.w	8005432 <_printf_i+0x16e>
 80052ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052f4:	e03a      	b.n	800536c <_printf_i+0xa8>
 80052f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052fa:	2b15      	cmp	r3, #21
 80052fc:	d8f6      	bhi.n	80052ec <_printf_i+0x28>
 80052fe:	a101      	add	r1, pc, #4	; (adr r1, 8005304 <_printf_i+0x40>)
 8005300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005304:	0800535d 	.word	0x0800535d
 8005308:	08005371 	.word	0x08005371
 800530c:	080052ed 	.word	0x080052ed
 8005310:	080052ed 	.word	0x080052ed
 8005314:	080052ed 	.word	0x080052ed
 8005318:	080052ed 	.word	0x080052ed
 800531c:	08005371 	.word	0x08005371
 8005320:	080052ed 	.word	0x080052ed
 8005324:	080052ed 	.word	0x080052ed
 8005328:	080052ed 	.word	0x080052ed
 800532c:	080052ed 	.word	0x080052ed
 8005330:	0800547d 	.word	0x0800547d
 8005334:	080053a1 	.word	0x080053a1
 8005338:	0800545f 	.word	0x0800545f
 800533c:	080052ed 	.word	0x080052ed
 8005340:	080052ed 	.word	0x080052ed
 8005344:	0800549f 	.word	0x0800549f
 8005348:	080052ed 	.word	0x080052ed
 800534c:	080053a1 	.word	0x080053a1
 8005350:	080052ed 	.word	0x080052ed
 8005354:	080052ed 	.word	0x080052ed
 8005358:	08005467 	.word	0x08005467
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	1d1a      	adds	r2, r3, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	602a      	str	r2, [r5, #0]
 8005364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800536c:	2301      	movs	r3, #1
 800536e:	e0a3      	b.n	80054b8 <_printf_i+0x1f4>
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	6829      	ldr	r1, [r5, #0]
 8005374:	0606      	lsls	r6, r0, #24
 8005376:	f101 0304 	add.w	r3, r1, #4
 800537a:	d50a      	bpl.n	8005392 <_printf_i+0xce>
 800537c:	680e      	ldr	r6, [r1, #0]
 800537e:	602b      	str	r3, [r5, #0]
 8005380:	2e00      	cmp	r6, #0
 8005382:	da03      	bge.n	800538c <_printf_i+0xc8>
 8005384:	232d      	movs	r3, #45	; 0x2d
 8005386:	4276      	negs	r6, r6
 8005388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800538c:	485e      	ldr	r0, [pc, #376]	; (8005508 <_printf_i+0x244>)
 800538e:	230a      	movs	r3, #10
 8005390:	e019      	b.n	80053c6 <_printf_i+0x102>
 8005392:	680e      	ldr	r6, [r1, #0]
 8005394:	602b      	str	r3, [r5, #0]
 8005396:	f010 0f40 	tst.w	r0, #64	; 0x40
 800539a:	bf18      	it	ne
 800539c:	b236      	sxthne	r6, r6
 800539e:	e7ef      	b.n	8005380 <_printf_i+0xbc>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	6820      	ldr	r0, [r4, #0]
 80053a4:	1d19      	adds	r1, r3, #4
 80053a6:	6029      	str	r1, [r5, #0]
 80053a8:	0601      	lsls	r1, r0, #24
 80053aa:	d501      	bpl.n	80053b0 <_printf_i+0xec>
 80053ac:	681e      	ldr	r6, [r3, #0]
 80053ae:	e002      	b.n	80053b6 <_printf_i+0xf2>
 80053b0:	0646      	lsls	r6, r0, #25
 80053b2:	d5fb      	bpl.n	80053ac <_printf_i+0xe8>
 80053b4:	881e      	ldrh	r6, [r3, #0]
 80053b6:	4854      	ldr	r0, [pc, #336]	; (8005508 <_printf_i+0x244>)
 80053b8:	2f6f      	cmp	r7, #111	; 0x6f
 80053ba:	bf0c      	ite	eq
 80053bc:	2308      	moveq	r3, #8
 80053be:	230a      	movne	r3, #10
 80053c0:	2100      	movs	r1, #0
 80053c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053c6:	6865      	ldr	r5, [r4, #4]
 80053c8:	60a5      	str	r5, [r4, #8]
 80053ca:	2d00      	cmp	r5, #0
 80053cc:	bfa2      	ittt	ge
 80053ce:	6821      	ldrge	r1, [r4, #0]
 80053d0:	f021 0104 	bicge.w	r1, r1, #4
 80053d4:	6021      	strge	r1, [r4, #0]
 80053d6:	b90e      	cbnz	r6, 80053dc <_printf_i+0x118>
 80053d8:	2d00      	cmp	r5, #0
 80053da:	d04d      	beq.n	8005478 <_printf_i+0x1b4>
 80053dc:	4615      	mov	r5, r2
 80053de:	fbb6 f1f3 	udiv	r1, r6, r3
 80053e2:	fb03 6711 	mls	r7, r3, r1, r6
 80053e6:	5dc7      	ldrb	r7, [r0, r7]
 80053e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053ec:	4637      	mov	r7, r6
 80053ee:	42bb      	cmp	r3, r7
 80053f0:	460e      	mov	r6, r1
 80053f2:	d9f4      	bls.n	80053de <_printf_i+0x11a>
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d10b      	bne.n	8005410 <_printf_i+0x14c>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	07de      	lsls	r6, r3, #31
 80053fc:	d508      	bpl.n	8005410 <_printf_i+0x14c>
 80053fe:	6923      	ldr	r3, [r4, #16]
 8005400:	6861      	ldr	r1, [r4, #4]
 8005402:	4299      	cmp	r1, r3
 8005404:	bfde      	ittt	le
 8005406:	2330      	movle	r3, #48	; 0x30
 8005408:	f805 3c01 	strble.w	r3, [r5, #-1]
 800540c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005410:	1b52      	subs	r2, r2, r5
 8005412:	6122      	str	r2, [r4, #16]
 8005414:	f8cd a000 	str.w	sl, [sp]
 8005418:	464b      	mov	r3, r9
 800541a:	aa03      	add	r2, sp, #12
 800541c:	4621      	mov	r1, r4
 800541e:	4640      	mov	r0, r8
 8005420:	f7ff fee2 	bl	80051e8 <_printf_common>
 8005424:	3001      	adds	r0, #1
 8005426:	d14c      	bne.n	80054c2 <_printf_i+0x1fe>
 8005428:	f04f 30ff 	mov.w	r0, #4294967295
 800542c:	b004      	add	sp, #16
 800542e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005432:	4835      	ldr	r0, [pc, #212]	; (8005508 <_printf_i+0x244>)
 8005434:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005438:	6829      	ldr	r1, [r5, #0]
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005440:	6029      	str	r1, [r5, #0]
 8005442:	061d      	lsls	r5, r3, #24
 8005444:	d514      	bpl.n	8005470 <_printf_i+0x1ac>
 8005446:	07df      	lsls	r7, r3, #31
 8005448:	bf44      	itt	mi
 800544a:	f043 0320 	orrmi.w	r3, r3, #32
 800544e:	6023      	strmi	r3, [r4, #0]
 8005450:	b91e      	cbnz	r6, 800545a <_printf_i+0x196>
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	f023 0320 	bic.w	r3, r3, #32
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	2310      	movs	r3, #16
 800545c:	e7b0      	b.n	80053c0 <_printf_i+0xfc>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	f043 0320 	orr.w	r3, r3, #32
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	2378      	movs	r3, #120	; 0x78
 8005468:	4828      	ldr	r0, [pc, #160]	; (800550c <_printf_i+0x248>)
 800546a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800546e:	e7e3      	b.n	8005438 <_printf_i+0x174>
 8005470:	0659      	lsls	r1, r3, #25
 8005472:	bf48      	it	mi
 8005474:	b2b6      	uxthmi	r6, r6
 8005476:	e7e6      	b.n	8005446 <_printf_i+0x182>
 8005478:	4615      	mov	r5, r2
 800547a:	e7bb      	b.n	80053f4 <_printf_i+0x130>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	6826      	ldr	r6, [r4, #0]
 8005480:	6961      	ldr	r1, [r4, #20]
 8005482:	1d18      	adds	r0, r3, #4
 8005484:	6028      	str	r0, [r5, #0]
 8005486:	0635      	lsls	r5, r6, #24
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	d501      	bpl.n	8005490 <_printf_i+0x1cc>
 800548c:	6019      	str	r1, [r3, #0]
 800548e:	e002      	b.n	8005496 <_printf_i+0x1d2>
 8005490:	0670      	lsls	r0, r6, #25
 8005492:	d5fb      	bpl.n	800548c <_printf_i+0x1c8>
 8005494:	8019      	strh	r1, [r3, #0]
 8005496:	2300      	movs	r3, #0
 8005498:	6123      	str	r3, [r4, #16]
 800549a:	4615      	mov	r5, r2
 800549c:	e7ba      	b.n	8005414 <_printf_i+0x150>
 800549e:	682b      	ldr	r3, [r5, #0]
 80054a0:	1d1a      	adds	r2, r3, #4
 80054a2:	602a      	str	r2, [r5, #0]
 80054a4:	681d      	ldr	r5, [r3, #0]
 80054a6:	6862      	ldr	r2, [r4, #4]
 80054a8:	2100      	movs	r1, #0
 80054aa:	4628      	mov	r0, r5
 80054ac:	f7fa fea0 	bl	80001f0 <memchr>
 80054b0:	b108      	cbz	r0, 80054b6 <_printf_i+0x1f2>
 80054b2:	1b40      	subs	r0, r0, r5
 80054b4:	6060      	str	r0, [r4, #4]
 80054b6:	6863      	ldr	r3, [r4, #4]
 80054b8:	6123      	str	r3, [r4, #16]
 80054ba:	2300      	movs	r3, #0
 80054bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054c0:	e7a8      	b.n	8005414 <_printf_i+0x150>
 80054c2:	6923      	ldr	r3, [r4, #16]
 80054c4:	462a      	mov	r2, r5
 80054c6:	4649      	mov	r1, r9
 80054c8:	4640      	mov	r0, r8
 80054ca:	47d0      	blx	sl
 80054cc:	3001      	adds	r0, #1
 80054ce:	d0ab      	beq.n	8005428 <_printf_i+0x164>
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	079b      	lsls	r3, r3, #30
 80054d4:	d413      	bmi.n	80054fe <_printf_i+0x23a>
 80054d6:	68e0      	ldr	r0, [r4, #12]
 80054d8:	9b03      	ldr	r3, [sp, #12]
 80054da:	4298      	cmp	r0, r3
 80054dc:	bfb8      	it	lt
 80054de:	4618      	movlt	r0, r3
 80054e0:	e7a4      	b.n	800542c <_printf_i+0x168>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4632      	mov	r2, r6
 80054e6:	4649      	mov	r1, r9
 80054e8:	4640      	mov	r0, r8
 80054ea:	47d0      	blx	sl
 80054ec:	3001      	adds	r0, #1
 80054ee:	d09b      	beq.n	8005428 <_printf_i+0x164>
 80054f0:	3501      	adds	r5, #1
 80054f2:	68e3      	ldr	r3, [r4, #12]
 80054f4:	9903      	ldr	r1, [sp, #12]
 80054f6:	1a5b      	subs	r3, r3, r1
 80054f8:	42ab      	cmp	r3, r5
 80054fa:	dcf2      	bgt.n	80054e2 <_printf_i+0x21e>
 80054fc:	e7eb      	b.n	80054d6 <_printf_i+0x212>
 80054fe:	2500      	movs	r5, #0
 8005500:	f104 0619 	add.w	r6, r4, #25
 8005504:	e7f5      	b.n	80054f2 <_printf_i+0x22e>
 8005506:	bf00      	nop
 8005508:	08005921 	.word	0x08005921
 800550c:	08005932 	.word	0x08005932

08005510 <memcpy>:
 8005510:	440a      	add	r2, r1
 8005512:	4291      	cmp	r1, r2
 8005514:	f100 33ff 	add.w	r3, r0, #4294967295
 8005518:	d100      	bne.n	800551c <memcpy+0xc>
 800551a:	4770      	bx	lr
 800551c:	b510      	push	{r4, lr}
 800551e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005526:	4291      	cmp	r1, r2
 8005528:	d1f9      	bne.n	800551e <memcpy+0xe>
 800552a:	bd10      	pop	{r4, pc}

0800552c <memmove>:
 800552c:	4288      	cmp	r0, r1
 800552e:	b510      	push	{r4, lr}
 8005530:	eb01 0402 	add.w	r4, r1, r2
 8005534:	d902      	bls.n	800553c <memmove+0x10>
 8005536:	4284      	cmp	r4, r0
 8005538:	4623      	mov	r3, r4
 800553a:	d807      	bhi.n	800554c <memmove+0x20>
 800553c:	1e43      	subs	r3, r0, #1
 800553e:	42a1      	cmp	r1, r4
 8005540:	d008      	beq.n	8005554 <memmove+0x28>
 8005542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800554a:	e7f8      	b.n	800553e <memmove+0x12>
 800554c:	4402      	add	r2, r0
 800554e:	4601      	mov	r1, r0
 8005550:	428a      	cmp	r2, r1
 8005552:	d100      	bne.n	8005556 <memmove+0x2a>
 8005554:	bd10      	pop	{r4, pc}
 8005556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800555a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800555e:	e7f7      	b.n	8005550 <memmove+0x24>

08005560 <_free_r>:
 8005560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005562:	2900      	cmp	r1, #0
 8005564:	d044      	beq.n	80055f0 <_free_r+0x90>
 8005566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800556a:	9001      	str	r0, [sp, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	f1a1 0404 	sub.w	r4, r1, #4
 8005572:	bfb8      	it	lt
 8005574:	18e4      	addlt	r4, r4, r3
 8005576:	f000 f913 	bl	80057a0 <__malloc_lock>
 800557a:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <_free_r+0x94>)
 800557c:	9801      	ldr	r0, [sp, #4]
 800557e:	6813      	ldr	r3, [r2, #0]
 8005580:	b933      	cbnz	r3, 8005590 <_free_r+0x30>
 8005582:	6063      	str	r3, [r4, #4]
 8005584:	6014      	str	r4, [r2, #0]
 8005586:	b003      	add	sp, #12
 8005588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800558c:	f000 b90e 	b.w	80057ac <__malloc_unlock>
 8005590:	42a3      	cmp	r3, r4
 8005592:	d908      	bls.n	80055a6 <_free_r+0x46>
 8005594:	6825      	ldr	r5, [r4, #0]
 8005596:	1961      	adds	r1, r4, r5
 8005598:	428b      	cmp	r3, r1
 800559a:	bf01      	itttt	eq
 800559c:	6819      	ldreq	r1, [r3, #0]
 800559e:	685b      	ldreq	r3, [r3, #4]
 80055a0:	1949      	addeq	r1, r1, r5
 80055a2:	6021      	streq	r1, [r4, #0]
 80055a4:	e7ed      	b.n	8005582 <_free_r+0x22>
 80055a6:	461a      	mov	r2, r3
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	b10b      	cbz	r3, 80055b0 <_free_r+0x50>
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	d9fa      	bls.n	80055a6 <_free_r+0x46>
 80055b0:	6811      	ldr	r1, [r2, #0]
 80055b2:	1855      	adds	r5, r2, r1
 80055b4:	42a5      	cmp	r5, r4
 80055b6:	d10b      	bne.n	80055d0 <_free_r+0x70>
 80055b8:	6824      	ldr	r4, [r4, #0]
 80055ba:	4421      	add	r1, r4
 80055bc:	1854      	adds	r4, r2, r1
 80055be:	42a3      	cmp	r3, r4
 80055c0:	6011      	str	r1, [r2, #0]
 80055c2:	d1e0      	bne.n	8005586 <_free_r+0x26>
 80055c4:	681c      	ldr	r4, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	6053      	str	r3, [r2, #4]
 80055ca:	4421      	add	r1, r4
 80055cc:	6011      	str	r1, [r2, #0]
 80055ce:	e7da      	b.n	8005586 <_free_r+0x26>
 80055d0:	d902      	bls.n	80055d8 <_free_r+0x78>
 80055d2:	230c      	movs	r3, #12
 80055d4:	6003      	str	r3, [r0, #0]
 80055d6:	e7d6      	b.n	8005586 <_free_r+0x26>
 80055d8:	6825      	ldr	r5, [r4, #0]
 80055da:	1961      	adds	r1, r4, r5
 80055dc:	428b      	cmp	r3, r1
 80055de:	bf04      	itt	eq
 80055e0:	6819      	ldreq	r1, [r3, #0]
 80055e2:	685b      	ldreq	r3, [r3, #4]
 80055e4:	6063      	str	r3, [r4, #4]
 80055e6:	bf04      	itt	eq
 80055e8:	1949      	addeq	r1, r1, r5
 80055ea:	6021      	streq	r1, [r4, #0]
 80055ec:	6054      	str	r4, [r2, #4]
 80055ee:	e7ca      	b.n	8005586 <_free_r+0x26>
 80055f0:	b003      	add	sp, #12
 80055f2:	bd30      	pop	{r4, r5, pc}
 80055f4:	200002dc 	.word	0x200002dc

080055f8 <sbrk_aligned>:
 80055f8:	b570      	push	{r4, r5, r6, lr}
 80055fa:	4e0e      	ldr	r6, [pc, #56]	; (8005634 <sbrk_aligned+0x3c>)
 80055fc:	460c      	mov	r4, r1
 80055fe:	6831      	ldr	r1, [r6, #0]
 8005600:	4605      	mov	r5, r0
 8005602:	b911      	cbnz	r1, 800560a <sbrk_aligned+0x12>
 8005604:	f000 f8bc 	bl	8005780 <_sbrk_r>
 8005608:	6030      	str	r0, [r6, #0]
 800560a:	4621      	mov	r1, r4
 800560c:	4628      	mov	r0, r5
 800560e:	f000 f8b7 	bl	8005780 <_sbrk_r>
 8005612:	1c43      	adds	r3, r0, #1
 8005614:	d00a      	beq.n	800562c <sbrk_aligned+0x34>
 8005616:	1cc4      	adds	r4, r0, #3
 8005618:	f024 0403 	bic.w	r4, r4, #3
 800561c:	42a0      	cmp	r0, r4
 800561e:	d007      	beq.n	8005630 <sbrk_aligned+0x38>
 8005620:	1a21      	subs	r1, r4, r0
 8005622:	4628      	mov	r0, r5
 8005624:	f000 f8ac 	bl	8005780 <_sbrk_r>
 8005628:	3001      	adds	r0, #1
 800562a:	d101      	bne.n	8005630 <sbrk_aligned+0x38>
 800562c:	f04f 34ff 	mov.w	r4, #4294967295
 8005630:	4620      	mov	r0, r4
 8005632:	bd70      	pop	{r4, r5, r6, pc}
 8005634:	200002e0 	.word	0x200002e0

08005638 <_malloc_r>:
 8005638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800563c:	1ccd      	adds	r5, r1, #3
 800563e:	f025 0503 	bic.w	r5, r5, #3
 8005642:	3508      	adds	r5, #8
 8005644:	2d0c      	cmp	r5, #12
 8005646:	bf38      	it	cc
 8005648:	250c      	movcc	r5, #12
 800564a:	2d00      	cmp	r5, #0
 800564c:	4607      	mov	r7, r0
 800564e:	db01      	blt.n	8005654 <_malloc_r+0x1c>
 8005650:	42a9      	cmp	r1, r5
 8005652:	d905      	bls.n	8005660 <_malloc_r+0x28>
 8005654:	230c      	movs	r3, #12
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	2600      	movs	r6, #0
 800565a:	4630      	mov	r0, r6
 800565c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005660:	4e2e      	ldr	r6, [pc, #184]	; (800571c <_malloc_r+0xe4>)
 8005662:	f000 f89d 	bl	80057a0 <__malloc_lock>
 8005666:	6833      	ldr	r3, [r6, #0]
 8005668:	461c      	mov	r4, r3
 800566a:	bb34      	cbnz	r4, 80056ba <_malloc_r+0x82>
 800566c:	4629      	mov	r1, r5
 800566e:	4638      	mov	r0, r7
 8005670:	f7ff ffc2 	bl	80055f8 <sbrk_aligned>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	4604      	mov	r4, r0
 8005678:	d14d      	bne.n	8005716 <_malloc_r+0xde>
 800567a:	6834      	ldr	r4, [r6, #0]
 800567c:	4626      	mov	r6, r4
 800567e:	2e00      	cmp	r6, #0
 8005680:	d140      	bne.n	8005704 <_malloc_r+0xcc>
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	4631      	mov	r1, r6
 8005686:	4638      	mov	r0, r7
 8005688:	eb04 0803 	add.w	r8, r4, r3
 800568c:	f000 f878 	bl	8005780 <_sbrk_r>
 8005690:	4580      	cmp	r8, r0
 8005692:	d13a      	bne.n	800570a <_malloc_r+0xd2>
 8005694:	6821      	ldr	r1, [r4, #0]
 8005696:	3503      	adds	r5, #3
 8005698:	1a6d      	subs	r5, r5, r1
 800569a:	f025 0503 	bic.w	r5, r5, #3
 800569e:	3508      	adds	r5, #8
 80056a0:	2d0c      	cmp	r5, #12
 80056a2:	bf38      	it	cc
 80056a4:	250c      	movcc	r5, #12
 80056a6:	4629      	mov	r1, r5
 80056a8:	4638      	mov	r0, r7
 80056aa:	f7ff ffa5 	bl	80055f8 <sbrk_aligned>
 80056ae:	3001      	adds	r0, #1
 80056b0:	d02b      	beq.n	800570a <_malloc_r+0xd2>
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	442b      	add	r3, r5
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	e00e      	b.n	80056d8 <_malloc_r+0xa0>
 80056ba:	6822      	ldr	r2, [r4, #0]
 80056bc:	1b52      	subs	r2, r2, r5
 80056be:	d41e      	bmi.n	80056fe <_malloc_r+0xc6>
 80056c0:	2a0b      	cmp	r2, #11
 80056c2:	d916      	bls.n	80056f2 <_malloc_r+0xba>
 80056c4:	1961      	adds	r1, r4, r5
 80056c6:	42a3      	cmp	r3, r4
 80056c8:	6025      	str	r5, [r4, #0]
 80056ca:	bf18      	it	ne
 80056cc:	6059      	strne	r1, [r3, #4]
 80056ce:	6863      	ldr	r3, [r4, #4]
 80056d0:	bf08      	it	eq
 80056d2:	6031      	streq	r1, [r6, #0]
 80056d4:	5162      	str	r2, [r4, r5]
 80056d6:	604b      	str	r3, [r1, #4]
 80056d8:	4638      	mov	r0, r7
 80056da:	f104 060b 	add.w	r6, r4, #11
 80056de:	f000 f865 	bl	80057ac <__malloc_unlock>
 80056e2:	f026 0607 	bic.w	r6, r6, #7
 80056e6:	1d23      	adds	r3, r4, #4
 80056e8:	1af2      	subs	r2, r6, r3
 80056ea:	d0b6      	beq.n	800565a <_malloc_r+0x22>
 80056ec:	1b9b      	subs	r3, r3, r6
 80056ee:	50a3      	str	r3, [r4, r2]
 80056f0:	e7b3      	b.n	800565a <_malloc_r+0x22>
 80056f2:	6862      	ldr	r2, [r4, #4]
 80056f4:	42a3      	cmp	r3, r4
 80056f6:	bf0c      	ite	eq
 80056f8:	6032      	streq	r2, [r6, #0]
 80056fa:	605a      	strne	r2, [r3, #4]
 80056fc:	e7ec      	b.n	80056d8 <_malloc_r+0xa0>
 80056fe:	4623      	mov	r3, r4
 8005700:	6864      	ldr	r4, [r4, #4]
 8005702:	e7b2      	b.n	800566a <_malloc_r+0x32>
 8005704:	4634      	mov	r4, r6
 8005706:	6876      	ldr	r6, [r6, #4]
 8005708:	e7b9      	b.n	800567e <_malloc_r+0x46>
 800570a:	230c      	movs	r3, #12
 800570c:	603b      	str	r3, [r7, #0]
 800570e:	4638      	mov	r0, r7
 8005710:	f000 f84c 	bl	80057ac <__malloc_unlock>
 8005714:	e7a1      	b.n	800565a <_malloc_r+0x22>
 8005716:	6025      	str	r5, [r4, #0]
 8005718:	e7de      	b.n	80056d8 <_malloc_r+0xa0>
 800571a:	bf00      	nop
 800571c:	200002dc 	.word	0x200002dc

08005720 <_realloc_r>:
 8005720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005724:	4680      	mov	r8, r0
 8005726:	4614      	mov	r4, r2
 8005728:	460e      	mov	r6, r1
 800572a:	b921      	cbnz	r1, 8005736 <_realloc_r+0x16>
 800572c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005730:	4611      	mov	r1, r2
 8005732:	f7ff bf81 	b.w	8005638 <_malloc_r>
 8005736:	b92a      	cbnz	r2, 8005744 <_realloc_r+0x24>
 8005738:	f7ff ff12 	bl	8005560 <_free_r>
 800573c:	4625      	mov	r5, r4
 800573e:	4628      	mov	r0, r5
 8005740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005744:	f000 f838 	bl	80057b8 <_malloc_usable_size_r>
 8005748:	4284      	cmp	r4, r0
 800574a:	4607      	mov	r7, r0
 800574c:	d802      	bhi.n	8005754 <_realloc_r+0x34>
 800574e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005752:	d812      	bhi.n	800577a <_realloc_r+0x5a>
 8005754:	4621      	mov	r1, r4
 8005756:	4640      	mov	r0, r8
 8005758:	f7ff ff6e 	bl	8005638 <_malloc_r>
 800575c:	4605      	mov	r5, r0
 800575e:	2800      	cmp	r0, #0
 8005760:	d0ed      	beq.n	800573e <_realloc_r+0x1e>
 8005762:	42bc      	cmp	r4, r7
 8005764:	4622      	mov	r2, r4
 8005766:	4631      	mov	r1, r6
 8005768:	bf28      	it	cs
 800576a:	463a      	movcs	r2, r7
 800576c:	f7ff fed0 	bl	8005510 <memcpy>
 8005770:	4631      	mov	r1, r6
 8005772:	4640      	mov	r0, r8
 8005774:	f7ff fef4 	bl	8005560 <_free_r>
 8005778:	e7e1      	b.n	800573e <_realloc_r+0x1e>
 800577a:	4635      	mov	r5, r6
 800577c:	e7df      	b.n	800573e <_realloc_r+0x1e>
	...

08005780 <_sbrk_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4d06      	ldr	r5, [pc, #24]	; (800579c <_sbrk_r+0x1c>)
 8005784:	2300      	movs	r3, #0
 8005786:	4604      	mov	r4, r0
 8005788:	4608      	mov	r0, r1
 800578a:	602b      	str	r3, [r5, #0]
 800578c:	f7fb fd9e 	bl	80012cc <_sbrk>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d102      	bne.n	800579a <_sbrk_r+0x1a>
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	b103      	cbz	r3, 800579a <_sbrk_r+0x1a>
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	bd38      	pop	{r3, r4, r5, pc}
 800579c:	200002e4 	.word	0x200002e4

080057a0 <__malloc_lock>:
 80057a0:	4801      	ldr	r0, [pc, #4]	; (80057a8 <__malloc_lock+0x8>)
 80057a2:	f000 b811 	b.w	80057c8 <__retarget_lock_acquire_recursive>
 80057a6:	bf00      	nop
 80057a8:	200002e8 	.word	0x200002e8

080057ac <__malloc_unlock>:
 80057ac:	4801      	ldr	r0, [pc, #4]	; (80057b4 <__malloc_unlock+0x8>)
 80057ae:	f000 b80c 	b.w	80057ca <__retarget_lock_release_recursive>
 80057b2:	bf00      	nop
 80057b4:	200002e8 	.word	0x200002e8

080057b8 <_malloc_usable_size_r>:
 80057b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057bc:	1f18      	subs	r0, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	bfbc      	itt	lt
 80057c2:	580b      	ldrlt	r3, [r1, r0]
 80057c4:	18c0      	addlt	r0, r0, r3
 80057c6:	4770      	bx	lr

080057c8 <__retarget_lock_acquire_recursive>:
 80057c8:	4770      	bx	lr

080057ca <__retarget_lock_release_recursive>:
 80057ca:	4770      	bx	lr

080057cc <_init>:
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ce:	bf00      	nop
 80057d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d2:	bc08      	pop	{r3}
 80057d4:	469e      	mov	lr, r3
 80057d6:	4770      	bx	lr

080057d8 <_fini>:
 80057d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057da:	bf00      	nop
 80057dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057de:	bc08      	pop	{r3}
 80057e0:	469e      	mov	lr, r3
 80057e2:	4770      	bx	lr
