
UDAR_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d4  080059d4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059dc  080059dc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059e0  080059e0  000159e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080059e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000084  08005a68  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08005a68  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010082  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002462  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00032598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00033388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182bb  00000000  00000000  00034080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011213  00000000  00000000  0004c33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000998ba  00000000  00000000  0005d54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6e08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d88  00000000  00000000  000f6e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800585c 	.word	0x0800585c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800585c 	.word	0x0800585c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	463b      	mov	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <MX_ADC1_Init+0x98>)
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_ADC1_Init+0x98>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80005b2:	4b1e      	ldr	r3, [pc, #120]	; (800062c <MX_ADC1_Init+0x98>)
 80005b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80005b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_ADC1_Init+0x98>)
 80005bc:	2201      	movs	r2, #1
 80005be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_ADC1_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_ADC1_Init+0x98>)
 80005d6:	4a17      	ldr	r2, [pc, #92]	; (8000634 <MX_ADC1_Init+0xa0>)
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_ADC1_Init+0x98>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_ADC1_Init+0x98>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <MX_ADC1_Init+0x98>)
 80005f6:	f001 f9cd 	bl	8001994 <HAL_ADC_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000600:	f000 fe4a 	bl	8001298 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000604:	2309      	movs	r3, #9
 8000606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000608:	2301      	movs	r3, #1
 800060a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800060c:	2301      	movs	r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_ADC1_Init+0x98>)
 8000616:	f001 fb81 	bl	8001d1c <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000620:	f000 fe3a 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000a0 	.word	0x200000a0
 8000630:	40012000 	.word	0x40012000
 8000634:	0f000001 	.word	0x0f000001

08000638 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a24      	ldr	r2, [pc, #144]	; (80006e8 <HAL_ADC_MspInit+0xb0>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d141      	bne.n	80006de <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	4b23      	ldr	r3, [pc, #140]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 8000664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000668:	6453      	str	r3, [r2, #68]	; 0x44
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0304 	and.w	r3, r3, #4
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_ADC_MspInit+0xb4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ae:	2310      	movs	r3, #16
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	480b      	ldr	r0, [pc, #44]	; (80006f0 <HAL_ADC_MspInit+0xb8>)
 80006c2:	f001 feed 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006c6:	2302      	movs	r3, #2
 80006c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ca:	2303      	movs	r3, #3
 80006cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	4806      	ldr	r0, [pc, #24]	; (80006f4 <HAL_ADC_MspInit+0xbc>)
 80006da:	f001 fee1 	bl	80024a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	; 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40012000 	.word	0x40012000
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020400 	.word	0x40020400

080006f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a38      	ldr	r2, [pc, #224]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b32      	ldr	r3, [pc, #200]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a31      	ldr	r2, [pc, #196]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <MX_GPIO_Init+0x100>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <MX_GPIO_Init+0x100>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a2a      	ldr	r2, [pc, #168]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a23      	ldr	r2, [pc, #140]	; (80007f8 <MX_GPIO_Init+0x100>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_GPIO_Init+0x100>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|BLU_Pin|GRN_Pin|RED_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8000784:	481d      	ldr	r0, [pc, #116]	; (80007fc <MX_GPIO_Init+0x104>)
 8000786:	f002 f827 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASERn_GPIO_Port, LASERn_Pin, GPIO_PIN_SET);
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000790:	481b      	ldr	r0, [pc, #108]	; (8000800 <MX_GPIO_Init+0x108>)
 8000792:	f002 f821 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4815      	ldr	r0, [pc, #84]	; (8000804 <MX_GPIO_Init+0x10c>)
 80007ae:	f001 fe77 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|BLU_Pin|GRN_Pin|RED_Pin;
 80007b2:	f44f 53c9 	mov.w	r3, #6432	; 0x1920
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <MX_GPIO_Init+0x104>)
 80007cc:	f001 fe68 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LASERn_Pin;
 80007d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LASERn_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_GPIO_Init+0x108>)
 80007ea:	f001 fe59 	bl	80024a0 <HAL_GPIO_Init>

}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	; 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020400 	.word	0x40020400
 8000804:	40020800 	.word	0x40020800

08000808 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b092      	sub	sp, #72	; 0x48
 800080c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f001 f82b 	bl	8001868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f93b 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000816:	f7ff ff6f 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800081a:	f000 feed 	bl	80015f8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800081e:	f000 fde5 	bl	80013ec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000822:	f000 febf 	bl	80015a4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000826:	f000 ff11 	bl	800164c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800082a:	f7ff feb3 	bl	8000594 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  int TIM2_Ch1_DCVAL = 1500;
 800082e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000832:	623b      	str	r3, [r7, #32]
  int TIM2_Ch2_DCVAL = 1500;
 8000834:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000838:	61fb      	str	r3, [r7, #28]
  pulse_width = 1500;
 800083a:	4b89      	ldr	r3, [pc, #548]	; (8000a60 <main+0x258>)
 800083c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000840:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start(&htim2);
 8000842:	4888      	ldr	r0, [pc, #544]	; (8000a64 <main+0x25c>)
 8000844:	f002 fcca 	bl	80031dc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000848:	2100      	movs	r1, #0
 800084a:	4886      	ldr	r0, [pc, #536]	; (8000a64 <main+0x25c>)
 800084c:	f002 fd7a 	bl	8003344 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000850:	2104      	movs	r1, #4
 8000852:	4884      	ldr	r0, [pc, #528]	; (8000a64 <main+0x25c>)
 8000854:	f002 fd76 	bl	8003344 <HAL_TIM_PWM_Start>

  TIM2->PSC = 16 - 1;
 8000858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800085c:	220f      	movs	r2, #15
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  TIM2->ARR = 20000 - 1;
 8000860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000864:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000868:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->CCR1 = TIM2_Ch1_DCVAL;
 800086a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086e:	6a3b      	ldr	r3, [r7, #32]
 8000870:	6353      	str	r3, [r2, #52]	; 0x34
  TIM2->CCR2 = TIM2_Ch2_DCVAL;
 8000872:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	6393      	str	r3, [r2, #56]	; 0x38

  toggle_laser(0);
 800087a:	2000      	movs	r0, #0
 800087c:	f000 fb1e 	bl	8000ebc <toggle_laser>

  /* startup code */
  int manual_mode = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  int automatic_mode = 1;
 8000884:	2301      	movs	r3, #1
 8000886:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0)
 8000888:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088c:	4876      	ldr	r0, [pc, #472]	; (8000a68 <main+0x260>)
 800088e:	f001 ff8b 	bl	80027a8 <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10a      	bne.n	80008ae <main+0xa6>
  {
    manual_mode = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2120      	movs	r1, #32
 80008a0:	4872      	ldr	r0, [pc, #456]	; (8000a6c <main+0x264>)
 80008a2:	f001 ff99 	bl	80027d8 <HAL_GPIO_WritePin>
    toggle_laser(1);
 80008a6:	2001      	movs	r0, #1
 80008a8:	f000 fb08 	bl	8000ebc <toggle_laser>
 80008ac:	e024      	b.n	80008f8 <main+0xf0>
  }
  else
  {
    automatic_mode = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	63bb      	str	r3, [r7, #56]	; 0x38
    manual_mode = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2120      	movs	r1, #32
 80008ba:	486c      	ldr	r0, [pc, #432]	; (8000a6c <main+0x264>)
 80008bc:	f001 ff8c 	bl	80027d8 <HAL_GPIO_WritePin>
    toggle_laser(0);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 fafb 	bl	8000ebc <toggle_laser>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (manual_mode)
 80008c6:	e017      	b.n	80008f8 <main+0xf0>
  {
    cycle_led();
 80008c8:	f000 f9bc 	bl	8000c44 <cycle_led>
    read_us100_dist();
 80008cc:	f000 f954 	bl	8000b78 <read_us100_dist>
    get_joystick();
 80008d0:	f000 f984 	bl	8000bdc <get_joystick>
    update_pulse_widths();
 80008d4:	f000 fa4c 	bl	8000d70 <update_pulse_widths>
    TIM2->CCR1 = pulse_width_y;
 80008d8:	4b65      	ldr	r3, [pc, #404]	; (8000a70 <main+0x268>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CCR2 = pulse_width_x;
 80008e2:	4b64      	ldr	r3, [pc, #400]	; (8000a74 <main+0x26c>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ea:	639a      	str	r2, [r3, #56]	; 0x38
    // send bearing and distance to computer
    send_bearing_and_distance();
 80008ec:	f000 fc60 	bl	80011b0 <send_bearing_and_distance>
    HAL_Delay(500);
 80008f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008f4:	f001 f82a 	bl	800194c <HAL_Delay>
  while (manual_mode)
 80008f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1e4      	bne.n	80008c8 <main+0xc0>
  }

  // we are not in manual mode, so we are in automatic mode

  /* setup for automatic mode */
  TIM2->CCR1 = 1500;
 80008fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000902:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000906:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 1500;
 8000908:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800090c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000910:	639a      	str	r2, [r3, #56]	; 0x38
  int num_objs = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
  int obj_detected = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	633b      	str	r3, [r7, #48]	; 0x30
  int rising_edge;
  int falling_edge;
  int num_samples = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  int avg_distance = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  int angular_width_ticks = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  int centerline_ticks = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  int prev;

  print_automatic_mode_header();
 800092a:	f000 fc9b 	bl	8001264 <print_automatic_mode_header>
//  read_us100_dist();
  set_led(RGB_GRN);
 800092e:	2001      	movs	r0, #1
 8000930:	f000 f9e0 	bl	8000cf4 <set_led>
  while (automatic_mode)
 8000934:	e085      	b.n	8000a42 <main+0x23a>
  {
    /* increment the sensor */
    TIM2->CCR2 = pulse_width_x;
 8000936:	4b4f      	ldr	r3, [pc, #316]	; (8000a74 <main+0x26c>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800093e:	639a      	str	r2, [r3, #56]	; 0x38
    prev = distance;
 8000940:	4b4d      	ldr	r3, [pc, #308]	; (8000a78 <main+0x270>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	b29b      	uxth	r3, r3
 8000946:	613b      	str	r3, [r7, #16]
    /* compute avg of current measurement */
//    read_us100_dist();

    /* check for significant jump */

    if (jump(prev, distance))
 8000948:	4b4b      	ldr	r3, [pc, #300]	; (8000a78 <main+0x270>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	b29b      	uxth	r3, r3
 800094e:	4619      	mov	r1, r3
 8000950:	6938      	ldr	r0, [r7, #16]
 8000952:	f000 fc6b 	bl	800122c <jump>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d057      	beq.n	8000a0c <main+0x204>
    {
      // set led red
      // set object = 1
      if (obj_detected)
 800095c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800095e:	2b00      	cmp	r3, #0
 8000960:	d04c      	beq.n	80009fc <main+0x1f4>
      {
        falling_edge = pulse_width_x;
 8000962:	4b44      	ldr	r3, [pc, #272]	; (8000a74 <main+0x26c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	60fb      	str	r3, [r7, #12]
        num_objs += 1;
 8000968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800096a:	3301      	adds	r3, #1
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
        obj_detected = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	633b      	str	r3, [r7, #48]	; 0x30
        set_led(RGB_GRN);
 8000972:	2001      	movs	r0, #1
 8000974:	f000 f9be 	bl	8000cf4 <set_led>
        // print output
        /*
         * angular width = rising - falling - 211
         * centerline (microseconds) = avg(rising, falling) - [(pb1+pb2)/2-1500]
         */
        angular_width_ticks = rising_edge - falling_edge - 211;
 8000978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	3bd3      	subs	r3, #211	; 0xd3
 8000980:	61bb      	str	r3, [r7, #24]
        centerline_ticks = (rising_edge + falling_edge) / 2 + 20;
 8000982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4413      	add	r3, r2
 8000988:	0fda      	lsrs	r2, r3, #31
 800098a:	4413      	add	r3, r2
 800098c:	105b      	asrs	r3, r3, #1
 800098e:	3314      	adds	r3, #20
 8000990:	617b      	str	r3, [r7, #20]
        avg_distance = avg_distance / num_samples;
 8000992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000996:	fb92 f3f3 	sdiv	r3, r2, r3
 800099a:	627b      	str	r3, [r7, #36]	; 0x24

        /* convert to degrees */
        int bearing_center = -(((9 * centerline_ticks) / 100) - 135);
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	4613      	mov	r3, r2
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	4413      	add	r3, r2
 80009a4:	4a35      	ldr	r2, [pc, #212]	; (8000a7c <main+0x274>)
 80009a6:	fb82 1203 	smull	r1, r2, r2, r3
 80009aa:	1152      	asrs	r2, r2, #5
 80009ac:	17db      	asrs	r3, r3, #31
 80009ae:	1a9b      	subs	r3, r3, r2
 80009b0:	3387      	adds	r3, #135	; 0x87
 80009b2:	60bb      	str	r3, [r7, #8]
        int angular_width = abs(9 * angular_width_ticks / 100);
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4613      	mov	r3, r2
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	4413      	add	r3, r2
 80009bc:	4a2f      	ldr	r2, [pc, #188]	; (8000a7c <main+0x274>)
 80009be:	fb82 1203 	smull	r1, r2, r2, r3
 80009c2:	1152      	asrs	r2, r2, #5
 80009c4:	17db      	asrs	r3, r3, #31
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bfb8      	it	lt
 80009cc:	425b      	neglt	r3, r3
 80009ce:	607b      	str	r3, [r7, #4]
        sprintf((char *)msg_buffer, "\r\n%d,\t%d\t%d\t%d", num_objs, bearing_center, avg_distance, angular_width);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009dc:	4928      	ldr	r1, [pc, #160]	; (8000a80 <main+0x278>)
 80009de:	4829      	ldr	r0, [pc, #164]	; (8000a84 <main+0x27c>)
 80009e0:	f004 face 	bl	8004f80 <siprintf>
        HAL_UART_Transmit(&huart6, msg_buffer, strlen((char *)msg_buffer), 500);
 80009e4:	4827      	ldr	r0, [pc, #156]	; (8000a84 <main+0x27c>)
 80009e6:	f7ff fbfb 	bl	80001e0 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009f2:	4924      	ldr	r1, [pc, #144]	; (8000a84 <main+0x27c>)
 80009f4:	4824      	ldr	r0, [pc, #144]	; (8000a88 <main+0x280>)
 80009f6:	f003 fa66 	bl	8003ec6 <HAL_UART_Transmit>
 80009fa:	e007      	b.n	8000a0c <main+0x204>
      }
      else
      {
        rising_edge = pulse_width_x;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <main+0x26c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
        obj_detected = 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
        set_led(RGB_RED);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 f974 	bl	8000cf4 <set_led>
      }
    }

    /* log information */
    if (obj_detected)
 8000a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d009      	beq.n	8000a26 <main+0x21e>
    {
      avg_distance += distance;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <main+0x270>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	4413      	add	r3, r2
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
      num_samples += 1;
 8000a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a22:	3301      	adds	r3, #1
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    HAL_Delay(200);
 8000a26:	20c8      	movs	r0, #200	; 0xc8
 8000a28:	f000 ff90 	bl	800194c <HAL_Delay>
    pulse_width_x += 20;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <main+0x26c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3314      	adds	r3, #20
 8000a32:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <main+0x26c>)
 8000a34:	6013      	str	r3, [r2, #0]
    if (pulse_width_x >= 2500)
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <main+0x26c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	dc04      	bgt.n	8000a4c <main+0x244>
  while (automatic_mode)
 8000a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	f47f af76 	bne.w	8000936 <main+0x12e>
 8000a4a:	e000      	b.n	8000a4e <main+0x246>
    {
      break;
 8000a4c:	bf00      	nop
    }
  }
  set_led(RGB_BLU);
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f000 f950 	bl	8000cf4 <set_led>
 8000a54:	2300      	movs	r3, #0
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3740      	adds	r7, #64	; 0x40
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000e8 	.word	0x200000e8
 8000a64:	200001c4 	.word	0x200001c4
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	20000004 	.word	0x20000004
 8000a74:	20000000 	.word	0x20000000
 8000a78:	200001ba 	.word	0x200001ba
 8000a7c:	51eb851f 	.word	0x51eb851f
 8000a80:	08005874 	.word	0x08005874
 8000a84:	200000ec 	.word	0x200000ec
 8000a88:	20000294 	.word	0x20000294

08000a8c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2230      	movs	r2, #48	; 0x30
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 fa68 	bl	8004f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <SystemClock_Config+0xb8>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <SystemClock_Config+0xb8>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <SystemClock_Config+0xb8>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <SystemClock_Config+0xbc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <SystemClock_Config+0xbc>)
 8000ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <SystemClock_Config+0xbc>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aec:	2302      	movs	r3, #2
 8000aee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af0:	2301      	movs	r3, #1
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2310      	movs	r3, #16
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afc:	f107 0320 	add.w	r3, r7, #32
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 fe83 	bl	800280c <HAL_RCC_OscConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b0c:	f000 fbc4 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b10:	230f      	movs	r3, #15
 8000b12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 f8e5 	bl	8002cfc <HAL_RCC_ClockConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b38:	f000 fbae 	bl	8001298 <Error_Handler>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3750      	adds	r7, #80	; 0x50
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40007000 	.word	0x40007000

08000b4c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <HAL_UART_RxCpltCallback+0x24>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d102      	bne.n	8000b64 <HAL_UART_RxCpltCallback+0x18>
  {
    us100_rx_flag = 01; // this flag is set to show that an receiver interrupt has occurred
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_UART_RxCpltCallback+0x28>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
  }
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40011000 	.word	0x40011000
 8000b74:	200001b4 	.word	0x200001b4

08000b78 <read_us100_dist>:

void read_us100_dist()
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart1, &us100_buffer, 2); // get the UART Receiver ready to receive data and then generate an interrupt
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	4912      	ldr	r1, [pc, #72]	; (8000bc8 <read_us100_dist+0x50>)
 8000b80:	4812      	ldr	r0, [pc, #72]	; (8000bcc <read_us100_dist+0x54>)
 8000b82:	f003 fa32 	bl	8003fea <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1, &cmd_dist, 1, 500);  // send out the command to the US-100 (TRIG Input)
 8000b86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4910      	ldr	r1, [pc, #64]	; (8000bd0 <read_us100_dist+0x58>)
 8000b8e:	480f      	ldr	r0, [pc, #60]	; (8000bcc <read_us100_dist+0x54>)
 8000b90:	f003 f999 	bl	8003ec6 <HAL_UART_Transmit>

  while (us100_rx_flag == (00))
 8000b94:	bf00      	nop
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <read_us100_dist+0x5c>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d0fa      	beq.n	8000b96 <read_us100_dist+0x1e>
  {
  }; // wait for the Flag to be set by the Interrupt Callback routine

  distance = (us100_buffer[0] << 8) + us100_buffer[1]; // convert the two indivual byts into a single 16 bit quantity
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <read_us100_dist+0x50>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <read_us100_dist+0x50>)
 8000bae:	785b      	ldrb	r3, [r3, #1]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	4413      	add	r3, r2
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <read_us100_dist+0x60>)
 8000bba:	801a      	strh	r2, [r3, #0]

  // this section is handled by send_dist_to_pc();
  us100_rx_flag = 00;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <read_us100_dist+0x5c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
  return;
 8000bc2:	bf00      	nop
}
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200001b8 	.word	0x200001b8
 8000bcc:	2000020c 	.word	0x2000020c
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	200001b4 	.word	0x200001b4
 8000bd8:	200001ba 	.word	0x200001ba

08000bdc <get_joystick>:
{
  return;
}

void get_joystick()
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  ADC_Select_CH(9);
 8000be0:	2009      	movs	r0, #9
 8000be2:	f000 f985 	bl	8000ef0 <ADC_Select_CH>
  HAL_ADC_Start(&hadc1);
 8000be6:	4814      	ldr	r0, [pc, #80]	; (8000c38 <get_joystick+0x5c>)
 8000be8:	f000 ff18 	bl	8001a1c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000bec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bf0:	4811      	ldr	r0, [pc, #68]	; (8000c38 <get_joystick+0x5c>)
 8000bf2:	f000 fffa 	bl	8001bea <HAL_ADC_PollForConversion>
  y = HAL_ADC_GetValue(&hadc1);
 8000bf6:	4810      	ldr	r0, [pc, #64]	; (8000c38 <get_joystick+0x5c>)
 8000bf8:	f001 f882 	bl	8001d00 <HAL_ADC_GetValue>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <get_joystick+0x60>)
 8000c02:	601a      	str	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <get_joystick+0x5c>)
 8000c06:	f000 ffbd 	bl	8001b84 <HAL_ADC_Stop>

  ADC_Select_CH(14);
 8000c0a:	200e      	movs	r0, #14
 8000c0c:	f000 f970 	bl	8000ef0 <ADC_Select_CH>
  HAL_ADC_Start(&hadc1);
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <get_joystick+0x5c>)
 8000c12:	f000 ff03 	bl	8001a1c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000c16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c1a:	4807      	ldr	r0, [pc, #28]	; (8000c38 <get_joystick+0x5c>)
 8000c1c:	f000 ffe5 	bl	8001bea <HAL_ADC_PollForConversion>
  x = HAL_ADC_GetValue(&hadc1);
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <get_joystick+0x5c>)
 8000c22:	f001 f86d 	bl	8001d00 <HAL_ADC_GetValue>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <get_joystick+0x64>)
 8000c2c:	601a      	str	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 8000c2e:	4802      	ldr	r0, [pc, #8]	; (8000c38 <get_joystick+0x5c>)
 8000c30:	f000 ffa8 	bl	8001b84 <HAL_ADC_Stop>
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  //  sprintf((char *)txd_msg_buffer, "\r\n x = %d, y = %d", x, y);
  //  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char *)txd_msg_buffer), 1000);
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200000a0 	.word	0x200000a0
 8000c3c:	20000010 	.word	0x20000010
 8000c40:	2000000c 	.word	0x2000000c

08000c44 <cycle_led>:

void cycle_led()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  switch (led_col)
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <cycle_led+0xa8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d84b      	bhi.n	8000ce8 <cycle_led+0xa4>
 8000c50:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <cycle_led+0x14>)
 8000c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c56:	bf00      	nop
 8000c58:	08000c69 	.word	0x08000c69
 8000c5c:	08000c89 	.word	0x08000c89
 8000c60:	08000ca9 	.word	0x08000ca9
 8000c64:	08000cc9 	.word	0x08000cc9
  {
  case 0:
    // all off
    // turn RED on
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LD2_Pin | BLU_Pin | GRN_Pin | RED_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8000c6e:	4820      	ldr	r0, [pc, #128]	; (8000cf0 <cycle_led+0xac>)
 8000c70:	f001 fdb2 	bl	80027d8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c7a:	481d      	ldr	r0, [pc, #116]	; (8000cf0 <cycle_led+0xac>)
 8000c7c:	f001 fdac 	bl	80027d8 <HAL_GPIO_WritePin>
    led_col = 1;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <cycle_led+0xa8>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
    break;
 8000c86:	e02f      	b.n	8000ce8 <cycle_led+0xa4>
  case 1:
    // red on
    // turn GRN on
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LD2_Pin | BLU_Pin | GRN_Pin | RED_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8000c8e:	4818      	ldr	r0, [pc, #96]	; (8000cf0 <cycle_led+0xac>)
 8000c90:	f001 fda2 	bl	80027d8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c9a:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <cycle_led+0xac>)
 8000c9c:	f001 fd9c 	bl	80027d8 <HAL_GPIO_WritePin>
    led_col = 2;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <cycle_led+0xa8>)
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	601a      	str	r2, [r3, #0]
    break;
 8000ca6:	e01f      	b.n	8000ce8 <cycle_led+0xa4>
  case 2:
    // grn on
    // turn BLU on
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LD2_Pin | BLU_Pin | GRN_Pin | RED_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8000cae:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <cycle_led+0xac>)
 8000cb0:	f001 fd92 	bl	80027d8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cba:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <cycle_led+0xac>)
 8000cbc:	f001 fd8c 	bl	80027d8 <HAL_GPIO_WritePin>
    led_col = 3;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <cycle_led+0xa8>)
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	601a      	str	r2, [r3, #0]
    break;
 8000cc6:	e00f      	b.n	8000ce8 <cycle_led+0xa4>
  case 3:
    // blu on
    // turn RED on
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LD2_Pin | BLU_Pin | GRN_Pin | RED_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <cycle_led+0xac>)
 8000cd0:	f001 fd82 	bl	80027d8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <cycle_led+0xac>)
 8000cdc:	f001 fd7c 	bl	80027d8 <HAL_GPIO_WritePin>
    led_col = 1;
 8000ce0:	4b02      	ldr	r3, [pc, #8]	; (8000cec <cycle_led+0xa8>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
    break;
 8000ce6:	bf00      	nop
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200001bc 	.word	0x200001bc
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <set_led>:

void set_led(int col)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  switch (col)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d023      	beq.n	8000d4a <set_led+0x56>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	dc2d      	bgt.n	8000d64 <set_led+0x70>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <set_led+0x22>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d00d      	beq.n	8000d30 <set_led+0x3c>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
    break;
  }
}
 8000d14:	e026      	b.n	8000d64 <set_led+0x70>
    HAL_GPIO_WritePin(GPIOA, LD2_Pin | BLU_Pin | GRN_Pin | RED_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8000d1c:	4813      	ldr	r0, [pc, #76]	; (8000d6c <set_led+0x78>)
 8000d1e:	f001 fd5b 	bl	80027d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d28:	4810      	ldr	r0, [pc, #64]	; (8000d6c <set_led+0x78>)
 8000d2a:	f001 fd55 	bl	80027d8 <HAL_GPIO_WritePin>
    break;
 8000d2e:	e019      	b.n	8000d64 <set_led+0x70>
    HAL_GPIO_WritePin(GPIOA, LD2_Pin | BLU_Pin | GRN_Pin | RED_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8000d36:	480d      	ldr	r0, [pc, #52]	; (8000d6c <set_led+0x78>)
 8000d38:	f001 fd4e 	bl	80027d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d42:	480a      	ldr	r0, [pc, #40]	; (8000d6c <set_led+0x78>)
 8000d44:	f001 fd48 	bl	80027d8 <HAL_GPIO_WritePin>
    break;
 8000d48:	e00c      	b.n	8000d64 <set_led+0x70>
    HAL_GPIO_WritePin(GPIOA, LD2_Pin | BLU_Pin | GRN_Pin | RED_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <set_led+0x78>)
 8000d52:	f001 fd41 	bl	80027d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <set_led+0x78>)
 8000d5e:	f001 fd3b 	bl	80027d8 <HAL_GPIO_WritePin>
    break;
 8000d62:	bf00      	nop
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40020000 	.word	0x40020000

08000d70 <update_pulse_widths>:

void update_pulse_widths()
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  // update x.
  if (0 <= x && x <= 68)
 8000d74:	4b4d      	ldr	r3, [pc, #308]	; (8000eac <update_pulse_widths+0x13c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db09      	blt.n	8000d90 <update_pulse_widths+0x20>
 8000d7c:	4b4b      	ldr	r3, [pc, #300]	; (8000eac <update_pulse_widths+0x13c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b44      	cmp	r3, #68	; 0x44
 8000d82:	dc05      	bgt.n	8000d90 <update_pulse_widths+0x20>
  {
    pulse_width_x -= 40;
 8000d84:	4b4a      	ldr	r3, [pc, #296]	; (8000eb0 <update_pulse_widths+0x140>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3b28      	subs	r3, #40	; 0x28
 8000d8a:	4a49      	ldr	r2, [pc, #292]	; (8000eb0 <update_pulse_widths+0x140>)
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e028      	b.n	8000de2 <update_pulse_widths+0x72>
  }
  else if (69 <= x && x <= 119)
 8000d90:	4b46      	ldr	r3, [pc, #280]	; (8000eac <update_pulse_widths+0x13c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b44      	cmp	r3, #68	; 0x44
 8000d96:	dd09      	ble.n	8000dac <update_pulse_widths+0x3c>
 8000d98:	4b44      	ldr	r3, [pc, #272]	; (8000eac <update_pulse_widths+0x13c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b77      	cmp	r3, #119	; 0x77
 8000d9e:	dc05      	bgt.n	8000dac <update_pulse_widths+0x3c>
  {
    pulse_width_x -= 20;
 8000da0:	4b43      	ldr	r3, [pc, #268]	; (8000eb0 <update_pulse_widths+0x140>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3b14      	subs	r3, #20
 8000da6:	4a42      	ldr	r2, [pc, #264]	; (8000eb0 <update_pulse_widths+0x140>)
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e01a      	b.n	8000de2 <update_pulse_widths+0x72>
  }
  else if (131 <= x && x <= 180)
 8000dac:	4b3f      	ldr	r3, [pc, #252]	; (8000eac <update_pulse_widths+0x13c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b82      	cmp	r3, #130	; 0x82
 8000db2:	dd09      	ble.n	8000dc8 <update_pulse_widths+0x58>
 8000db4:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <update_pulse_widths+0x13c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2bb4      	cmp	r3, #180	; 0xb4
 8000dba:	dc05      	bgt.n	8000dc8 <update_pulse_widths+0x58>
  {
    pulse_width_x += 20;
 8000dbc:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <update_pulse_widths+0x140>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3314      	adds	r3, #20
 8000dc2:	4a3b      	ldr	r2, [pc, #236]	; (8000eb0 <update_pulse_widths+0x140>)
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e00c      	b.n	8000de2 <update_pulse_widths+0x72>
  }
  else if (181 <= x && x <= 255)
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <update_pulse_widths+0x13c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2bb4      	cmp	r3, #180	; 0xb4
 8000dce:	dd08      	ble.n	8000de2 <update_pulse_widths+0x72>
 8000dd0:	4b36      	ldr	r3, [pc, #216]	; (8000eac <update_pulse_widths+0x13c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2bff      	cmp	r3, #255	; 0xff
 8000dd6:	dc04      	bgt.n	8000de2 <update_pulse_widths+0x72>
  {
    pulse_width_x += 40;
 8000dd8:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <update_pulse_widths+0x140>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3328      	adds	r3, #40	; 0x28
 8000dde:	4a34      	ldr	r2, [pc, #208]	; (8000eb0 <update_pulse_widths+0x140>)
 8000de0:	6013      	str	r3, [r2, #0]
  }

  // update y
  if (0 <= y && y <= 68)
 8000de2:	4b34      	ldr	r3, [pc, #208]	; (8000eb4 <update_pulse_widths+0x144>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db09      	blt.n	8000dfe <update_pulse_widths+0x8e>
 8000dea:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <update_pulse_widths+0x144>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b44      	cmp	r3, #68	; 0x44
 8000df0:	dc05      	bgt.n	8000dfe <update_pulse_widths+0x8e>
  {
    pulse_width_y -= 40;
 8000df2:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <update_pulse_widths+0x148>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	3b28      	subs	r3, #40	; 0x28
 8000df8:	4a2f      	ldr	r2, [pc, #188]	; (8000eb8 <update_pulse_widths+0x148>)
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	e028      	b.n	8000e50 <update_pulse_widths+0xe0>
  }
  else if (69 <= y && y <= 119)
 8000dfe:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <update_pulse_widths+0x144>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b44      	cmp	r3, #68	; 0x44
 8000e04:	dd09      	ble.n	8000e1a <update_pulse_widths+0xaa>
 8000e06:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <update_pulse_widths+0x144>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b77      	cmp	r3, #119	; 0x77
 8000e0c:	dc05      	bgt.n	8000e1a <update_pulse_widths+0xaa>
  {
    pulse_width_y -= 20;
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <update_pulse_widths+0x148>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3b14      	subs	r3, #20
 8000e14:	4a28      	ldr	r2, [pc, #160]	; (8000eb8 <update_pulse_widths+0x148>)
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	e01a      	b.n	8000e50 <update_pulse_widths+0xe0>
  }
  else if (131 <= y && y <= 180)
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <update_pulse_widths+0x144>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b82      	cmp	r3, #130	; 0x82
 8000e20:	dd09      	ble.n	8000e36 <update_pulse_widths+0xc6>
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <update_pulse_widths+0x144>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2bb4      	cmp	r3, #180	; 0xb4
 8000e28:	dc05      	bgt.n	8000e36 <update_pulse_widths+0xc6>
  {
    pulse_width_y += 20;
 8000e2a:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <update_pulse_widths+0x148>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3314      	adds	r3, #20
 8000e30:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <update_pulse_widths+0x148>)
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	e00c      	b.n	8000e50 <update_pulse_widths+0xe0>
  }
  else if (181 <= y && y <= 255)
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <update_pulse_widths+0x144>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2bb4      	cmp	r3, #180	; 0xb4
 8000e3c:	dd08      	ble.n	8000e50 <update_pulse_widths+0xe0>
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <update_pulse_widths+0x144>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2bff      	cmp	r3, #255	; 0xff
 8000e44:	dc04      	bgt.n	8000e50 <update_pulse_widths+0xe0>
  {
    pulse_width_y += 40;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <update_pulse_widths+0x148>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	3328      	adds	r3, #40	; 0x28
 8000e4c:	4a1a      	ldr	r2, [pc, #104]	; (8000eb8 <update_pulse_widths+0x148>)
 8000e4e:	6013      	str	r3, [r2, #0]
  }

  // bound checking
  if (pulse_width_x <= 500)
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <update_pulse_widths+0x140>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e58:	dc04      	bgt.n	8000e64 <update_pulse_widths+0xf4>
  {
    pulse_width_x = 500;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <update_pulse_widths+0x140>)
 8000e5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	e009      	b.n	8000e78 <update_pulse_widths+0x108>
  }
  else if (pulse_width_x >= 2500)
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <update_pulse_widths+0x140>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	dd03      	ble.n	8000e78 <update_pulse_widths+0x108>
  {
    pulse_width_x = 2500;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <update_pulse_widths+0x140>)
 8000e72:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000e76:	601a      	str	r2, [r3, #0]
  }

  if (pulse_width_y <= 500)
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <update_pulse_widths+0x148>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e80:	dc04      	bgt.n	8000e8c <update_pulse_widths+0x11c>
  {
    pulse_width_y = 500;
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <update_pulse_widths+0x148>)
 8000e84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e88:	601a      	str	r2, [r3, #0]
  {
    pulse_width_y = 2500;
  }

  // bound checking
}
 8000e8a:	e009      	b.n	8000ea0 <update_pulse_widths+0x130>
  else if (pulse_width_y >= 2500)
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <update_pulse_widths+0x148>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e94:	4293      	cmp	r3, r2
 8000e96:	dd03      	ble.n	8000ea0 <update_pulse_widths+0x130>
    pulse_width_y = 2500;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <update_pulse_widths+0x148>)
 8000e9a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000e9e:	601a      	str	r2, [r3, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2000000c 	.word	0x2000000c
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000010 	.word	0x20000010
 8000eb8:	20000004 	.word	0x20000004

08000ebc <toggle_laser>:

void toggle_laser(int state)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if (state == 1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d106      	bne.n	8000ed8 <toggle_laser+0x1c>
  {
    // on
    HAL_GPIO_WritePin(LASERn_GPIO_Port, LASERn_Pin, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed0:	4806      	ldr	r0, [pc, #24]	; (8000eec <toggle_laser+0x30>)
 8000ed2:	f001 fc81 	bl	80027d8 <HAL_GPIO_WritePin>
  else
  {
    // off
    HAL_GPIO_WritePin(LASERn_GPIO_Port, LASERn_Pin, GPIO_PIN_RESET);
  }
}
 8000ed6:	e005      	b.n	8000ee4 <toggle_laser+0x28>
    HAL_GPIO_WritePin(LASERn_GPIO_Port, LASERn_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ede:	4803      	ldr	r0, [pc, #12]	; (8000eec <toggle_laser+0x30>)
 8000ee0:	f001 fc7a 	bl	80027d8 <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40020400 	.word	0x40020400

08000ef0 <ADC_Select_CH>:
void ADC_Select_CH(int CH)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
  switch (CH)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	f200 814b 	bhi.w	80011a4 <ADC_Select_CH+0x2b4>
 8000f0e:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <ADC_Select_CH+0x24>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08000f55 	.word	0x08000f55
 8000f18:	08000f77 	.word	0x08000f77
 8000f1c:	08000f99 	.word	0x08000f99
 8000f20:	08000fbb 	.word	0x08000fbb
 8000f24:	08000fdd 	.word	0x08000fdd
 8000f28:	08000fff 	.word	0x08000fff
 8000f2c:	08001021 	.word	0x08001021
 8000f30:	08001043 	.word	0x08001043
 8000f34:	08001065 	.word	0x08001065
 8000f38:	08001087 	.word	0x08001087
 8000f3c:	080010a7 	.word	0x080010a7
 8000f40:	080010c7 	.word	0x080010c7
 8000f44:	080010e7 	.word	0x080010e7
 8000f48:	08001107 	.word	0x08001107
 8000f4c:	08001127 	.word	0x08001127
 8000f50:	08001147 	.word	0x08001147
  {
  case 0:
    sConfig.Channel = ADC_CHANNEL_0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	4619      	mov	r1, r3
 8000f62:	4892      	ldr	r0, [pc, #584]	; (80011ac <ADC_Select_CH+0x2bc>)
 8000f64:	f000 feda 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 80fb 	beq.w	8001166 <ADC_Select_CH+0x276>
    {
      Error_Handler();
 8000f70:	f000 f992 	bl	8001298 <Error_Handler>
    }
    break;
 8000f74:	e0f7      	b.n	8001166 <ADC_Select_CH+0x276>
  case 1:
    sConfig.Channel = ADC_CHANNEL_1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4619      	mov	r1, r3
 8000f84:	4889      	ldr	r0, [pc, #548]	; (80011ac <ADC_Select_CH+0x2bc>)
 8000f86:	f000 fec9 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 80ec 	beq.w	800116a <ADC_Select_CH+0x27a>
    {
      Error_Handler();
 8000f92:	f000 f981 	bl	8001298 <Error_Handler>
    }
    break;
 8000f96:	e0e8      	b.n	800116a <ADC_Select_CH+0x27a>
  case 2:
    sConfig.Channel = ADC_CHANNEL_2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4881      	ldr	r0, [pc, #516]	; (80011ac <ADC_Select_CH+0x2bc>)
 8000fa8:	f000 feb8 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 80dd 	beq.w	800116e <ADC_Select_CH+0x27e>
    {
      Error_Handler();
 8000fb4:	f000 f970 	bl	8001298 <Error_Handler>
    }
    break;
 8000fb8:	e0d9      	b.n	800116e <ADC_Select_CH+0x27e>
  case 3:
    sConfig.Channel = ADC_CHANNEL_3;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4878      	ldr	r0, [pc, #480]	; (80011ac <ADC_Select_CH+0x2bc>)
 8000fca:	f000 fea7 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f000 80ce 	beq.w	8001172 <ADC_Select_CH+0x282>
    {
      Error_Handler();
 8000fd6:	f000 f95f 	bl	8001298 <Error_Handler>
    }
    break;
 8000fda:	e0ca      	b.n	8001172 <ADC_Select_CH+0x282>
  case 4:
    sConfig.Channel = ADC_CHANNEL_4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4870      	ldr	r0, [pc, #448]	; (80011ac <ADC_Select_CH+0x2bc>)
 8000fec:	f000 fe96 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 80bf 	beq.w	8001176 <ADC_Select_CH+0x286>
    {
      Error_Handler();
 8000ff8:	f000 f94e 	bl	8001298 <Error_Handler>
    }
    break;
 8000ffc:	e0bb      	b.n	8001176 <ADC_Select_CH+0x286>
  case 5:
    sConfig.Channel = ADC_CHANNEL_5;
 8000ffe:	2305      	movs	r3, #5
 8001000:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	4619      	mov	r1, r3
 800100c:	4867      	ldr	r0, [pc, #412]	; (80011ac <ADC_Select_CH+0x2bc>)
 800100e:	f000 fe85 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80b0 	beq.w	800117a <ADC_Select_CH+0x28a>
    {
      Error_Handler();
 800101a:	f000 f93d 	bl	8001298 <Error_Handler>
    }
    break;
 800101e:	e0ac      	b.n	800117a <ADC_Select_CH+0x28a>
  case 6:
    sConfig.Channel = ADC_CHANNEL_6;
 8001020:	2306      	movs	r3, #6
 8001022:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8001024:	2301      	movs	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	4619      	mov	r1, r3
 800102e:	485f      	ldr	r0, [pc, #380]	; (80011ac <ADC_Select_CH+0x2bc>)
 8001030:	f000 fe74 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 80a1 	beq.w	800117e <ADC_Select_CH+0x28e>
    {
      Error_Handler();
 800103c:	f000 f92c 	bl	8001298 <Error_Handler>
    }
    break;
 8001040:	e09d      	b.n	800117e <ADC_Select_CH+0x28e>
  case 7:
    sConfig.Channel = ADC_CHANNEL_7;
 8001042:	2307      	movs	r3, #7
 8001044:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8001046:	2301      	movs	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	4619      	mov	r1, r3
 8001050:	4856      	ldr	r0, [pc, #344]	; (80011ac <ADC_Select_CH+0x2bc>)
 8001052:	f000 fe63 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 8092 	beq.w	8001182 <ADC_Select_CH+0x292>
    {
      Error_Handler();
 800105e:	f000 f91b 	bl	8001298 <Error_Handler>
    }
    break;
 8001062:	e08e      	b.n	8001182 <ADC_Select_CH+0x292>
  case 8:
    sConfig.Channel = ADC_CHANNEL_8;
 8001064:	2308      	movs	r3, #8
 8001066:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	4619      	mov	r1, r3
 8001072:	484e      	ldr	r0, [pc, #312]	; (80011ac <ADC_Select_CH+0x2bc>)
 8001074:	f000 fe52 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 8083 	beq.w	8001186 <ADC_Select_CH+0x296>
    {
      Error_Handler();
 8001080:	f000 f90a 	bl	8001298 <Error_Handler>
    }
    break;
 8001084:	e07f      	b.n	8001186 <ADC_Select_CH+0x296>
  case 9:
    sConfig.Channel = ADC_CHANNEL_9;
 8001086:	2309      	movs	r3, #9
 8001088:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 800108a:	2301      	movs	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	4619      	mov	r1, r3
 8001094:	4845      	ldr	r0, [pc, #276]	; (80011ac <ADC_Select_CH+0x2bc>)
 8001096:	f000 fe41 	bl	8001d1c <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d074      	beq.n	800118a <ADC_Select_CH+0x29a>
    {
      Error_Handler();
 80010a0:	f000 f8fa 	bl	8001298 <Error_Handler>
    }
    break;
 80010a4:	e071      	b.n	800118a <ADC_Select_CH+0x29a>
  case 10:
    sConfig.Channel = ADC_CHANNEL_10;
 80010a6:	230a      	movs	r3, #10
 80010a8:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4619      	mov	r1, r3
 80010b4:	483d      	ldr	r0, [pc, #244]	; (80011ac <ADC_Select_CH+0x2bc>)
 80010b6:	f000 fe31 	bl	8001d1c <HAL_ADC_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d066      	beq.n	800118e <ADC_Select_CH+0x29e>
    {
      Error_Handler();
 80010c0:	f000 f8ea 	bl	8001298 <Error_Handler>
    }
    break;
 80010c4:	e063      	b.n	800118e <ADC_Select_CH+0x29e>
  case 11:
    sConfig.Channel = ADC_CHANNEL_11;
 80010c6:	230b      	movs	r3, #11
 80010c8:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	4619      	mov	r1, r3
 80010d4:	4835      	ldr	r0, [pc, #212]	; (80011ac <ADC_Select_CH+0x2bc>)
 80010d6:	f000 fe21 	bl	8001d1c <HAL_ADC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d058      	beq.n	8001192 <ADC_Select_CH+0x2a2>
    {
      Error_Handler();
 80010e0:	f000 f8da 	bl	8001298 <Error_Handler>
    }
    break;
 80010e4:	e055      	b.n	8001192 <ADC_Select_CH+0x2a2>
  case 12:
    sConfig.Channel = ADC_CHANNEL_12;
 80010e6:	230c      	movs	r3, #12
 80010e8:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	4619      	mov	r1, r3
 80010f4:	482d      	ldr	r0, [pc, #180]	; (80011ac <ADC_Select_CH+0x2bc>)
 80010f6:	f000 fe11 	bl	8001d1c <HAL_ADC_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d04a      	beq.n	8001196 <ADC_Select_CH+0x2a6>
    {
      Error_Handler();
 8001100:	f000 f8ca 	bl	8001298 <Error_Handler>
    }
    break;
 8001104:	e047      	b.n	8001196 <ADC_Select_CH+0x2a6>
  case 13:
    sConfig.Channel = ADC_CHANNEL_13;
 8001106:	230d      	movs	r3, #13
 8001108:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 800110a:	2301      	movs	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	4619      	mov	r1, r3
 8001114:	4825      	ldr	r0, [pc, #148]	; (80011ac <ADC_Select_CH+0x2bc>)
 8001116:	f000 fe01 	bl	8001d1c <HAL_ADC_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d03c      	beq.n	800119a <ADC_Select_CH+0x2aa>
    {
      Error_Handler();
 8001120:	f000 f8ba 	bl	8001298 <Error_Handler>
    }
    break;
 8001124:	e039      	b.n	800119a <ADC_Select_CH+0x2aa>
  case 14:
    sConfig.Channel = ADC_CHANNEL_14;
 8001126:	230e      	movs	r3, #14
 8001128:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	4619      	mov	r1, r3
 8001134:	481d      	ldr	r0, [pc, #116]	; (80011ac <ADC_Select_CH+0x2bc>)
 8001136:	f000 fdf1 	bl	8001d1c <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d02e      	beq.n	800119e <ADC_Select_CH+0x2ae>
    {
      Error_Handler();
 8001140:	f000 f8aa 	bl	8001298 <Error_Handler>
    }
    break;
 8001144:	e02b      	b.n	800119e <ADC_Select_CH+0x2ae>
  case 15:
    sConfig.Channel = ADC_CHANNEL_15;
 8001146:	230f      	movs	r3, #15
 8001148:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 800114a:	2301      	movs	r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4619      	mov	r1, r3
 8001154:	4815      	ldr	r0, [pc, #84]	; (80011ac <ADC_Select_CH+0x2bc>)
 8001156:	f000 fde1 	bl	8001d1c <HAL_ADC_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d020      	beq.n	80011a2 <ADC_Select_CH+0x2b2>
    {
      Error_Handler();
 8001160:	f000 f89a 	bl	8001298 <Error_Handler>
    }
    break;
 8001164:	e01d      	b.n	80011a2 <ADC_Select_CH+0x2b2>
    break;
 8001166:	bf00      	nop
 8001168:	e01c      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 800116a:	bf00      	nop
 800116c:	e01a      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 800116e:	bf00      	nop
 8001170:	e018      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 8001172:	bf00      	nop
 8001174:	e016      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 8001176:	bf00      	nop
 8001178:	e014      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 800117a:	bf00      	nop
 800117c:	e012      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 800117e:	bf00      	nop
 8001180:	e010      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 8001182:	bf00      	nop
 8001184:	e00e      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 8001186:	bf00      	nop
 8001188:	e00c      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 800118a:	bf00      	nop
 800118c:	e00a      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 800118e:	bf00      	nop
 8001190:	e008      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 8001192:	bf00      	nop
 8001194:	e006      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 8001196:	bf00      	nop
 8001198:	e004      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 800119a:	bf00      	nop
 800119c:	e002      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 800119e:	bf00      	nop
 80011a0:	e000      	b.n	80011a4 <ADC_Select_CH+0x2b4>
    break;
 80011a2:	bf00      	nop
  }
}
 80011a4:	bf00      	nop
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200000a0 	.word	0x200000a0

080011b0 <send_bearing_and_distance>:

void send_bearing_and_distance()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
  int min_pw = 500;
 80011b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011ba:	617b      	str	r3, [r7, #20]
  int max_pw = 2500;
 80011bc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80011c0:	613b      	str	r3, [r7, #16]

  int min_deg = -90;
 80011c2:	f06f 0359 	mvn.w	r3, #89	; 0x59
 80011c6:	60fb      	str	r3, [r7, #12]
  int max_deg = 90;
 80011c8:	235a      	movs	r3, #90	; 0x5a
 80011ca:	60bb      	str	r3, [r7, #8]

  // acc deg = (max_deg - min_deg) / (max_pw - min_pw) * pw - 135?

  int deg = -(((9 * pulse_width_x) / 100) - 135);
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <send_bearing_and_distance+0x64>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4613      	mov	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4413      	add	r3, r2
 80011d6:	4a10      	ldr	r2, [pc, #64]	; (8001218 <send_bearing_and_distance+0x68>)
 80011d8:	fb82 1203 	smull	r1, r2, r2, r3
 80011dc:	1152      	asrs	r2, r2, #5
 80011de:	17db      	asrs	r3, r3, #31
 80011e0:	1a9b      	subs	r3, r3, r2
 80011e2:	3387      	adds	r3, #135	; 0x87
 80011e4:	607b      	str	r3, [r7, #4]

  sprintf((char *)msg_buffer, "\r\n Bearing = %d degrees, Distance Sensed (mm)= %d", deg, distance); // set up the report content                                                       // this is just used to slow down the sequence (user determined)
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <send_bearing_and_distance+0x6c>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	490c      	ldr	r1, [pc, #48]	; (8001220 <send_bearing_and_distance+0x70>)
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <send_bearing_and_distance+0x74>)
 80011f2:	f003 fec5 	bl	8004f80 <siprintf>
  HAL_UART_Transmit(&huart6, msg_buffer, strlen((char *)msg_buffer), 500);                           // send out the report
 80011f6:	480b      	ldr	r0, [pc, #44]	; (8001224 <send_bearing_and_distance+0x74>)
 80011f8:	f7fe fff2 	bl	80001e0 <strlen>
 80011fc:	4603      	mov	r3, r0
 80011fe:	b29a      	uxth	r2, r3
 8001200:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001204:	4907      	ldr	r1, [pc, #28]	; (8001224 <send_bearing_and_distance+0x74>)
 8001206:	4808      	ldr	r0, [pc, #32]	; (8001228 <send_bearing_and_distance+0x78>)
 8001208:	f002 fe5d 	bl	8003ec6 <HAL_UART_Transmit>
  return;
 800120c:	bf00      	nop
}
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000000 	.word	0x20000000
 8001218:	51eb851f 	.word	0x51eb851f
 800121c:	200001ba 	.word	0x200001ba
 8001220:	080058a0 	.word	0x080058a0
 8001224:	200000ec 	.word	0x200000ec
 8001228:	20000294 	.word	0x20000294

0800122c <jump>:

int jump(int A, int B)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  int ratio = A / B;
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	fb92 f3f3 	sdiv	r3, r2, r3
 800123e:	60fb      	str	r3, [r7, #12]
  if (ratio < -1.2)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001246:	da01      	bge.n	800124c <jump+0x20>
  {
    return 1; // jump
 8001248:	2301      	movs	r3, #1
 800124a:	e005      	b.n	8001258 <jump+0x2c>
  }
  else if (ratio > 1.2)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b01      	cmp	r3, #1
 8001250:	dd01      	ble.n	8001256 <jump+0x2a>
  {
    return 1; // jump
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <jump+0x2c>
  }
  else
  {
    return 0;
 8001256:	2300      	movs	r3, #0
  }
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <print_automatic_mode_header>:

void print_automatic_mode_header()
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  sprintf((char *)msg_buffer, "\r\n LS004 Team08,\tCalibrated FOV ,\tFOV Centerline correction (degrees)\nObject:(n),\t Bearing to Object CENTER: (degrees),\tDISTANCE: to Object (mm),\tObject Angular Width:(degrees)"); // set up the report content                                                       // this is just used to slow down the sequence (user determined)
 8001268:	4908      	ldr	r1, [pc, #32]	; (800128c <print_automatic_mode_header+0x28>)
 800126a:	4809      	ldr	r0, [pc, #36]	; (8001290 <print_automatic_mode_header+0x2c>)
 800126c:	f003 fe88 	bl	8004f80 <siprintf>
  HAL_UART_Transmit(&huart6, msg_buffer, strlen((char *)msg_buffer), 500);                                                                                                                                                 // send out the report
 8001270:	4807      	ldr	r0, [pc, #28]	; (8001290 <print_automatic_mode_header+0x2c>)
 8001272:	f7fe ffb5 	bl	80001e0 <strlen>
 8001276:	4603      	mov	r3, r0
 8001278:	b29a      	uxth	r2, r3
 800127a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800127e:	4904      	ldr	r1, [pc, #16]	; (8001290 <print_automatic_mode_header+0x2c>)
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <print_automatic_mode_header+0x30>)
 8001282:	f002 fe20 	bl	8003ec6 <HAL_UART_Transmit>
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	080058d4 	.word	0x080058d4
 8001290:	200000ec 	.word	0x200000ec
 8001294:	20000294 	.word	0x20000294

08001298 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <Error_Handler+0x8>
	...

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <HAL_MspInit+0x4c>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_MspInit+0x4c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <HAL_MspInit+0x4c>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_MspInit+0x4c>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012e2:	2007      	movs	r0, #7
 80012e4:	f001 f808 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40023800 	.word	0x40023800

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <NMI_Handler+0x4>

080012fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <MemManage_Handler+0x4>

08001306 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <UsageFault_Handler+0x4>

08001312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001340:	f000 fae4 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <USART1_IRQHandler+0x10>)
 800134e:	f002 fe7d 	bl	800404c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000020c 	.word	0x2000020c

0800135c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <_sbrk+0x5c>)
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <_sbrk+0x60>)
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <_sbrk+0x64>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <_sbrk+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	d207      	bcs.n	800139c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800138c:	f003 fdc6 	bl	8004f1c <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	220c      	movs	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e009      	b.n	80013b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <_sbrk+0x64>)
 80013ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20018000 	.word	0x20018000
 80013bc:	00000400 	.word	0x00000400
 80013c0:	200001c0 	.word	0x200001c0
 80013c4:	200002f0 	.word	0x200002f0

080013c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	f107 0320 	add.w	r3, r7, #32
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	615a      	str	r2, [r3, #20]
 800141a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800141c:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <MX_TIM2_Init+0x104>)
 800141e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001422:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001424:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <MX_TIM2_Init+0x104>)
 8001426:	220f      	movs	r2, #15
 8001428:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <MX_TIM2_Init+0x104>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001430:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <MX_TIM2_Init+0x104>)
 8001432:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001436:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <MX_TIM2_Init+0x104>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <MX_TIM2_Init+0x104>)
 8001440:	2280      	movs	r2, #128	; 0x80
 8001442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001444:	482a      	ldr	r0, [pc, #168]	; (80014f0 <MX_TIM2_Init+0x104>)
 8001446:	f001 fe79 	bl	800313c <HAL_TIM_Base_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001450:	f7ff ff22 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800145a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145e:	4619      	mov	r1, r3
 8001460:	4823      	ldr	r0, [pc, #140]	; (80014f0 <MX_TIM2_Init+0x104>)
 8001462:	f002 f8e1 	bl	8003628 <HAL_TIM_ConfigClockSource>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800146c:	f7ff ff14 	bl	8001298 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001470:	481f      	ldr	r0, [pc, #124]	; (80014f0 <MX_TIM2_Init+0x104>)
 8001472:	f001 ff0d 	bl	8003290 <HAL_TIM_PWM_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800147c:	f7ff ff0c 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	4619      	mov	r1, r3
 800148e:	4818      	ldr	r0, [pc, #96]	; (80014f0 <MX_TIM2_Init+0x104>)
 8001490:	f002 fc5e 	bl	8003d50 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800149a:	f7ff fefd 	bl	8001298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149e:	2360      	movs	r3, #96	; 0x60
 80014a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80014a2:	f240 13f3 	movw	r3, #499	; 0x1f3
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	480e      	ldr	r0, [pc, #56]	; (80014f0 <MX_TIM2_Init+0x104>)
 80014b8:	f001 fff4 	bl	80034a4 <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014c2:	f7ff fee9 	bl	8001298 <Error_Handler>
  }
  sConfigOC.Pulse = 2500-1;
 80014c6:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80014ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2204      	movs	r2, #4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4807      	ldr	r0, [pc, #28]	; (80014f0 <MX_TIM2_Init+0x104>)
 80014d4:	f001 ffe6 	bl	80034a4 <HAL_TIM_PWM_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 80014de:	f7ff fedb 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014e2:	4803      	ldr	r0, [pc, #12]	; (80014f0 <MX_TIM2_Init+0x104>)
 80014e4:	f000 f826 	bl	8001534 <HAL_TIM_MspPostInit>

}
 80014e8:	bf00      	nop
 80014ea:	3738      	adds	r7, #56	; 0x38
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200001c4 	.word	0x200001c4

080014f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001504:	d10d      	bne.n	8001522 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_TIM_Base_MspInit+0x3c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_TIM_Base_MspInit+0x3c>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_TIM_Base_MspInit+0x3c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001554:	d11d      	bne.n	8001592 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_TIM_MspPostInit+0x68>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <HAL_TIM_MspPostInit+0x68>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_TIM_MspPostInit+0x68>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001572:	2303      	movs	r3, #3
 8001574:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001582:	2301      	movs	r3, #1
 8001584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	4619      	mov	r1, r3
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <HAL_TIM_MspPostInit+0x6c>)
 800158e:	f000 ff87 	bl	80024a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3720      	adds	r7, #32
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020000 	.word	0x40020000

080015a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <MX_USART1_UART_Init+0x50>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015dc:	f002 fc26 	bl	8003e2c <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015e6:	f7ff fe57 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000020c 	.word	0x2000020c
 80015f4:	40011000 	.word	0x40011000

080015f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <MX_USART2_UART_Init+0x50>)
 8001600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 8001630:	f002 fbfc 	bl	8003e2c <HAL_UART_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800163a:	f7ff fe2d 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000250 	.word	0x20000250
 8001648:	40004400 	.word	0x40004400

0800164c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_USART6_UART_Init+0x4c>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <MX_USART6_UART_Init+0x50>)
 8001654:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MX_USART6_UART_Init+0x4c>)
 8001658:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800165c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_USART6_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_USART6_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_USART6_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_USART6_UART_Init+0x4c>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_USART6_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_USART6_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_USART6_UART_Init+0x4c>)
 8001684:	f002 fbd2 	bl	8003e2c <HAL_UART_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800168e:	f7ff fe03 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000294 	.word	0x20000294
 800169c:	40011400 	.word	0x40011400

080016a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	; 0x38
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a4f      	ldr	r2, [pc, #316]	; (80017fc <HAL_UART_MspInit+0x15c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d135      	bne.n	800172e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
 80016c6:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <HAL_UART_MspInit+0x160>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a4d      	ldr	r2, [pc, #308]	; (8001800 <HAL_UART_MspInit+0x160>)
 80016cc:	f043 0310 	orr.w	r3, r3, #16
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <HAL_UART_MspInit+0x160>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	623b      	str	r3, [r7, #32]
 80016dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
 80016e2:	4b47      	ldr	r3, [pc, #284]	; (8001800 <HAL_UART_MspInit+0x160>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a46      	ldr	r2, [pc, #280]	; (8001800 <HAL_UART_MspInit+0x160>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b44      	ldr	r3, [pc, #272]	; (8001800 <HAL_UART_MspInit+0x160>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800170c:	2307      	movs	r3, #7
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	483b      	ldr	r0, [pc, #236]	; (8001804 <HAL_UART_MspInit+0x164>)
 8001718:	f000 fec2 	bl	80024a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2025      	movs	r0, #37	; 0x25
 8001722:	f000 fdf4 	bl	800230e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001726:	2025      	movs	r0, #37	; 0x25
 8001728:	f000 fe0d 	bl	8002346 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800172c:	e062      	b.n	80017f4 <HAL_UART_MspInit+0x154>
  else if(uartHandle->Instance==USART2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a35      	ldr	r2, [pc, #212]	; (8001808 <HAL_UART_MspInit+0x168>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d12c      	bne.n	8001792 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_UART_MspInit+0x160>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <HAL_UART_MspInit+0x160>)
 8001742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001746:	6413      	str	r3, [r2, #64]	; 0x40
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_UART_MspInit+0x160>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	61bb      	str	r3, [r7, #24]
 8001752:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	4b29      	ldr	r3, [pc, #164]	; (8001800 <HAL_UART_MspInit+0x160>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	4a28      	ldr	r2, [pc, #160]	; (8001800 <HAL_UART_MspInit+0x160>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6313      	str	r3, [r2, #48]	; 0x30
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_UART_MspInit+0x160>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001770:	230c      	movs	r3, #12
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001780:	2307      	movs	r3, #7
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	4619      	mov	r1, r3
 800178a:	481e      	ldr	r0, [pc, #120]	; (8001804 <HAL_UART_MspInit+0x164>)
 800178c:	f000 fe88 	bl	80024a0 <HAL_GPIO_Init>
}
 8001790:	e030      	b.n	80017f4 <HAL_UART_MspInit+0x154>
  else if(uartHandle->Instance==USART6)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a1d      	ldr	r2, [pc, #116]	; (800180c <HAL_UART_MspInit+0x16c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d12b      	bne.n	80017f4 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_UART_MspInit+0x160>)
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	4a16      	ldr	r2, [pc, #88]	; (8001800 <HAL_UART_MspInit+0x160>)
 80017a6:	f043 0320 	orr.w	r3, r3, #32
 80017aa:	6453      	str	r3, [r2, #68]	; 0x44
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_UART_MspInit+0x160>)
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	f003 0320 	and.w	r3, r3, #32
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_UART_MspInit+0x160>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <HAL_UART_MspInit+0x160>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6313      	str	r3, [r2, #48]	; 0x30
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_UART_MspInit+0x160>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017d4:	23c0      	movs	r3, #192	; 0xc0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80017e4:	2308      	movs	r3, #8
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4808      	ldr	r0, [pc, #32]	; (8001810 <HAL_UART_MspInit+0x170>)
 80017f0:	f000 fe56 	bl	80024a0 <HAL_GPIO_Init>
}
 80017f4:	bf00      	nop
 80017f6:	3738      	adds	r7, #56	; 0x38
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40011000 	.word	0x40011000
 8001800:	40023800 	.word	0x40023800
 8001804:	40020000 	.word	0x40020000
 8001808:	40004400 	.word	0x40004400
 800180c:	40011400 	.word	0x40011400
 8001810:	40020800 	.word	0x40020800

08001814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800184c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001818:	480d      	ldr	r0, [pc, #52]	; (8001850 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800181a:	490e      	ldr	r1, [pc, #56]	; (8001854 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800181c:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001830:	4c0b      	ldr	r4, [pc, #44]	; (8001860 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800183e:	f7ff fdc3 	bl	80013c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001842:	f003 fb71 	bl	8004f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001846:	f7fe ffdf 	bl	8000808 <main>
  bx  lr    
 800184a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800184c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001858:	080059e4 	.word	0x080059e4
  ldr r2, =_sbss
 800185c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001860:	200002ec 	.word	0x200002ec

08001864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC_IRQHandler>
	...

08001868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <HAL_Init+0x40>)
 8001872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_Init+0x40>)
 800187e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_Init+0x40>)
 800188a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f000 fd31 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001896:	2000      	movs	r0, #0
 8001898:	f000 f808 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189c:	f7ff fd02 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x54>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x58>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fd49 	bl	8002362 <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f000 fd11 	bl	800230e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x5c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000014 	.word	0x20000014
 8001904:	2000001c 	.word	0x2000001c
 8001908:	20000018 	.word	0x20000018

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	2000001c 	.word	0x2000001c
 8001930:	200002d8 	.word	0x200002d8

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200002d8 	.word	0x200002d8

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff ffee 	bl	8001934 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_Delay+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001972:	bf00      	nop
 8001974:	f7ff ffde 	bl	8001934 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d8f7      	bhi.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000001c 	.word	0x2000001c

08001994 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e033      	b.n	8001a12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7fe fe40 	bl	8000638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d118      	bne.n	8001a04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019da:	f023 0302 	bic.w	r3, r3, #2
 80019de:	f043 0202 	orr.w	r2, r3, #2
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 faba 	bl	8001f60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f023 0303 	bic.w	r3, r3, #3
 80019fa:	f043 0201 	orr.w	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40
 8001a02:	e001      	b.n	8001a08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Start+0x1a>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e097      	b.n	8001b66 <HAL_ADC_Start+0x14a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d018      	beq.n	8001a7e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a5c:	4b45      	ldr	r3, [pc, #276]	; (8001b74 <HAL_ADC_Start+0x158>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <HAL_ADC_Start+0x15c>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	0c9a      	lsrs	r2, r3, #18
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a70:	e002      	b.n	8001a78 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f9      	bne.n	8001a72 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d15f      	bne.n	8001b4c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ab6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aca:	d106      	bne.n	8001ada <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	f023 0206 	bic.w	r2, r3, #6
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ad8:	e002      	b.n	8001ae0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_ADC_Start+0x160>)
 8001aea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001af4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10f      	bne.n	8001b22 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d129      	bne.n	8001b64 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	e020      	b.n	8001b64 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <HAL_ADC_Start+0x164>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d11b      	bne.n	8001b64 <HAL_ADC_Start+0x148>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d114      	bne.n	8001b64 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	e00b      	b.n	8001b64 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f043 0210 	orr.w	r2, r3, #16
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000014 	.word	0x20000014
 8001b78:	431bde83 	.word	0x431bde83
 8001b7c:	40012300 	.word	0x40012300
 8001b80:	40012000 	.word	0x40012000

08001b84 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_Stop+0x16>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e021      	b.n	8001bde <HAL_ADC_Stop+0x5a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	f043 0201 	orr.w	r2, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c06:	d113      	bne.n	8001c30 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c16:	d10b      	bne.n	8001c30 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f043 0220 	orr.w	r2, r3, #32
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e063      	b.n	8001cf8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c30:	f7ff fe80 	bl	8001934 <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c36:	e021      	b.n	8001c7c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3e:	d01d      	beq.n	8001c7c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_ADC_PollForConversion+0x6c>
 8001c46:	f7ff fe75 	bl	8001934 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d212      	bcs.n	8001c7c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d00b      	beq.n	8001c7c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f043 0204 	orr.w	r2, r3, #4
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e03d      	b.n	8001cf8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d1d6      	bne.n	8001c38 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f06f 0212 	mvn.w	r2, #18
 8001c92:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d123      	bne.n	8001cf6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d11f      	bne.n	8001cf6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d111      	bne.n	8001cf6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d105      	bne.n	8001cf6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x1c>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e105      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x228>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b09      	cmp	r3, #9
 8001d46:	d925      	bls.n	8001d94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68d9      	ldr	r1, [r3, #12]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3b1e      	subs	r3, #30
 8001d5e:	2207      	movs	r2, #7
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43da      	mvns	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	400a      	ands	r2, r1
 8001d6c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68d9      	ldr	r1, [r3, #12]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	4603      	mov	r3, r0
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4403      	add	r3, r0
 8001d86:	3b1e      	subs	r3, #30
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	e022      	b.n	8001dda <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6919      	ldr	r1, [r3, #16]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	2207      	movs	r2, #7
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	400a      	ands	r2, r1
 8001db6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6919      	ldr	r1, [r3, #16]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	4603      	mov	r3, r0
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4403      	add	r3, r0
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d824      	bhi.n	8001e2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	3b05      	subs	r3, #5
 8001df4:	221f      	movs	r2, #31
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	400a      	ands	r2, r1
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	4618      	mov	r0, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3b05      	subs	r3, #5
 8001e1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	635a      	str	r2, [r3, #52]	; 0x34
 8001e2a:	e04c      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	d824      	bhi.n	8001e7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	3b23      	subs	r3, #35	; 0x23
 8001e46:	221f      	movs	r2, #31
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43da      	mvns	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	400a      	ands	r2, r1
 8001e54:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3b23      	subs	r3, #35	; 0x23
 8001e70:	fa00 f203 	lsl.w	r2, r0, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e7c:	e023      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3b41      	subs	r3, #65	; 0x41
 8001e90:	221f      	movs	r2, #31
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	4618      	mov	r0, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b41      	subs	r3, #65	; 0x41
 8001eba:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ec6:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <HAL_ADC_ConfigChannel+0x234>)
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a21      	ldr	r2, [pc, #132]	; (8001f54 <HAL_ADC_ConfigChannel+0x238>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d109      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b12      	cmp	r3, #18
 8001eda:	d105      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a19      	ldr	r2, [pc, #100]	; (8001f54 <HAL_ADC_ConfigChannel+0x238>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d123      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x21e>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b10      	cmp	r3, #16
 8001ef8:	d003      	beq.n	8001f02 <HAL_ADC_ConfigChannel+0x1e6>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b11      	cmp	r3, #17
 8001f00:	d11b      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d111      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_ADC_ConfigChannel+0x23c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a10      	ldr	r2, [pc, #64]	; (8001f5c <HAL_ADC_ConfigChannel+0x240>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	0c9a      	lsrs	r2, r3, #18
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f2c:	e002      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f9      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40012300 	.word	0x40012300
 8001f54:	40012000 	.word	0x40012000
 8001f58:	20000014 	.word	0x20000014
 8001f5c:	431bde83 	.word	0x431bde83

08001f60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f68:	4b79      	ldr	r3, [pc, #484]	; (8002150 <ADC_Init+0x1f0>)
 8001f6a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	021a      	lsls	r2, r3, #8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6899      	ldr	r1, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	4a58      	ldr	r2, [pc, #352]	; (8002154 <ADC_Init+0x1f4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d022      	beq.n	800203e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002006:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6899      	ldr	r1, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002028:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6899      	ldr	r1, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	e00f      	b.n	800205e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800204c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800205c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0202 	bic.w	r2, r2, #2
 800206c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6899      	ldr	r1, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	7e1b      	ldrb	r3, [r3, #24]
 8002078:	005a      	lsls	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01b      	beq.n	80020c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800209a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	3b01      	subs	r3, #1
 80020b8:	035a      	lsls	r2, r3, #13
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	e007      	b.n	80020d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	051a      	lsls	r2, r3, #20
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6899      	ldr	r1, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002116:	025a      	lsls	r2, r3, #9
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6899      	ldr	r1, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	029a      	lsls	r2, r3, #10
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40012300 	.word	0x40012300
 8002154:	0f000001 	.word	0x0f000001

08002158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <__NVIC_GetPriorityGrouping+0x18>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	f003 0307 	and.w	r3, r3, #7
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	db0b      	blt.n	80021e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	4907      	ldr	r1, [pc, #28]	; (80021f4 <__NVIC_EnableIRQ+0x38>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2001      	movs	r0, #1
 80021de:	fa00 f202 	lsl.w	r2, r0, r2
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000e100 	.word	0xe000e100

080021f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	db0a      	blt.n	8002222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	490c      	ldr	r1, [pc, #48]	; (8002244 <__NVIC_SetPriority+0x4c>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	440b      	add	r3, r1
 800221c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002220:	e00a      	b.n	8002238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <__NVIC_SetPriority+0x50>)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3b04      	subs	r3, #4
 8002230:	0112      	lsls	r2, r2, #4
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	440b      	add	r3, r1
 8002236:	761a      	strb	r2, [r3, #24]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f1c3 0307 	rsb	r3, r3, #7
 8002266:	2b04      	cmp	r3, #4
 8002268:	bf28      	it	cs
 800226a:	2304      	movcs	r3, #4
 800226c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3304      	adds	r3, #4
 8002272:	2b06      	cmp	r3, #6
 8002274:	d902      	bls.n	800227c <NVIC_EncodePriority+0x30>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3b03      	subs	r3, #3
 800227a:	e000      	b.n	800227e <NVIC_EncodePriority+0x32>
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	401a      	ands	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002294:	f04f 31ff 	mov.w	r1, #4294967295
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43d9      	mvns	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	4313      	orrs	r3, r2
         );
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c4:	d301      	bcc.n	80022ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00f      	b.n	80022ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <SysTick_Config+0x40>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d2:	210f      	movs	r1, #15
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f7ff ff8e 	bl	80021f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <SysTick_Config+0x40>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <SysTick_Config+0x40>)
 80022e4:	2207      	movs	r2, #7
 80022e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	e000e010 	.word	0xe000e010

080022f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff29 	bl	8002158 <__NVIC_SetPriorityGrouping>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002320:	f7ff ff3e 	bl	80021a0 <__NVIC_GetPriorityGrouping>
 8002324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7ff ff8e 	bl	800224c <NVIC_EncodePriority>
 8002330:	4602      	mov	r2, r0
 8002332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff5d 	bl	80021f8 <__NVIC_SetPriority>
}
 800233e:	bf00      	nop
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff31 	bl	80021bc <__NVIC_EnableIRQ>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffa2 	bl	80022b4 <SysTick_Config>
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff fad4 	bl	8001934 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d008      	beq.n	80023ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e052      	b.n	8002452 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0216 	bic.w	r2, r2, #22
 80023ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d103      	bne.n	80023dc <HAL_DMA_Abort+0x62>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0208 	bic.w	r2, r2, #8
 80023ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0201 	bic.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023fc:	e013      	b.n	8002426 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023fe:	f7ff fa99 	bl	8001934 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b05      	cmp	r3, #5
 800240a:	d90c      	bls.n	8002426 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2203      	movs	r2, #3
 8002416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e015      	b.n	8002452 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1e4      	bne.n	80023fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	223f      	movs	r2, #63	; 0x3f
 800243a:	409a      	lsls	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d004      	beq.n	8002478 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e00c      	b.n	8002492 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2205      	movs	r2, #5
 800247c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	e159      	b.n	8002770 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	f040 8148 	bne.w	800276a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d005      	beq.n	80024f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d130      	bne.n	8002554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	2203      	movs	r2, #3
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 0201 	and.w	r2, r3, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b03      	cmp	r3, #3
 800255e:	d017      	beq.n	8002590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d123      	bne.n	80025e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	08da      	lsrs	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	69b9      	ldr	r1, [r7, #24]
 80025e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80a2 	beq.w	800276a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b57      	ldr	r3, [pc, #348]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4a56      	ldr	r2, [pc, #344]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002634:	6453      	str	r3, [r2, #68]	; 0x44
 8002636:	4b54      	ldr	r3, [pc, #336]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002642:	4a52      	ldr	r2, [pc, #328]	; (800278c <HAL_GPIO_Init+0x2ec>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a49      	ldr	r2, [pc, #292]	; (8002790 <HAL_GPIO_Init+0x2f0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x202>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a48      	ldr	r2, [pc, #288]	; (8002794 <HAL_GPIO_Init+0x2f4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x1fe>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a47      	ldr	r2, [pc, #284]	; (8002798 <HAL_GPIO_Init+0x2f8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x1fa>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a46      	ldr	r2, [pc, #280]	; (800279c <HAL_GPIO_Init+0x2fc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x1f6>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a45      	ldr	r2, [pc, #276]	; (80027a0 <HAL_GPIO_Init+0x300>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x1f2>
 800268e:	2304      	movs	r3, #4
 8002690:	e008      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 8002692:	2307      	movs	r3, #7
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 8002696:	2303      	movs	r3, #3
 8002698:	e004      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 800269a:	2302      	movs	r3, #2
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 80026a2:	2300      	movs	r3, #0
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	f002 0203 	and.w	r2, r2, #3
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	4093      	lsls	r3, r2
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b4:	4935      	ldr	r1, [pc, #212]	; (800278c <HAL_GPIO_Init+0x2ec>)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <HAL_GPIO_Init+0x304>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026e6:	4a2f      	ldr	r2, [pc, #188]	; (80027a4 <HAL_GPIO_Init+0x304>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ec:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <HAL_GPIO_Init+0x304>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002710:	4a24      	ldr	r2, [pc, #144]	; (80027a4 <HAL_GPIO_Init+0x304>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002716:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <HAL_GPIO_Init+0x304>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800273a:	4a1a      	ldr	r2, [pc, #104]	; (80027a4 <HAL_GPIO_Init+0x304>)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002740:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_GPIO_Init+0x304>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002764:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <HAL_GPIO_Init+0x304>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3301      	adds	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b0f      	cmp	r3, #15
 8002774:	f67f aea2 	bls.w	80024bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3724      	adds	r7, #36	; 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40013800 	.word	0x40013800
 8002790:	40020000 	.word	0x40020000
 8002794:	40020400 	.word	0x40020400
 8002798:	40020800 	.word	0x40020800
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40013c00 	.word	0x40013c00

080027a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e001      	b.n	80027ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
 80027e4:	4613      	mov	r3, r2
 80027e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e8:	787b      	ldrb	r3, [r7, #1]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f4:	e003      	b.n	80027fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	041a      	lsls	r2, r3, #16
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	619a      	str	r2, [r3, #24]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e267      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d075      	beq.n	8002916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800282a:	4b88      	ldr	r3, [pc, #544]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b04      	cmp	r3, #4
 8002834:	d00c      	beq.n	8002850 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002836:	4b85      	ldr	r3, [pc, #532]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800283e:	2b08      	cmp	r3, #8
 8002840:	d112      	bne.n	8002868 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002842:	4b82      	ldr	r3, [pc, #520]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800284e:	d10b      	bne.n	8002868 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	4b7e      	ldr	r3, [pc, #504]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05b      	beq.n	8002914 <HAL_RCC_OscConfig+0x108>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d157      	bne.n	8002914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e242      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002870:	d106      	bne.n	8002880 <HAL_RCC_OscConfig+0x74>
 8002872:	4b76      	ldr	r3, [pc, #472]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a75      	ldr	r2, [pc, #468]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e01d      	b.n	80028bc <HAL_RCC_OscConfig+0xb0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x98>
 800288a:	4b70      	ldr	r3, [pc, #448]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6f      	ldr	r2, [pc, #444]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b6d      	ldr	r3, [pc, #436]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a6c      	ldr	r2, [pc, #432]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0xb0>
 80028a4:	4b69      	ldr	r3, [pc, #420]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a68      	ldr	r2, [pc, #416]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b66      	ldr	r3, [pc, #408]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a65      	ldr	r2, [pc, #404]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7ff f836 	bl	8001934 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff f832 	bl	8001934 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e207      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	4b5b      	ldr	r3, [pc, #364]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0xc0>
 80028ea:	e014      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7ff f822 	bl	8001934 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f4:	f7ff f81e 	bl	8001934 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	; 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1f3      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002906:	4b51      	ldr	r3, [pc, #324]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0xe8>
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d063      	beq.n	80029ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002922:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292e:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002936:	2b08      	cmp	r3, #8
 8002938:	d11c      	bne.n	8002974 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800293a:	4b44      	ldr	r3, [pc, #272]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d116      	bne.n	8002974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002946:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_RCC_OscConfig+0x152>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d001      	beq.n	800295e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e1c7      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295e:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4937      	ldr	r1, [pc, #220]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	e03a      	b.n	80029ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800297c:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <HAL_RCC_OscConfig+0x244>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7fe ffd7 	bl	8001934 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298a:	f7fe ffd3 	bl	8001934 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1a8      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4925      	ldr	r1, [pc, #148]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
 80029bc:	e015      	b.n	80029ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_OscConfig+0x244>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe ffb6 	bl	8001934 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029cc:	f7fe ffb2 	bl	8001934 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e187      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d036      	beq.n	8002a64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_RCC_OscConfig+0x248>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe ff96 	bl	8001934 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0c:	f7fe ff92 	bl	8001934 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e167      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x200>
 8002a2a:	e01b      	b.n	8002a64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCC_OscConfig+0x248>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a32:	f7fe ff7f 	bl	8001934 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	e00e      	b.n	8002a58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7fe ff7b 	bl	8001934 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d907      	bls.n	8002a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e150      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	42470000 	.word	0x42470000
 8002a54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a58:	4b88      	ldr	r3, [pc, #544]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ea      	bne.n	8002a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8097 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a76:	4b81      	ldr	r3, [pc, #516]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	4b7d      	ldr	r3, [pc, #500]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	4a7c      	ldr	r2, [pc, #496]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a90:	6413      	str	r3, [r2, #64]	; 0x40
 8002a92:	4b7a      	ldr	r3, [pc, #488]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b77      	ldr	r3, [pc, #476]	; (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d118      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aae:	4b74      	ldr	r3, [pc, #464]	; (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a73      	ldr	r2, [pc, #460]	; (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aba:	f7fe ff3b 	bl	8001934 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac2:	f7fe ff37 	bl	8001934 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e10c      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	4b6a      	ldr	r3, [pc, #424]	; (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x2ea>
 8002ae8:	4b64      	ldr	r3, [pc, #400]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a63      	ldr	r2, [pc, #396]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	e01c      	b.n	8002b30 <HAL_RCC_OscConfig+0x324>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x30c>
 8002afe:	4b5f      	ldr	r3, [pc, #380]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a5e      	ldr	r2, [pc, #376]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0a:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a5b      	ldr	r2, [pc, #364]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0x324>
 8002b18:	4b58      	ldr	r3, [pc, #352]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a57      	ldr	r2, [pc, #348]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	4b55      	ldr	r3, [pc, #340]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4a54      	ldr	r2, [pc, #336]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b2a:	f023 0304 	bic.w	r3, r3, #4
 8002b2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7fe fefc 	bl	8001934 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fe fef8 	bl	8001934 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e0cb      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0ee      	beq.n	8002b40 <HAL_RCC_OscConfig+0x334>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b64:	f7fe fee6 	bl	8001934 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b6c:	f7fe fee2 	bl	8001934 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e0b5      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b82:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1ee      	bne.n	8002b6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b94:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	4a38      	ldr	r2, [pc, #224]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80a1 	beq.w	8002cec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002baa:	4b34      	ldr	r3, [pc, #208]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d05c      	beq.n	8002c70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d141      	bne.n	8002c42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <HAL_RCC_OscConfig+0x478>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe feb6 	bl	8001934 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe feb2 	bl	8001934 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e087      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	019b      	lsls	r3, r3, #6
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	085b      	lsrs	r3, r3, #1
 8002c02:	3b01      	subs	r3, #1
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	491b      	ldr	r1, [pc, #108]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x478>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fe8b 	bl	8001934 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c22:	f7fe fe87 	bl	8001934 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e05c      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x416>
 8002c40:	e054      	b.n	8002cec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <HAL_RCC_OscConfig+0x478>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe fe74 	bl	8001934 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fe fe70 	bl	8001934 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e045      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x444>
 8002c6e:	e03d      	b.n	8002cec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d107      	bne.n	8002c88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e038      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40007000 	.word	0x40007000
 8002c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_RCC_OscConfig+0x4ec>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d028      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d121      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d11a      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d111      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d107      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800

08002cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0cc      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b68      	ldr	r3, [pc, #416]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d90c      	bls.n	8002d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b65      	ldr	r3, [pc, #404]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0b8      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d020      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d50:	4b59      	ldr	r3, [pc, #356]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a58      	ldr	r2, [pc, #352]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d68:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a52      	ldr	r2, [pc, #328]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b50      	ldr	r3, [pc, #320]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	494d      	ldr	r1, [pc, #308]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d044      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d119      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e07f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b3f      	ldr	r3, [pc, #252]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e06f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dca:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e067      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dda:	4b37      	ldr	r3, [pc, #220]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4934      	ldr	r1, [pc, #208]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dec:	f7fe fda2 	bl	8001934 <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7fe fd9e 	bl	8001934 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e04f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	4b2b      	ldr	r3, [pc, #172]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 020c 	and.w	r2, r3, #12
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1eb      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d20c      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e032      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4916      	ldr	r1, [pc, #88]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	490e      	ldr	r1, [pc, #56]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e82:	f000 f821 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8002e86:	4602      	mov	r2, r0
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	490a      	ldr	r1, [pc, #40]	; (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e94:	5ccb      	ldrb	r3, [r1, r3]
 8002e96:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9a:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fd02 	bl	80018ac <HAL_InitTick>

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023c00 	.word	0x40023c00
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	08005988 	.word	0x08005988
 8002ec0:	20000014 	.word	0x20000014
 8002ec4:	20000018 	.word	0x20000018

08002ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ecc:	b094      	sub	sp, #80	; 0x50
 8002ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed8:	2300      	movs	r3, #0
 8002eda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee0:	4b79      	ldr	r3, [pc, #484]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d00d      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x40>
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	f200 80e1 	bhi.w	80030b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x34>
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002efa:	e0db      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002efc:	4b73      	ldr	r3, [pc, #460]	; (80030cc <HAL_RCC_GetSysClockFreq+0x204>)
 8002efe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f00:	e0db      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f02:	4b73      	ldr	r3, [pc, #460]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f06:	e0d8      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f08:	4b6f      	ldr	r3, [pc, #444]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f12:	4b6d      	ldr	r3, [pc, #436]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d063      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1e:	4b6a      	ldr	r3, [pc, #424]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	099b      	lsrs	r3, r3, #6
 8002f24:	2200      	movs	r2, #0
 8002f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f30:	633b      	str	r3, [r7, #48]	; 0x30
 8002f32:	2300      	movs	r3, #0
 8002f34:	637b      	str	r3, [r7, #52]	; 0x34
 8002f36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	462b      	mov	r3, r5
 8002f3e:	f04f 0000 	mov.w	r0, #0
 8002f42:	f04f 0100 	mov.w	r1, #0
 8002f46:	0159      	lsls	r1, r3, #5
 8002f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f4c:	0150      	lsls	r0, r2, #5
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4621      	mov	r1, r4
 8002f54:	1a51      	subs	r1, r2, r1
 8002f56:	6139      	str	r1, [r7, #16]
 8002f58:	4629      	mov	r1, r5
 8002f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f6c:	4659      	mov	r1, fp
 8002f6e:	018b      	lsls	r3, r1, #6
 8002f70:	4651      	mov	r1, sl
 8002f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f76:	4651      	mov	r1, sl
 8002f78:	018a      	lsls	r2, r1, #6
 8002f7a:	4651      	mov	r1, sl
 8002f7c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f80:	4659      	mov	r1, fp
 8002f82:	eb63 0901 	sbc.w	r9, r3, r1
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f9a:	4690      	mov	r8, r2
 8002f9c:	4699      	mov	r9, r3
 8002f9e:	4623      	mov	r3, r4
 8002fa0:	eb18 0303 	adds.w	r3, r8, r3
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	eb49 0303 	adc.w	r3, r9, r3
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fba:	4629      	mov	r1, r5
 8002fbc:	024b      	lsls	r3, r1, #9
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	024a      	lsls	r2, r1, #9
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fce:	2200      	movs	r2, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fd8:	f7fd f95a 	bl	8000290 <__aeabi_uldivmod>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe4:	e058      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe6:	4b38      	ldr	r3, [pc, #224]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	2200      	movs	r2, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ff6:	623b      	str	r3, [r7, #32]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003000:	4642      	mov	r2, r8
 8003002:	464b      	mov	r3, r9
 8003004:	f04f 0000 	mov.w	r0, #0
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	0159      	lsls	r1, r3, #5
 800300e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003012:	0150      	lsls	r0, r2, #5
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4641      	mov	r1, r8
 800301a:	ebb2 0a01 	subs.w	sl, r2, r1
 800301e:	4649      	mov	r1, r9
 8003020:	eb63 0b01 	sbc.w	fp, r3, r1
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003030:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003034:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003038:	ebb2 040a 	subs.w	r4, r2, sl
 800303c:	eb63 050b 	sbc.w	r5, r3, fp
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	00eb      	lsls	r3, r5, #3
 800304a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304e:	00e2      	lsls	r2, r4, #3
 8003050:	4614      	mov	r4, r2
 8003052:	461d      	mov	r5, r3
 8003054:	4643      	mov	r3, r8
 8003056:	18e3      	adds	r3, r4, r3
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	464b      	mov	r3, r9
 800305c:	eb45 0303 	adc.w	r3, r5, r3
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306e:	4629      	mov	r1, r5
 8003070:	028b      	lsls	r3, r1, #10
 8003072:	4621      	mov	r1, r4
 8003074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003078:	4621      	mov	r1, r4
 800307a:	028a      	lsls	r2, r1, #10
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003082:	2200      	movs	r2, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	61fa      	str	r2, [r7, #28]
 8003088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800308c:	f7fd f900 	bl	8000290 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4613      	mov	r3, r2
 8003096:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	3301      	adds	r3, #1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030b2:	e002      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_RCC_GetSysClockFreq+0x204>)
 80030b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3750      	adds	r7, #80	; 0x50
 80030c0:	46bd      	mov	sp, r7
 80030c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	00f42400 	.word	0x00f42400
 80030d0:	007a1200 	.word	0x007a1200

080030d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000014 	.word	0x20000014

080030ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030f0:	f7ff fff0 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	0a9b      	lsrs	r3, r3, #10
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4903      	ldr	r1, [pc, #12]	; (8003110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40023800 	.word	0x40023800
 8003110:	08005998 	.word	0x08005998

08003114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003118:	f7ff ffdc 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b05      	ldr	r3, [pc, #20]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	0b5b      	lsrs	r3, r3, #13
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4903      	ldr	r1, [pc, #12]	; (8003138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	08005998 	.word	0x08005998

0800313c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e041      	b.n	80031d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe f9c6 	bl	80014f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f000 fb1c 	bl	80037b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d001      	beq.n	80031f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e03c      	b.n	800326e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_TIM_Base_Start+0xa0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d018      	beq.n	8003238 <HAL_TIM_Base_Start+0x5c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320e:	d013      	beq.n	8003238 <HAL_TIM_Base_Start+0x5c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <HAL_TIM_Base_Start+0xa4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00e      	beq.n	8003238 <HAL_TIM_Base_Start+0x5c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a19      	ldr	r2, [pc, #100]	; (8003284 <HAL_TIM_Base_Start+0xa8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_TIM_Base_Start+0x5c>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a17      	ldr	r2, [pc, #92]	; (8003288 <HAL_TIM_Base_Start+0xac>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_TIM_Base_Start+0x5c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a16      	ldr	r2, [pc, #88]	; (800328c <HAL_TIM_Base_Start+0xb0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d111      	bne.n	800325c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b06      	cmp	r3, #6
 8003248:	d010      	beq.n	800326c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325a:	e007      	b.n	800326c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40014000 	.word	0x40014000

08003290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e041      	b.n	8003326 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f839 	bl	800332e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	4619      	mov	r1, r3
 80032ce:	4610      	mov	r0, r2
 80032d0:	f000 fa72 	bl	80037b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d109      	bne.n	8003368 <HAL_TIM_PWM_Start+0x24>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	e022      	b.n	80033ae <HAL_TIM_PWM_Start+0x6a>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b04      	cmp	r3, #4
 800336c:	d109      	bne.n	8003382 <HAL_TIM_PWM_Start+0x3e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	bf14      	ite	ne
 800337a:	2301      	movne	r3, #1
 800337c:	2300      	moveq	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	e015      	b.n	80033ae <HAL_TIM_PWM_Start+0x6a>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b08      	cmp	r3, #8
 8003386:	d109      	bne.n	800339c <HAL_TIM_PWM_Start+0x58>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	e008      	b.n	80033ae <HAL_TIM_PWM_Start+0x6a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e068      	b.n	8003488 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d104      	bne.n	80033c6 <HAL_TIM_PWM_Start+0x82>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c4:	e013      	b.n	80033ee <HAL_TIM_PWM_Start+0xaa>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d104      	bne.n	80033d6 <HAL_TIM_PWM_Start+0x92>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d4:	e00b      	b.n	80033ee <HAL_TIM_PWM_Start+0xaa>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d104      	bne.n	80033e6 <HAL_TIM_PWM_Start+0xa2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e4:	e003      	b.n	80033ee <HAL_TIM_PWM_Start+0xaa>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	6839      	ldr	r1, [r7, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fc84 	bl	8003d04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a23      	ldr	r2, [pc, #140]	; (8003490 <HAL_TIM_PWM_Start+0x14c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d107      	bne.n	8003416 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1d      	ldr	r2, [pc, #116]	; (8003490 <HAL_TIM_PWM_Start+0x14c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d018      	beq.n	8003452 <HAL_TIM_PWM_Start+0x10e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003428:	d013      	beq.n	8003452 <HAL_TIM_PWM_Start+0x10e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a19      	ldr	r2, [pc, #100]	; (8003494 <HAL_TIM_PWM_Start+0x150>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_TIM_PWM_Start+0x10e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a17      	ldr	r2, [pc, #92]	; (8003498 <HAL_TIM_PWM_Start+0x154>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_TIM_PWM_Start+0x10e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a16      	ldr	r2, [pc, #88]	; (800349c <HAL_TIM_PWM_Start+0x158>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_TIM_PWM_Start+0x10e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <HAL_TIM_PWM_Start+0x15c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d111      	bne.n	8003476 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b06      	cmp	r3, #6
 8003462:	d010      	beq.n	8003486 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	e007      	b.n	8003486 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40010000 	.word	0x40010000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40014000 	.word	0x40014000

080034a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034be:	2302      	movs	r3, #2
 80034c0:	e0ae      	b.n	8003620 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	f200 809f 	bhi.w	8003610 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034d2:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	0800350d 	.word	0x0800350d
 80034dc:	08003611 	.word	0x08003611
 80034e0:	08003611 	.word	0x08003611
 80034e4:	08003611 	.word	0x08003611
 80034e8:	0800354d 	.word	0x0800354d
 80034ec:	08003611 	.word	0x08003611
 80034f0:	08003611 	.word	0x08003611
 80034f4:	08003611 	.word	0x08003611
 80034f8:	0800358f 	.word	0x0800358f
 80034fc:	08003611 	.word	0x08003611
 8003500:	08003611 	.word	0x08003611
 8003504:	08003611 	.word	0x08003611
 8003508:	080035cf 	.word	0x080035cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f9d0 	bl	80038b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0208 	orr.w	r2, r2, #8
 8003526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0204 	bic.w	r2, r2, #4
 8003536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6999      	ldr	r1, [r3, #24]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	619a      	str	r2, [r3, #24]
      break;
 800354a:	e064      	b.n	8003616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fa16 	bl	8003984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6999      	ldr	r1, [r3, #24]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	021a      	lsls	r2, r3, #8
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	619a      	str	r2, [r3, #24]
      break;
 800358c:	e043      	b.n	8003616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fa61 	bl	8003a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0208 	orr.w	r2, r2, #8
 80035a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69da      	ldr	r2, [r3, #28]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0204 	bic.w	r2, r2, #4
 80035b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69d9      	ldr	r1, [r3, #28]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	61da      	str	r2, [r3, #28]
      break;
 80035cc:	e023      	b.n	8003616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 faab 	bl	8003b30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69d9      	ldr	r1, [r3, #28]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	021a      	lsls	r2, r3, #8
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	61da      	str	r2, [r3, #28]
      break;
 800360e:	e002      	b.n	8003616 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	75fb      	strb	r3, [r7, #23]
      break;
 8003614:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800361e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_TIM_ConfigClockSource+0x1c>
 8003640:	2302      	movs	r3, #2
 8003642:	e0b4      	b.n	80037ae <HAL_TIM_ConfigClockSource+0x186>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800366a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367c:	d03e      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0xd4>
 800367e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003682:	f200 8087 	bhi.w	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 8003686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368a:	f000 8086 	beq.w	800379a <HAL_TIM_ConfigClockSource+0x172>
 800368e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003692:	d87f      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 8003694:	2b70      	cmp	r3, #112	; 0x70
 8003696:	d01a      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0xa6>
 8003698:	2b70      	cmp	r3, #112	; 0x70
 800369a:	d87b      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 800369c:	2b60      	cmp	r3, #96	; 0x60
 800369e:	d050      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x11a>
 80036a0:	2b60      	cmp	r3, #96	; 0x60
 80036a2:	d877      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 80036a4:	2b50      	cmp	r3, #80	; 0x50
 80036a6:	d03c      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0xfa>
 80036a8:	2b50      	cmp	r3, #80	; 0x50
 80036aa:	d873      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d058      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0x13a>
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	d86f      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 80036b4:	2b30      	cmp	r3, #48	; 0x30
 80036b6:	d064      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x15a>
 80036b8:	2b30      	cmp	r3, #48	; 0x30
 80036ba:	d86b      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d060      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x15a>
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d867      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d05c      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x15a>
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d05a      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x15a>
 80036cc:	e062      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6899      	ldr	r1, [r3, #8]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f000 faf1 	bl	8003cc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	609a      	str	r2, [r3, #8]
      break;
 80036fa:	e04f      	b.n	800379c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6899      	ldr	r1, [r3, #8]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f000 fada 	bl	8003cc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800371e:	609a      	str	r2, [r3, #8]
      break;
 8003720:	e03c      	b.n	800379c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	461a      	mov	r2, r3
 8003730:	f000 fa4e 	bl	8003bd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2150      	movs	r1, #80	; 0x50
 800373a:	4618      	mov	r0, r3
 800373c:	f000 faa7 	bl	8003c8e <TIM_ITRx_SetConfig>
      break;
 8003740:	e02c      	b.n	800379c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	6859      	ldr	r1, [r3, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	461a      	mov	r2, r3
 8003750:	f000 fa6d 	bl	8003c2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2160      	movs	r1, #96	; 0x60
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fa97 	bl	8003c8e <TIM_ITRx_SetConfig>
      break;
 8003760:	e01c      	b.n	800379c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	461a      	mov	r2, r3
 8003770:	f000 fa2e 	bl	8003bd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2140      	movs	r1, #64	; 0x40
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fa87 	bl	8003c8e <TIM_ITRx_SetConfig>
      break;
 8003780:	e00c      	b.n	800379c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f000 fa7e 	bl	8003c8e <TIM_ITRx_SetConfig>
      break;
 8003792:	e003      	b.n	800379c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
      break;
 8003798:	e000      	b.n	800379c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800379a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a34      	ldr	r2, [pc, #208]	; (800389c <TIM_Base_SetConfig+0xe4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00f      	beq.n	80037f0 <TIM_Base_SetConfig+0x38>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d6:	d00b      	beq.n	80037f0 <TIM_Base_SetConfig+0x38>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a31      	ldr	r2, [pc, #196]	; (80038a0 <TIM_Base_SetConfig+0xe8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d007      	beq.n	80037f0 <TIM_Base_SetConfig+0x38>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a30      	ldr	r2, [pc, #192]	; (80038a4 <TIM_Base_SetConfig+0xec>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d003      	beq.n	80037f0 <TIM_Base_SetConfig+0x38>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a2f      	ldr	r2, [pc, #188]	; (80038a8 <TIM_Base_SetConfig+0xf0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d108      	bne.n	8003802 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a25      	ldr	r2, [pc, #148]	; (800389c <TIM_Base_SetConfig+0xe4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01b      	beq.n	8003842 <TIM_Base_SetConfig+0x8a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003810:	d017      	beq.n	8003842 <TIM_Base_SetConfig+0x8a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a22      	ldr	r2, [pc, #136]	; (80038a0 <TIM_Base_SetConfig+0xe8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <TIM_Base_SetConfig+0x8a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a21      	ldr	r2, [pc, #132]	; (80038a4 <TIM_Base_SetConfig+0xec>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00f      	beq.n	8003842 <TIM_Base_SetConfig+0x8a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a20      	ldr	r2, [pc, #128]	; (80038a8 <TIM_Base_SetConfig+0xf0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00b      	beq.n	8003842 <TIM_Base_SetConfig+0x8a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a1f      	ldr	r2, [pc, #124]	; (80038ac <TIM_Base_SetConfig+0xf4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d007      	beq.n	8003842 <TIM_Base_SetConfig+0x8a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a1e      	ldr	r2, [pc, #120]	; (80038b0 <TIM_Base_SetConfig+0xf8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d003      	beq.n	8003842 <TIM_Base_SetConfig+0x8a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <TIM_Base_SetConfig+0xfc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d108      	bne.n	8003854 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a08      	ldr	r2, [pc, #32]	; (800389c <TIM_Base_SetConfig+0xe4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d103      	bne.n	8003888 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	615a      	str	r2, [r3, #20]
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40010000 	.word	0x40010000
 80038a0:	40000400 	.word	0x40000400
 80038a4:	40000800 	.word	0x40000800
 80038a8:	40000c00 	.word	0x40000c00
 80038ac:	40014000 	.word	0x40014000
 80038b0:	40014400 	.word	0x40014400
 80038b4:	40014800 	.word	0x40014800

080038b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f023 0201 	bic.w	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0303 	bic.w	r3, r3, #3
 80038ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 0302 	bic.w	r3, r3, #2
 8003900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <TIM_OC1_SetConfig+0xc8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d10c      	bne.n	800392e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 0308 	bic.w	r3, r3, #8
 800391a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f023 0304 	bic.w	r3, r3, #4
 800392c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a13      	ldr	r2, [pc, #76]	; (8003980 <TIM_OC1_SetConfig+0xc8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d111      	bne.n	800395a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800393c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	621a      	str	r2, [r3, #32]
}
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40010000 	.word	0x40010000

08003984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0210 	bic.w	r2, r3, #16
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f023 0320 	bic.w	r3, r3, #32
 80039ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a1e      	ldr	r2, [pc, #120]	; (8003a58 <TIM_OC2_SetConfig+0xd4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d10d      	bne.n	8003a00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <TIM_OC2_SetConfig+0xd4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d113      	bne.n	8003a30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	621a      	str	r2, [r3, #32]
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40010000 	.word	0x40010000

08003a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0303 	bic.w	r3, r3, #3
 8003a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <TIM_OC3_SetConfig+0xd0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10d      	bne.n	8003ad6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a14      	ldr	r2, [pc, #80]	; (8003b2c <TIM_OC3_SetConfig+0xd0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d113      	bne.n	8003b06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	621a      	str	r2, [r3, #32]
}
 8003b20:	bf00      	nop
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	40010000 	.word	0x40010000

08003b30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	031b      	lsls	r3, r3, #12
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a10      	ldr	r2, [pc, #64]	; (8003bcc <TIM_OC4_SetConfig+0x9c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d109      	bne.n	8003ba4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	019b      	lsls	r3, r3, #6
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	621a      	str	r2, [r3, #32]
}
 8003bbe:	bf00      	nop
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40010000 	.word	0x40010000

08003bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f023 0201 	bic.w	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f023 030a 	bic.w	r3, r3, #10
 8003c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	621a      	str	r2, [r3, #32]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b087      	sub	sp, #28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f023 0210 	bic.w	r2, r3, #16
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	031b      	lsls	r3, r3, #12
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	621a      	str	r2, [r3, #32]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f043 0307 	orr.w	r3, r3, #7
 8003cb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	609a      	str	r2, [r3, #8]
}
 8003cb8:	bf00      	nop
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	021a      	lsls	r2, r3, #8
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	609a      	str	r2, [r3, #8]
}
 8003cf8:	bf00      	nop
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 031f 	and.w	r3, r3, #31
 8003d16:	2201      	movs	r2, #1
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1a      	ldr	r2, [r3, #32]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	401a      	ands	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a1a      	ldr	r2, [r3, #32]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	621a      	str	r2, [r3, #32]
}
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e050      	b.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d018      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db4:	d013      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a16      	ldr	r2, [pc, #88]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d10c      	bne.n	8003df8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40000800 	.word	0x40000800
 8003e24:	40000c00 	.word	0x40000c00
 8003e28:	40014000 	.word	0x40014000

08003e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e03f      	b.n	8003ebe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fd fc24 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2224      	movs	r2, #36	; 0x24
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fddf 	bl	8004a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b08a      	sub	sp, #40	; 0x28
 8003eca:	af02      	add	r7, sp, #8
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d17c      	bne.n	8003fe0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_UART_Transmit+0x2c>
 8003eec:	88fb      	ldrh	r3, [r7, #6]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e075      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_UART_Transmit+0x3e>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e06e      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2221      	movs	r2, #33	; 0x21
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f1a:	f7fd fd0b 	bl	8001934 <HAL_GetTick>
 8003f1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	88fa      	ldrh	r2, [r7, #6]
 8003f24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	88fa      	ldrh	r2, [r7, #6]
 8003f2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f34:	d108      	bne.n	8003f48 <HAL_UART_Transmit+0x82>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d104      	bne.n	8003f48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	e003      	b.n	8003f50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f58:	e02a      	b.n	8003fb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2200      	movs	r2, #0
 8003f62:	2180      	movs	r1, #128	; 0x80
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fb1f 	bl	80045a8 <UART_WaitOnFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e036      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	e007      	b.n	8003fa2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1cf      	bne.n	8003f5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2140      	movs	r1, #64	; 0x40
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 faef 	bl	80045a8 <UART_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e006      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e000      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fe0:	2302      	movs	r3, #2
  }
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b20      	cmp	r3, #32
 8004002:	d11d      	bne.n	8004040 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_UART_Receive_IT+0x26>
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e016      	b.n	8004042 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_UART_Receive_IT+0x38>
 800401e:	2302      	movs	r3, #2
 8004020:	e00f      	b.n	8004042 <HAL_UART_Receive_IT+0x58>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	461a      	mov	r2, r3
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fb24 	bl	8004684 <UART_Start_Receive_IT>
 800403c:	4603      	mov	r3, r0
 800403e:	e000      	b.n	8004042 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004040:	2302      	movs	r3, #2
  }
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b0ba      	sub	sp, #232	; 0xe8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004072:	2300      	movs	r3, #0
 8004074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004078:	2300      	movs	r3, #0
 800407a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800407e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800408a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10f      	bne.n	80040b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <HAL_UART_IRQHandler+0x66>
 800409e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fc07 	bl	80048be <UART_Receive_IT>
      return;
 80040b0:	e256      	b.n	8004560 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80de 	beq.w	8004278 <HAL_UART_IRQHandler+0x22c>
 80040bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80d1 	beq.w	8004278 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <HAL_UART_IRQHandler+0xae>
 80040e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f043 0201 	orr.w	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <HAL_UART_IRQHandler+0xd2>
 8004106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f043 0202 	orr.w	r2, r3, #2
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800411e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <HAL_UART_IRQHandler+0xf6>
 800412a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f043 0204 	orr.w	r2, r3, #4
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d011      	beq.n	8004172 <HAL_UART_IRQHandler+0x126>
 800414e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d105      	bne.n	8004166 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800415a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f043 0208 	orr.w	r2, r3, #8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 81ed 	beq.w	8004556 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800417c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_UART_IRQHandler+0x14e>
 8004188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fb92 	bl	80048be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b40      	cmp	r3, #64	; 0x40
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <HAL_UART_IRQHandler+0x17a>
 80041be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d04f      	beq.n	8004266 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fa9a 	bl	8004700 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d141      	bne.n	800425e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3314      	adds	r3, #20
 80041e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3314      	adds	r3, #20
 8004202:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004206:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800420a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004212:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800421e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1d9      	bne.n	80041da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422a:	2b00      	cmp	r3, #0
 800422c:	d013      	beq.n	8004256 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	4a7d      	ldr	r2, [pc, #500]	; (8004428 <HAL_UART_IRQHandler+0x3dc>)
 8004234:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe f90d 	bl	800245a <HAL_DMA_Abort_IT>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d016      	beq.n	8004274 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004250:	4610      	mov	r0, r2
 8004252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004254:	e00e      	b.n	8004274 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f990 	bl	800457c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425c:	e00a      	b.n	8004274 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f98c 	bl	800457c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004264:	e006      	b.n	8004274 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f988 	bl	800457c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004272:	e170      	b.n	8004556 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004274:	bf00      	nop
    return;
 8004276:	e16e      	b.n	8004556 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	2b01      	cmp	r3, #1
 800427e:	f040 814a 	bne.w	8004516 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8143 	beq.w	8004516 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 813c 	beq.w	8004516 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800429e:	2300      	movs	r3, #0
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60bb      	str	r3, [r7, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b40      	cmp	r3, #64	; 0x40
 80042c0:	f040 80b4 	bne.w	800442c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8140 	beq.w	800455a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042e2:	429a      	cmp	r2, r3
 80042e4:	f080 8139 	bcs.w	800455a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fa:	f000 8088 	beq.w	800440e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	330c      	adds	r3, #12
 8004304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800431c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	330c      	adds	r3, #12
 8004326:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800432a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800432e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004336:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1d9      	bne.n	80042fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3314      	adds	r3, #20
 8004350:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800435a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3314      	adds	r3, #20
 800436a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800436e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004372:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004376:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e1      	bne.n	800434a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3314      	adds	r3, #20
 800438c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800439c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3314      	adds	r3, #20
 80043a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e3      	bne.n	8004386 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043de:	f023 0310 	bic.w	r3, r3, #16
 80043e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80043f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80043f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e3      	bne.n	80043cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	4618      	mov	r0, r3
 800440a:	f7fd ffb6 	bl	800237a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004416:	b29b      	uxth	r3, r3
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	b29b      	uxth	r3, r3
 800441c:	4619      	mov	r1, r3
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f8b6 	bl	8004590 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004424:	e099      	b.n	800455a <HAL_UART_IRQHandler+0x50e>
 8004426:	bf00      	nop
 8004428:	080047c7 	.word	0x080047c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004434:	b29b      	uxth	r3, r3
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 808b 	beq.w	800455e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8086 	beq.w	800455e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	330c      	adds	r3, #12
 8004458:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004464:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004468:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	330c      	adds	r3, #12
 8004472:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004476:	647a      	str	r2, [r7, #68]	; 0x44
 8004478:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800447c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e3      	bne.n	8004452 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3314      	adds	r3, #20
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	623b      	str	r3, [r7, #32]
   return(result);
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3314      	adds	r3, #20
 80044aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044ae:	633a      	str	r2, [r7, #48]	; 0x30
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e3      	bne.n	800448a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	60fb      	str	r3, [r7, #12]
   return(result);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0310 	bic.w	r3, r3, #16
 80044e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80044f4:	61fa      	str	r2, [r7, #28]
 80044f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	69b9      	ldr	r1, [r7, #24]
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	617b      	str	r3, [r7, #20]
   return(result);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e3      	bne.n	80044d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004508:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800450c:	4619      	mov	r1, r3
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f83e 	bl	8004590 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004514:	e023      	b.n	800455e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451e:	2b00      	cmp	r3, #0
 8004520:	d009      	beq.n	8004536 <HAL_UART_IRQHandler+0x4ea>
 8004522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f95d 	bl	80047ee <UART_Transmit_IT>
    return;
 8004534:	e014      	b.n	8004560 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00e      	beq.n	8004560 <HAL_UART_IRQHandler+0x514>
 8004542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f99d 	bl	800488e <UART_EndTransmit_IT>
    return;
 8004554:	e004      	b.n	8004560 <HAL_UART_IRQHandler+0x514>
    return;
 8004556:	bf00      	nop
 8004558:	e002      	b.n	8004560 <HAL_UART_IRQHandler+0x514>
      return;
 800455a:	bf00      	nop
 800455c:	e000      	b.n	8004560 <HAL_UART_IRQHandler+0x514>
      return;
 800455e:	bf00      	nop
  }
}
 8004560:	37e8      	adds	r7, #232	; 0xe8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop

08004568 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b090      	sub	sp, #64	; 0x40
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b8:	e050      	b.n	800465c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d04c      	beq.n	800465c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80045c8:	f7fd f9b4 	bl	8001934 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d241      	bcs.n	800465c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	330c      	adds	r3, #12
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045f8:	637a      	str	r2, [r7, #52]	; 0x34
 80045fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e5      	bne.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3314      	adds	r3, #20
 8004612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	613b      	str	r3, [r7, #16]
   return(result);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	63bb      	str	r3, [r7, #56]	; 0x38
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3314      	adds	r3, #20
 800462a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800462c:	623a      	str	r2, [r7, #32]
 800462e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	69f9      	ldr	r1, [r7, #28]
 8004632:	6a3a      	ldr	r2, [r7, #32]
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	61bb      	str	r3, [r7, #24]
   return(result);
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e5      	bne.n	800460c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e00f      	b.n	800467c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	4013      	ands	r3, r2
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	429a      	cmp	r2, r3
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	429a      	cmp	r2, r3
 8004678:	d09f      	beq.n	80045ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3740      	adds	r7, #64	; 0x40
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	88fa      	ldrh	r2, [r7, #6]
 800469c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	88fa      	ldrh	r2, [r7, #6]
 80046a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2222      	movs	r2, #34	; 0x22
 80046ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0201 	orr.w	r2, r2, #1
 80046e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0220 	orr.w	r2, r2, #32
 80046f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004700:	b480      	push	{r7}
 8004702:	b095      	sub	sp, #84	; 0x54
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	330c      	adds	r3, #12
 800470e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004712:	e853 3f00 	ldrex	r3, [r3]
 8004716:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800471e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004728:	643a      	str	r2, [r7, #64]	; 0x40
 800472a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800472e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e5      	bne.n	8004708 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3314      	adds	r3, #20
 8004742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	61fb      	str	r3, [r7, #28]
   return(result);
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	64bb      	str	r3, [r7, #72]	; 0x48
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3314      	adds	r3, #20
 800475a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800475c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800475e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e5      	bne.n	800473c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	2b01      	cmp	r3, #1
 8004776:	d119      	bne.n	80047ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	330c      	adds	r3, #12
 800477e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	e853 3f00 	ldrex	r3, [r3]
 8004786:	60bb      	str	r3, [r7, #8]
   return(result);
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f023 0310 	bic.w	r3, r3, #16
 800478e:	647b      	str	r3, [r7, #68]	; 0x44
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	330c      	adds	r3, #12
 8004796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004798:	61ba      	str	r2, [r7, #24]
 800479a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	6979      	ldr	r1, [r7, #20]
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	613b      	str	r3, [r7, #16]
   return(result);
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e5      	bne.n	8004778 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047ba:	bf00      	nop
 80047bc:	3754      	adds	r7, #84	; 0x54
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f7ff fecb 	bl	800457c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b21      	cmp	r3, #33	; 0x21
 8004800:	d13e      	bne.n	8004880 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480a:	d114      	bne.n	8004836 <UART_Transmit_IT+0x48>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d110      	bne.n	8004836 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004828:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	1c9a      	adds	r2, r3, #2
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	621a      	str	r2, [r3, #32]
 8004834:	e008      	b.n	8004848 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	1c59      	adds	r1, r3, #1
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6211      	str	r1, [r2, #32]
 8004840:	781a      	ldrb	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29b      	uxth	r3, r3
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4619      	mov	r1, r3
 8004856:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10f      	bne.n	800487c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800486a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800487a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	e000      	b.n	8004882 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004880:	2302      	movs	r3, #2
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff fe5a 	bl	8004568 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b08c      	sub	sp, #48	; 0x30
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b22      	cmp	r3, #34	; 0x22
 80048d0:	f040 80ab 	bne.w	8004a2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048dc:	d117      	bne.n	800490e <UART_Receive_IT+0x50>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d113      	bne.n	800490e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004906:	1c9a      	adds	r2, r3, #2
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	629a      	str	r2, [r3, #40]	; 0x28
 800490c:	e026      	b.n	800495c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004914:	2300      	movs	r3, #0
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004920:	d007      	beq.n	8004932 <UART_Receive_IT+0x74>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <UART_Receive_IT+0x82>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	e008      	b.n	8004952 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800494c:	b2da      	uxtb	r2, r3
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29b      	uxth	r3, r3
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	4619      	mov	r1, r3
 800496a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800496c:	2b00      	cmp	r3, #0
 800496e:	d15a      	bne.n	8004a26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0220 	bic.w	r2, r2, #32
 800497e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800498e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695a      	ldr	r2, [r3, #20]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d135      	bne.n	8004a1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	330c      	adds	r3, #12
 80049bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	613b      	str	r3, [r7, #16]
   return(result);
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f023 0310 	bic.w	r3, r3, #16
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	330c      	adds	r3, #12
 80049d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d6:	623a      	str	r2, [r7, #32]
 80049d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	69f9      	ldr	r1, [r7, #28]
 80049dc:	6a3a      	ldr	r2, [r7, #32]
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e5      	bne.n	80049b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d10a      	bne.n	8004a0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a12:	4619      	mov	r1, r3
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff fdbb 	bl	8004590 <HAL_UARTEx_RxEventCallback>
 8004a1a:	e002      	b.n	8004a22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7fc f895 	bl	8000b4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	e002      	b.n	8004a2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e000      	b.n	8004a2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
  }
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3730      	adds	r7, #48	; 0x30
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a38:	b0c0      	sub	sp, #256	; 0x100
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	68d9      	ldr	r1, [r3, #12]
 8004a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	ea40 0301 	orr.w	r3, r0, r1
 8004a5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a8c:	f021 010c 	bic.w	r1, r1, #12
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aae:	6999      	ldr	r1, [r3, #24]
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	ea40 0301 	orr.w	r3, r0, r1
 8004aba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b8f      	ldr	r3, [pc, #572]	; (8004d00 <UART_SetConfig+0x2cc>)
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d005      	beq.n	8004ad4 <UART_SetConfig+0xa0>
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4b8d      	ldr	r3, [pc, #564]	; (8004d04 <UART_SetConfig+0x2d0>)
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d104      	bne.n	8004ade <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ad4:	f7fe fb1e 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8004ad8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004adc:	e003      	b.n	8004ae6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ade:	f7fe fb05 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004ae2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af0:	f040 810c 	bne.w	8004d0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af8:	2200      	movs	r2, #0
 8004afa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004afe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b06:	4622      	mov	r2, r4
 8004b08:	462b      	mov	r3, r5
 8004b0a:	1891      	adds	r1, r2, r2
 8004b0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b0e:	415b      	adcs	r3, r3
 8004b10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b16:	4621      	mov	r1, r4
 8004b18:	eb12 0801 	adds.w	r8, r2, r1
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	eb43 0901 	adc.w	r9, r3, r1
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b36:	4690      	mov	r8, r2
 8004b38:	4699      	mov	r9, r3
 8004b3a:	4623      	mov	r3, r4
 8004b3c:	eb18 0303 	adds.w	r3, r8, r3
 8004b40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b44:	462b      	mov	r3, r5
 8004b46:	eb49 0303 	adc.w	r3, r9, r3
 8004b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b62:	460b      	mov	r3, r1
 8004b64:	18db      	adds	r3, r3, r3
 8004b66:	653b      	str	r3, [r7, #80]	; 0x50
 8004b68:	4613      	mov	r3, r2
 8004b6a:	eb42 0303 	adc.w	r3, r2, r3
 8004b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b78:	f7fb fb8a 	bl	8000290 <__aeabi_uldivmod>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4b61      	ldr	r3, [pc, #388]	; (8004d08 <UART_SetConfig+0x2d4>)
 8004b82:	fba3 2302 	umull	r2, r3, r3, r2
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	011c      	lsls	r4, r3, #4
 8004b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	1891      	adds	r1, r2, r2
 8004ba2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ba4:	415b      	adcs	r3, r3
 8004ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bac:	4641      	mov	r1, r8
 8004bae:	eb12 0a01 	adds.w	sl, r2, r1
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	eb43 0b01 	adc.w	fp, r3, r1
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bcc:	4692      	mov	sl, r2
 8004bce:	469b      	mov	fp, r3
 8004bd0:	4643      	mov	r3, r8
 8004bd2:	eb1a 0303 	adds.w	r3, sl, r3
 8004bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bda:	464b      	mov	r3, r9
 8004bdc:	eb4b 0303 	adc.w	r3, fp, r3
 8004be0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bf0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	18db      	adds	r3, r3, r3
 8004bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8004bfe:	4613      	mov	r3, r2
 8004c00:	eb42 0303 	adc.w	r3, r2, r3
 8004c04:	647b      	str	r3, [r7, #68]	; 0x44
 8004c06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c0e:	f7fb fb3f 	bl	8000290 <__aeabi_uldivmod>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	4611      	mov	r1, r2
 8004c18:	4b3b      	ldr	r3, [pc, #236]	; (8004d08 <UART_SetConfig+0x2d4>)
 8004c1a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	2264      	movs	r2, #100	; 0x64
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	1acb      	subs	r3, r1, r3
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c2e:	4b36      	ldr	r3, [pc, #216]	; (8004d08 <UART_SetConfig+0x2d4>)
 8004c30:	fba3 2302 	umull	r2, r3, r3, r2
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c3c:	441c      	add	r4, r3
 8004c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c50:	4642      	mov	r2, r8
 8004c52:	464b      	mov	r3, r9
 8004c54:	1891      	adds	r1, r2, r2
 8004c56:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c58:	415b      	adcs	r3, r3
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c60:	4641      	mov	r1, r8
 8004c62:	1851      	adds	r1, r2, r1
 8004c64:	6339      	str	r1, [r7, #48]	; 0x30
 8004c66:	4649      	mov	r1, r9
 8004c68:	414b      	adcs	r3, r1
 8004c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c78:	4659      	mov	r1, fp
 8004c7a:	00cb      	lsls	r3, r1, #3
 8004c7c:	4651      	mov	r1, sl
 8004c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c82:	4651      	mov	r1, sl
 8004c84:	00ca      	lsls	r2, r1, #3
 8004c86:	4610      	mov	r0, r2
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	189b      	adds	r3, r3, r2
 8004c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c94:	464b      	mov	r3, r9
 8004c96:	460a      	mov	r2, r1
 8004c98:	eb42 0303 	adc.w	r3, r2, r3
 8004c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	18db      	adds	r3, r3, r3
 8004cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cba:	4613      	mov	r3, r2
 8004cbc:	eb42 0303 	adc.w	r3, r2, r3
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cca:	f7fb fae1 	bl	8000290 <__aeabi_uldivmod>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <UART_SetConfig+0x2d4>)
 8004cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	2164      	movs	r1, #100	; 0x64
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	3332      	adds	r3, #50	; 0x32
 8004ce6:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <UART_SetConfig+0x2d4>)
 8004ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cec:	095b      	lsrs	r3, r3, #5
 8004cee:	f003 0207 	and.w	r2, r3, #7
 8004cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4422      	add	r2, r4
 8004cfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cfc:	e105      	b.n	8004f0a <UART_SetConfig+0x4d6>
 8004cfe:	bf00      	nop
 8004d00:	40011000 	.word	0x40011000
 8004d04:	40011400 	.word	0x40011400
 8004d08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d1e:	4642      	mov	r2, r8
 8004d20:	464b      	mov	r3, r9
 8004d22:	1891      	adds	r1, r2, r2
 8004d24:	6239      	str	r1, [r7, #32]
 8004d26:	415b      	adcs	r3, r3
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d2e:	4641      	mov	r1, r8
 8004d30:	1854      	adds	r4, r2, r1
 8004d32:	4649      	mov	r1, r9
 8004d34:	eb43 0501 	adc.w	r5, r3, r1
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	00eb      	lsls	r3, r5, #3
 8004d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d46:	00e2      	lsls	r2, r4, #3
 8004d48:	4614      	mov	r4, r2
 8004d4a:	461d      	mov	r5, r3
 8004d4c:	4643      	mov	r3, r8
 8004d4e:	18e3      	adds	r3, r4, r3
 8004d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d54:	464b      	mov	r3, r9
 8004d56:	eb45 0303 	adc.w	r3, r5, r3
 8004d5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	008b      	lsls	r3, r1, #2
 8004d7e:	4621      	mov	r1, r4
 8004d80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d84:	4621      	mov	r1, r4
 8004d86:	008a      	lsls	r2, r1, #2
 8004d88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d8c:	f7fb fa80 	bl	8000290 <__aeabi_uldivmod>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4b60      	ldr	r3, [pc, #384]	; (8004f18 <UART_SetConfig+0x4e4>)
 8004d96:	fba3 2302 	umull	r2, r3, r3, r2
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	011c      	lsls	r4, r3, #4
 8004d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004da8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004dac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004db0:	4642      	mov	r2, r8
 8004db2:	464b      	mov	r3, r9
 8004db4:	1891      	adds	r1, r2, r2
 8004db6:	61b9      	str	r1, [r7, #24]
 8004db8:	415b      	adcs	r3, r3
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	1851      	adds	r1, r2, r1
 8004dc4:	6139      	str	r1, [r7, #16]
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	414b      	adcs	r3, r1
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dd8:	4659      	mov	r1, fp
 8004dda:	00cb      	lsls	r3, r1, #3
 8004ddc:	4651      	mov	r1, sl
 8004dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004de2:	4651      	mov	r1, sl
 8004de4:	00ca      	lsls	r2, r1, #3
 8004de6:	4610      	mov	r0, r2
 8004de8:	4619      	mov	r1, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	4642      	mov	r2, r8
 8004dee:	189b      	adds	r3, r3, r2
 8004df0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004df4:	464b      	mov	r3, r9
 8004df6:	460a      	mov	r2, r1
 8004df8:	eb42 0303 	adc.w	r3, r2, r3
 8004dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e18:	4649      	mov	r1, r9
 8004e1a:	008b      	lsls	r3, r1, #2
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e22:	4641      	mov	r1, r8
 8004e24:	008a      	lsls	r2, r1, #2
 8004e26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e2a:	f7fb fa31 	bl	8000290 <__aeabi_uldivmod>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4b39      	ldr	r3, [pc, #228]	; (8004f18 <UART_SetConfig+0x4e4>)
 8004e34:	fba3 1302 	umull	r1, r3, r3, r2
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	2164      	movs	r1, #100	; 0x64
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	3332      	adds	r3, #50	; 0x32
 8004e46:	4a34      	ldr	r2, [pc, #208]	; (8004f18 <UART_SetConfig+0x4e4>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e52:	441c      	add	r4, r3
 8004e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e58:	2200      	movs	r2, #0
 8004e5a:	673b      	str	r3, [r7, #112]	; 0x70
 8004e5c:	677a      	str	r2, [r7, #116]	; 0x74
 8004e5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e62:	4642      	mov	r2, r8
 8004e64:	464b      	mov	r3, r9
 8004e66:	1891      	adds	r1, r2, r2
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	415b      	adcs	r3, r3
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e72:	4641      	mov	r1, r8
 8004e74:	1851      	adds	r1, r2, r1
 8004e76:	6039      	str	r1, [r7, #0]
 8004e78:	4649      	mov	r1, r9
 8004e7a:	414b      	adcs	r3, r1
 8004e7c:	607b      	str	r3, [r7, #4]
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e8a:	4659      	mov	r1, fp
 8004e8c:	00cb      	lsls	r3, r1, #3
 8004e8e:	4651      	mov	r1, sl
 8004e90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e94:	4651      	mov	r1, sl
 8004e96:	00ca      	lsls	r2, r1, #3
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4642      	mov	r2, r8
 8004ea0:	189b      	adds	r3, r3, r2
 8004ea2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ea4:	464b      	mov	r3, r9
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	eb42 0303 	adc.w	r3, r2, r3
 8004eac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	663b      	str	r3, [r7, #96]	; 0x60
 8004eb8:	667a      	str	r2, [r7, #100]	; 0x64
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	008b      	lsls	r3, r1, #2
 8004eca:	4641      	mov	r1, r8
 8004ecc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ed0:	4641      	mov	r1, r8
 8004ed2:	008a      	lsls	r2, r1, #2
 8004ed4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ed8:	f7fb f9da 	bl	8000290 <__aeabi_uldivmod>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4b0d      	ldr	r3, [pc, #52]	; (8004f18 <UART_SetConfig+0x4e4>)
 8004ee2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	2164      	movs	r1, #100	; 0x64
 8004eea:	fb01 f303 	mul.w	r3, r1, r3
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	3332      	adds	r3, #50	; 0x32
 8004ef4:	4a08      	ldr	r2, [pc, #32]	; (8004f18 <UART_SetConfig+0x4e4>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	f003 020f 	and.w	r2, r3, #15
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4422      	add	r2, r4
 8004f08:	609a      	str	r2, [r3, #8]
}
 8004f0a:	bf00      	nop
 8004f0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f10:	46bd      	mov	sp, r7
 8004f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f16:	bf00      	nop
 8004f18:	51eb851f 	.word	0x51eb851f

08004f1c <__errno>:
 8004f1c:	4b01      	ldr	r3, [pc, #4]	; (8004f24 <__errno+0x8>)
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000020 	.word	0x20000020

08004f28 <__libc_init_array>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	4d0d      	ldr	r5, [pc, #52]	; (8004f60 <__libc_init_array+0x38>)
 8004f2c:	4c0d      	ldr	r4, [pc, #52]	; (8004f64 <__libc_init_array+0x3c>)
 8004f2e:	1b64      	subs	r4, r4, r5
 8004f30:	10a4      	asrs	r4, r4, #2
 8004f32:	2600      	movs	r6, #0
 8004f34:	42a6      	cmp	r6, r4
 8004f36:	d109      	bne.n	8004f4c <__libc_init_array+0x24>
 8004f38:	4d0b      	ldr	r5, [pc, #44]	; (8004f68 <__libc_init_array+0x40>)
 8004f3a:	4c0c      	ldr	r4, [pc, #48]	; (8004f6c <__libc_init_array+0x44>)
 8004f3c:	f000 fc8e 	bl	800585c <_init>
 8004f40:	1b64      	subs	r4, r4, r5
 8004f42:	10a4      	asrs	r4, r4, #2
 8004f44:	2600      	movs	r6, #0
 8004f46:	42a6      	cmp	r6, r4
 8004f48:	d105      	bne.n	8004f56 <__libc_init_array+0x2e>
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f50:	4798      	blx	r3
 8004f52:	3601      	adds	r6, #1
 8004f54:	e7ee      	b.n	8004f34 <__libc_init_array+0xc>
 8004f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5a:	4798      	blx	r3
 8004f5c:	3601      	adds	r6, #1
 8004f5e:	e7f2      	b.n	8004f46 <__libc_init_array+0x1e>
 8004f60:	080059dc 	.word	0x080059dc
 8004f64:	080059dc 	.word	0x080059dc
 8004f68:	080059dc 	.word	0x080059dc
 8004f6c:	080059e0 	.word	0x080059e0

08004f70 <memset>:
 8004f70:	4402      	add	r2, r0
 8004f72:	4603      	mov	r3, r0
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d100      	bne.n	8004f7a <memset+0xa>
 8004f78:	4770      	bx	lr
 8004f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7e:	e7f9      	b.n	8004f74 <memset+0x4>

08004f80 <siprintf>:
 8004f80:	b40e      	push	{r1, r2, r3}
 8004f82:	b500      	push	{lr}
 8004f84:	b09c      	sub	sp, #112	; 0x70
 8004f86:	ab1d      	add	r3, sp, #116	; 0x74
 8004f88:	9002      	str	r0, [sp, #8]
 8004f8a:	9006      	str	r0, [sp, #24]
 8004f8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f90:	4809      	ldr	r0, [pc, #36]	; (8004fb8 <siprintf+0x38>)
 8004f92:	9107      	str	r1, [sp, #28]
 8004f94:	9104      	str	r1, [sp, #16]
 8004f96:	4909      	ldr	r1, [pc, #36]	; (8004fbc <siprintf+0x3c>)
 8004f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f9c:	9105      	str	r1, [sp, #20]
 8004f9e:	6800      	ldr	r0, [r0, #0]
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	a902      	add	r1, sp, #8
 8004fa4:	f000 f868 	bl	8005078 <_svfiprintf_r>
 8004fa8:	9b02      	ldr	r3, [sp, #8]
 8004faa:	2200      	movs	r2, #0
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	b01c      	add	sp, #112	; 0x70
 8004fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fb4:	b003      	add	sp, #12
 8004fb6:	4770      	bx	lr
 8004fb8:	20000020 	.word	0x20000020
 8004fbc:	ffff0208 	.word	0xffff0208

08004fc0 <__ssputs_r>:
 8004fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	688e      	ldr	r6, [r1, #8]
 8004fc6:	429e      	cmp	r6, r3
 8004fc8:	4682      	mov	sl, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	4690      	mov	r8, r2
 8004fce:	461f      	mov	r7, r3
 8004fd0:	d838      	bhi.n	8005044 <__ssputs_r+0x84>
 8004fd2:	898a      	ldrh	r2, [r1, #12]
 8004fd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fd8:	d032      	beq.n	8005040 <__ssputs_r+0x80>
 8004fda:	6825      	ldr	r5, [r4, #0]
 8004fdc:	6909      	ldr	r1, [r1, #16]
 8004fde:	eba5 0901 	sub.w	r9, r5, r1
 8004fe2:	6965      	ldr	r5, [r4, #20]
 8004fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fec:	3301      	adds	r3, #1
 8004fee:	444b      	add	r3, r9
 8004ff0:	106d      	asrs	r5, r5, #1
 8004ff2:	429d      	cmp	r5, r3
 8004ff4:	bf38      	it	cc
 8004ff6:	461d      	movcc	r5, r3
 8004ff8:	0553      	lsls	r3, r2, #21
 8004ffa:	d531      	bpl.n	8005060 <__ssputs_r+0xa0>
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	f000 fb63 	bl	80056c8 <_malloc_r>
 8005002:	4606      	mov	r6, r0
 8005004:	b950      	cbnz	r0, 800501c <__ssputs_r+0x5c>
 8005006:	230c      	movs	r3, #12
 8005008:	f8ca 3000 	str.w	r3, [sl]
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005012:	81a3      	strh	r3, [r4, #12]
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501c:	6921      	ldr	r1, [r4, #16]
 800501e:	464a      	mov	r2, r9
 8005020:	f000 fabe 	bl	80055a0 <memcpy>
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800502a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	6126      	str	r6, [r4, #16]
 8005032:	6165      	str	r5, [r4, #20]
 8005034:	444e      	add	r6, r9
 8005036:	eba5 0509 	sub.w	r5, r5, r9
 800503a:	6026      	str	r6, [r4, #0]
 800503c:	60a5      	str	r5, [r4, #8]
 800503e:	463e      	mov	r6, r7
 8005040:	42be      	cmp	r6, r7
 8005042:	d900      	bls.n	8005046 <__ssputs_r+0x86>
 8005044:	463e      	mov	r6, r7
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	4632      	mov	r2, r6
 800504a:	4641      	mov	r1, r8
 800504c:	f000 fab6 	bl	80055bc <memmove>
 8005050:	68a3      	ldr	r3, [r4, #8]
 8005052:	1b9b      	subs	r3, r3, r6
 8005054:	60a3      	str	r3, [r4, #8]
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	4433      	add	r3, r6
 800505a:	6023      	str	r3, [r4, #0]
 800505c:	2000      	movs	r0, #0
 800505e:	e7db      	b.n	8005018 <__ssputs_r+0x58>
 8005060:	462a      	mov	r2, r5
 8005062:	f000 fba5 	bl	80057b0 <_realloc_r>
 8005066:	4606      	mov	r6, r0
 8005068:	2800      	cmp	r0, #0
 800506a:	d1e1      	bne.n	8005030 <__ssputs_r+0x70>
 800506c:	6921      	ldr	r1, [r4, #16]
 800506e:	4650      	mov	r0, sl
 8005070:	f000 fabe 	bl	80055f0 <_free_r>
 8005074:	e7c7      	b.n	8005006 <__ssputs_r+0x46>
	...

08005078 <_svfiprintf_r>:
 8005078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507c:	4698      	mov	r8, r3
 800507e:	898b      	ldrh	r3, [r1, #12]
 8005080:	061b      	lsls	r3, r3, #24
 8005082:	b09d      	sub	sp, #116	; 0x74
 8005084:	4607      	mov	r7, r0
 8005086:	460d      	mov	r5, r1
 8005088:	4614      	mov	r4, r2
 800508a:	d50e      	bpl.n	80050aa <_svfiprintf_r+0x32>
 800508c:	690b      	ldr	r3, [r1, #16]
 800508e:	b963      	cbnz	r3, 80050aa <_svfiprintf_r+0x32>
 8005090:	2140      	movs	r1, #64	; 0x40
 8005092:	f000 fb19 	bl	80056c8 <_malloc_r>
 8005096:	6028      	str	r0, [r5, #0]
 8005098:	6128      	str	r0, [r5, #16]
 800509a:	b920      	cbnz	r0, 80050a6 <_svfiprintf_r+0x2e>
 800509c:	230c      	movs	r3, #12
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	f04f 30ff 	mov.w	r0, #4294967295
 80050a4:	e0d1      	b.n	800524a <_svfiprintf_r+0x1d2>
 80050a6:	2340      	movs	r3, #64	; 0x40
 80050a8:	616b      	str	r3, [r5, #20]
 80050aa:	2300      	movs	r3, #0
 80050ac:	9309      	str	r3, [sp, #36]	; 0x24
 80050ae:	2320      	movs	r3, #32
 80050b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80050b8:	2330      	movs	r3, #48	; 0x30
 80050ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005264 <_svfiprintf_r+0x1ec>
 80050be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050c2:	f04f 0901 	mov.w	r9, #1
 80050c6:	4623      	mov	r3, r4
 80050c8:	469a      	mov	sl, r3
 80050ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050ce:	b10a      	cbz	r2, 80050d4 <_svfiprintf_r+0x5c>
 80050d0:	2a25      	cmp	r2, #37	; 0x25
 80050d2:	d1f9      	bne.n	80050c8 <_svfiprintf_r+0x50>
 80050d4:	ebba 0b04 	subs.w	fp, sl, r4
 80050d8:	d00b      	beq.n	80050f2 <_svfiprintf_r+0x7a>
 80050da:	465b      	mov	r3, fp
 80050dc:	4622      	mov	r2, r4
 80050de:	4629      	mov	r1, r5
 80050e0:	4638      	mov	r0, r7
 80050e2:	f7ff ff6d 	bl	8004fc0 <__ssputs_r>
 80050e6:	3001      	adds	r0, #1
 80050e8:	f000 80aa 	beq.w	8005240 <_svfiprintf_r+0x1c8>
 80050ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050ee:	445a      	add	r2, fp
 80050f0:	9209      	str	r2, [sp, #36]	; 0x24
 80050f2:	f89a 3000 	ldrb.w	r3, [sl]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 80a2 	beq.w	8005240 <_svfiprintf_r+0x1c8>
 80050fc:	2300      	movs	r3, #0
 80050fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005106:	f10a 0a01 	add.w	sl, sl, #1
 800510a:	9304      	str	r3, [sp, #16]
 800510c:	9307      	str	r3, [sp, #28]
 800510e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005112:	931a      	str	r3, [sp, #104]	; 0x68
 8005114:	4654      	mov	r4, sl
 8005116:	2205      	movs	r2, #5
 8005118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800511c:	4851      	ldr	r0, [pc, #324]	; (8005264 <_svfiprintf_r+0x1ec>)
 800511e:	f7fb f867 	bl	80001f0 <memchr>
 8005122:	9a04      	ldr	r2, [sp, #16]
 8005124:	b9d8      	cbnz	r0, 800515e <_svfiprintf_r+0xe6>
 8005126:	06d0      	lsls	r0, r2, #27
 8005128:	bf44      	itt	mi
 800512a:	2320      	movmi	r3, #32
 800512c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005130:	0711      	lsls	r1, r2, #28
 8005132:	bf44      	itt	mi
 8005134:	232b      	movmi	r3, #43	; 0x2b
 8005136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800513a:	f89a 3000 	ldrb.w	r3, [sl]
 800513e:	2b2a      	cmp	r3, #42	; 0x2a
 8005140:	d015      	beq.n	800516e <_svfiprintf_r+0xf6>
 8005142:	9a07      	ldr	r2, [sp, #28]
 8005144:	4654      	mov	r4, sl
 8005146:	2000      	movs	r0, #0
 8005148:	f04f 0c0a 	mov.w	ip, #10
 800514c:	4621      	mov	r1, r4
 800514e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005152:	3b30      	subs	r3, #48	; 0x30
 8005154:	2b09      	cmp	r3, #9
 8005156:	d94e      	bls.n	80051f6 <_svfiprintf_r+0x17e>
 8005158:	b1b0      	cbz	r0, 8005188 <_svfiprintf_r+0x110>
 800515a:	9207      	str	r2, [sp, #28]
 800515c:	e014      	b.n	8005188 <_svfiprintf_r+0x110>
 800515e:	eba0 0308 	sub.w	r3, r0, r8
 8005162:	fa09 f303 	lsl.w	r3, r9, r3
 8005166:	4313      	orrs	r3, r2
 8005168:	9304      	str	r3, [sp, #16]
 800516a:	46a2      	mov	sl, r4
 800516c:	e7d2      	b.n	8005114 <_svfiprintf_r+0x9c>
 800516e:	9b03      	ldr	r3, [sp, #12]
 8005170:	1d19      	adds	r1, r3, #4
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	9103      	str	r1, [sp, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	bfbb      	ittet	lt
 800517a:	425b      	neglt	r3, r3
 800517c:	f042 0202 	orrlt.w	r2, r2, #2
 8005180:	9307      	strge	r3, [sp, #28]
 8005182:	9307      	strlt	r3, [sp, #28]
 8005184:	bfb8      	it	lt
 8005186:	9204      	strlt	r2, [sp, #16]
 8005188:	7823      	ldrb	r3, [r4, #0]
 800518a:	2b2e      	cmp	r3, #46	; 0x2e
 800518c:	d10c      	bne.n	80051a8 <_svfiprintf_r+0x130>
 800518e:	7863      	ldrb	r3, [r4, #1]
 8005190:	2b2a      	cmp	r3, #42	; 0x2a
 8005192:	d135      	bne.n	8005200 <_svfiprintf_r+0x188>
 8005194:	9b03      	ldr	r3, [sp, #12]
 8005196:	1d1a      	adds	r2, r3, #4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	9203      	str	r2, [sp, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	bfb8      	it	lt
 80051a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80051a4:	3402      	adds	r4, #2
 80051a6:	9305      	str	r3, [sp, #20]
 80051a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005274 <_svfiprintf_r+0x1fc>
 80051ac:	7821      	ldrb	r1, [r4, #0]
 80051ae:	2203      	movs	r2, #3
 80051b0:	4650      	mov	r0, sl
 80051b2:	f7fb f81d 	bl	80001f0 <memchr>
 80051b6:	b140      	cbz	r0, 80051ca <_svfiprintf_r+0x152>
 80051b8:	2340      	movs	r3, #64	; 0x40
 80051ba:	eba0 000a 	sub.w	r0, r0, sl
 80051be:	fa03 f000 	lsl.w	r0, r3, r0
 80051c2:	9b04      	ldr	r3, [sp, #16]
 80051c4:	4303      	orrs	r3, r0
 80051c6:	3401      	adds	r4, #1
 80051c8:	9304      	str	r3, [sp, #16]
 80051ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ce:	4826      	ldr	r0, [pc, #152]	; (8005268 <_svfiprintf_r+0x1f0>)
 80051d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051d4:	2206      	movs	r2, #6
 80051d6:	f7fb f80b 	bl	80001f0 <memchr>
 80051da:	2800      	cmp	r0, #0
 80051dc:	d038      	beq.n	8005250 <_svfiprintf_r+0x1d8>
 80051de:	4b23      	ldr	r3, [pc, #140]	; (800526c <_svfiprintf_r+0x1f4>)
 80051e0:	bb1b      	cbnz	r3, 800522a <_svfiprintf_r+0x1b2>
 80051e2:	9b03      	ldr	r3, [sp, #12]
 80051e4:	3307      	adds	r3, #7
 80051e6:	f023 0307 	bic.w	r3, r3, #7
 80051ea:	3308      	adds	r3, #8
 80051ec:	9303      	str	r3, [sp, #12]
 80051ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f0:	4433      	add	r3, r6
 80051f2:	9309      	str	r3, [sp, #36]	; 0x24
 80051f4:	e767      	b.n	80050c6 <_svfiprintf_r+0x4e>
 80051f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80051fa:	460c      	mov	r4, r1
 80051fc:	2001      	movs	r0, #1
 80051fe:	e7a5      	b.n	800514c <_svfiprintf_r+0xd4>
 8005200:	2300      	movs	r3, #0
 8005202:	3401      	adds	r4, #1
 8005204:	9305      	str	r3, [sp, #20]
 8005206:	4619      	mov	r1, r3
 8005208:	f04f 0c0a 	mov.w	ip, #10
 800520c:	4620      	mov	r0, r4
 800520e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005212:	3a30      	subs	r2, #48	; 0x30
 8005214:	2a09      	cmp	r2, #9
 8005216:	d903      	bls.n	8005220 <_svfiprintf_r+0x1a8>
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0c5      	beq.n	80051a8 <_svfiprintf_r+0x130>
 800521c:	9105      	str	r1, [sp, #20]
 800521e:	e7c3      	b.n	80051a8 <_svfiprintf_r+0x130>
 8005220:	fb0c 2101 	mla	r1, ip, r1, r2
 8005224:	4604      	mov	r4, r0
 8005226:	2301      	movs	r3, #1
 8005228:	e7f0      	b.n	800520c <_svfiprintf_r+0x194>
 800522a:	ab03      	add	r3, sp, #12
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	462a      	mov	r2, r5
 8005230:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <_svfiprintf_r+0x1f8>)
 8005232:	a904      	add	r1, sp, #16
 8005234:	4638      	mov	r0, r7
 8005236:	f3af 8000 	nop.w
 800523a:	1c42      	adds	r2, r0, #1
 800523c:	4606      	mov	r6, r0
 800523e:	d1d6      	bne.n	80051ee <_svfiprintf_r+0x176>
 8005240:	89ab      	ldrh	r3, [r5, #12]
 8005242:	065b      	lsls	r3, r3, #25
 8005244:	f53f af2c 	bmi.w	80050a0 <_svfiprintf_r+0x28>
 8005248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800524a:	b01d      	add	sp, #116	; 0x74
 800524c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005250:	ab03      	add	r3, sp, #12
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	462a      	mov	r2, r5
 8005256:	4b06      	ldr	r3, [pc, #24]	; (8005270 <_svfiprintf_r+0x1f8>)
 8005258:	a904      	add	r1, sp, #16
 800525a:	4638      	mov	r0, r7
 800525c:	f000 f87a 	bl	8005354 <_printf_i>
 8005260:	e7eb      	b.n	800523a <_svfiprintf_r+0x1c2>
 8005262:	bf00      	nop
 8005264:	080059a0 	.word	0x080059a0
 8005268:	080059aa 	.word	0x080059aa
 800526c:	00000000 	.word	0x00000000
 8005270:	08004fc1 	.word	0x08004fc1
 8005274:	080059a6 	.word	0x080059a6

08005278 <_printf_common>:
 8005278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800527c:	4616      	mov	r6, r2
 800527e:	4699      	mov	r9, r3
 8005280:	688a      	ldr	r2, [r1, #8]
 8005282:	690b      	ldr	r3, [r1, #16]
 8005284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005288:	4293      	cmp	r3, r2
 800528a:	bfb8      	it	lt
 800528c:	4613      	movlt	r3, r2
 800528e:	6033      	str	r3, [r6, #0]
 8005290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005294:	4607      	mov	r7, r0
 8005296:	460c      	mov	r4, r1
 8005298:	b10a      	cbz	r2, 800529e <_printf_common+0x26>
 800529a:	3301      	adds	r3, #1
 800529c:	6033      	str	r3, [r6, #0]
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	0699      	lsls	r1, r3, #26
 80052a2:	bf42      	ittt	mi
 80052a4:	6833      	ldrmi	r3, [r6, #0]
 80052a6:	3302      	addmi	r3, #2
 80052a8:	6033      	strmi	r3, [r6, #0]
 80052aa:	6825      	ldr	r5, [r4, #0]
 80052ac:	f015 0506 	ands.w	r5, r5, #6
 80052b0:	d106      	bne.n	80052c0 <_printf_common+0x48>
 80052b2:	f104 0a19 	add.w	sl, r4, #25
 80052b6:	68e3      	ldr	r3, [r4, #12]
 80052b8:	6832      	ldr	r2, [r6, #0]
 80052ba:	1a9b      	subs	r3, r3, r2
 80052bc:	42ab      	cmp	r3, r5
 80052be:	dc26      	bgt.n	800530e <_printf_common+0x96>
 80052c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052c4:	1e13      	subs	r3, r2, #0
 80052c6:	6822      	ldr	r2, [r4, #0]
 80052c8:	bf18      	it	ne
 80052ca:	2301      	movne	r3, #1
 80052cc:	0692      	lsls	r2, r2, #26
 80052ce:	d42b      	bmi.n	8005328 <_printf_common+0xb0>
 80052d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052d4:	4649      	mov	r1, r9
 80052d6:	4638      	mov	r0, r7
 80052d8:	47c0      	blx	r8
 80052da:	3001      	adds	r0, #1
 80052dc:	d01e      	beq.n	800531c <_printf_common+0xa4>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	68e5      	ldr	r5, [r4, #12]
 80052e2:	6832      	ldr	r2, [r6, #0]
 80052e4:	f003 0306 	and.w	r3, r3, #6
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	bf08      	it	eq
 80052ec:	1aad      	subeq	r5, r5, r2
 80052ee:	68a3      	ldr	r3, [r4, #8]
 80052f0:	6922      	ldr	r2, [r4, #16]
 80052f2:	bf0c      	ite	eq
 80052f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052f8:	2500      	movne	r5, #0
 80052fa:	4293      	cmp	r3, r2
 80052fc:	bfc4      	itt	gt
 80052fe:	1a9b      	subgt	r3, r3, r2
 8005300:	18ed      	addgt	r5, r5, r3
 8005302:	2600      	movs	r6, #0
 8005304:	341a      	adds	r4, #26
 8005306:	42b5      	cmp	r5, r6
 8005308:	d11a      	bne.n	8005340 <_printf_common+0xc8>
 800530a:	2000      	movs	r0, #0
 800530c:	e008      	b.n	8005320 <_printf_common+0xa8>
 800530e:	2301      	movs	r3, #1
 8005310:	4652      	mov	r2, sl
 8005312:	4649      	mov	r1, r9
 8005314:	4638      	mov	r0, r7
 8005316:	47c0      	blx	r8
 8005318:	3001      	adds	r0, #1
 800531a:	d103      	bne.n	8005324 <_printf_common+0xac>
 800531c:	f04f 30ff 	mov.w	r0, #4294967295
 8005320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005324:	3501      	adds	r5, #1
 8005326:	e7c6      	b.n	80052b6 <_printf_common+0x3e>
 8005328:	18e1      	adds	r1, r4, r3
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	2030      	movs	r0, #48	; 0x30
 800532e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005332:	4422      	add	r2, r4
 8005334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800533c:	3302      	adds	r3, #2
 800533e:	e7c7      	b.n	80052d0 <_printf_common+0x58>
 8005340:	2301      	movs	r3, #1
 8005342:	4622      	mov	r2, r4
 8005344:	4649      	mov	r1, r9
 8005346:	4638      	mov	r0, r7
 8005348:	47c0      	blx	r8
 800534a:	3001      	adds	r0, #1
 800534c:	d0e6      	beq.n	800531c <_printf_common+0xa4>
 800534e:	3601      	adds	r6, #1
 8005350:	e7d9      	b.n	8005306 <_printf_common+0x8e>
	...

08005354 <_printf_i>:
 8005354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005358:	7e0f      	ldrb	r7, [r1, #24]
 800535a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800535c:	2f78      	cmp	r7, #120	; 0x78
 800535e:	4691      	mov	r9, r2
 8005360:	4680      	mov	r8, r0
 8005362:	460c      	mov	r4, r1
 8005364:	469a      	mov	sl, r3
 8005366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800536a:	d807      	bhi.n	800537c <_printf_i+0x28>
 800536c:	2f62      	cmp	r7, #98	; 0x62
 800536e:	d80a      	bhi.n	8005386 <_printf_i+0x32>
 8005370:	2f00      	cmp	r7, #0
 8005372:	f000 80d8 	beq.w	8005526 <_printf_i+0x1d2>
 8005376:	2f58      	cmp	r7, #88	; 0x58
 8005378:	f000 80a3 	beq.w	80054c2 <_printf_i+0x16e>
 800537c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005384:	e03a      	b.n	80053fc <_printf_i+0xa8>
 8005386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800538a:	2b15      	cmp	r3, #21
 800538c:	d8f6      	bhi.n	800537c <_printf_i+0x28>
 800538e:	a101      	add	r1, pc, #4	; (adr r1, 8005394 <_printf_i+0x40>)
 8005390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005394:	080053ed 	.word	0x080053ed
 8005398:	08005401 	.word	0x08005401
 800539c:	0800537d 	.word	0x0800537d
 80053a0:	0800537d 	.word	0x0800537d
 80053a4:	0800537d 	.word	0x0800537d
 80053a8:	0800537d 	.word	0x0800537d
 80053ac:	08005401 	.word	0x08005401
 80053b0:	0800537d 	.word	0x0800537d
 80053b4:	0800537d 	.word	0x0800537d
 80053b8:	0800537d 	.word	0x0800537d
 80053bc:	0800537d 	.word	0x0800537d
 80053c0:	0800550d 	.word	0x0800550d
 80053c4:	08005431 	.word	0x08005431
 80053c8:	080054ef 	.word	0x080054ef
 80053cc:	0800537d 	.word	0x0800537d
 80053d0:	0800537d 	.word	0x0800537d
 80053d4:	0800552f 	.word	0x0800552f
 80053d8:	0800537d 	.word	0x0800537d
 80053dc:	08005431 	.word	0x08005431
 80053e0:	0800537d 	.word	0x0800537d
 80053e4:	0800537d 	.word	0x0800537d
 80053e8:	080054f7 	.word	0x080054f7
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	1d1a      	adds	r2, r3, #4
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	602a      	str	r2, [r5, #0]
 80053f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0a3      	b.n	8005548 <_printf_i+0x1f4>
 8005400:	6820      	ldr	r0, [r4, #0]
 8005402:	6829      	ldr	r1, [r5, #0]
 8005404:	0606      	lsls	r6, r0, #24
 8005406:	f101 0304 	add.w	r3, r1, #4
 800540a:	d50a      	bpl.n	8005422 <_printf_i+0xce>
 800540c:	680e      	ldr	r6, [r1, #0]
 800540e:	602b      	str	r3, [r5, #0]
 8005410:	2e00      	cmp	r6, #0
 8005412:	da03      	bge.n	800541c <_printf_i+0xc8>
 8005414:	232d      	movs	r3, #45	; 0x2d
 8005416:	4276      	negs	r6, r6
 8005418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800541c:	485e      	ldr	r0, [pc, #376]	; (8005598 <_printf_i+0x244>)
 800541e:	230a      	movs	r3, #10
 8005420:	e019      	b.n	8005456 <_printf_i+0x102>
 8005422:	680e      	ldr	r6, [r1, #0]
 8005424:	602b      	str	r3, [r5, #0]
 8005426:	f010 0f40 	tst.w	r0, #64	; 0x40
 800542a:	bf18      	it	ne
 800542c:	b236      	sxthne	r6, r6
 800542e:	e7ef      	b.n	8005410 <_printf_i+0xbc>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	6820      	ldr	r0, [r4, #0]
 8005434:	1d19      	adds	r1, r3, #4
 8005436:	6029      	str	r1, [r5, #0]
 8005438:	0601      	lsls	r1, r0, #24
 800543a:	d501      	bpl.n	8005440 <_printf_i+0xec>
 800543c:	681e      	ldr	r6, [r3, #0]
 800543e:	e002      	b.n	8005446 <_printf_i+0xf2>
 8005440:	0646      	lsls	r6, r0, #25
 8005442:	d5fb      	bpl.n	800543c <_printf_i+0xe8>
 8005444:	881e      	ldrh	r6, [r3, #0]
 8005446:	4854      	ldr	r0, [pc, #336]	; (8005598 <_printf_i+0x244>)
 8005448:	2f6f      	cmp	r7, #111	; 0x6f
 800544a:	bf0c      	ite	eq
 800544c:	2308      	moveq	r3, #8
 800544e:	230a      	movne	r3, #10
 8005450:	2100      	movs	r1, #0
 8005452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005456:	6865      	ldr	r5, [r4, #4]
 8005458:	60a5      	str	r5, [r4, #8]
 800545a:	2d00      	cmp	r5, #0
 800545c:	bfa2      	ittt	ge
 800545e:	6821      	ldrge	r1, [r4, #0]
 8005460:	f021 0104 	bicge.w	r1, r1, #4
 8005464:	6021      	strge	r1, [r4, #0]
 8005466:	b90e      	cbnz	r6, 800546c <_printf_i+0x118>
 8005468:	2d00      	cmp	r5, #0
 800546a:	d04d      	beq.n	8005508 <_printf_i+0x1b4>
 800546c:	4615      	mov	r5, r2
 800546e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005472:	fb03 6711 	mls	r7, r3, r1, r6
 8005476:	5dc7      	ldrb	r7, [r0, r7]
 8005478:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800547c:	4637      	mov	r7, r6
 800547e:	42bb      	cmp	r3, r7
 8005480:	460e      	mov	r6, r1
 8005482:	d9f4      	bls.n	800546e <_printf_i+0x11a>
 8005484:	2b08      	cmp	r3, #8
 8005486:	d10b      	bne.n	80054a0 <_printf_i+0x14c>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	07de      	lsls	r6, r3, #31
 800548c:	d508      	bpl.n	80054a0 <_printf_i+0x14c>
 800548e:	6923      	ldr	r3, [r4, #16]
 8005490:	6861      	ldr	r1, [r4, #4]
 8005492:	4299      	cmp	r1, r3
 8005494:	bfde      	ittt	le
 8005496:	2330      	movle	r3, #48	; 0x30
 8005498:	f805 3c01 	strble.w	r3, [r5, #-1]
 800549c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054a0:	1b52      	subs	r2, r2, r5
 80054a2:	6122      	str	r2, [r4, #16]
 80054a4:	f8cd a000 	str.w	sl, [sp]
 80054a8:	464b      	mov	r3, r9
 80054aa:	aa03      	add	r2, sp, #12
 80054ac:	4621      	mov	r1, r4
 80054ae:	4640      	mov	r0, r8
 80054b0:	f7ff fee2 	bl	8005278 <_printf_common>
 80054b4:	3001      	adds	r0, #1
 80054b6:	d14c      	bne.n	8005552 <_printf_i+0x1fe>
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	b004      	add	sp, #16
 80054be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c2:	4835      	ldr	r0, [pc, #212]	; (8005598 <_printf_i+0x244>)
 80054c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054c8:	6829      	ldr	r1, [r5, #0]
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80054d0:	6029      	str	r1, [r5, #0]
 80054d2:	061d      	lsls	r5, r3, #24
 80054d4:	d514      	bpl.n	8005500 <_printf_i+0x1ac>
 80054d6:	07df      	lsls	r7, r3, #31
 80054d8:	bf44      	itt	mi
 80054da:	f043 0320 	orrmi.w	r3, r3, #32
 80054de:	6023      	strmi	r3, [r4, #0]
 80054e0:	b91e      	cbnz	r6, 80054ea <_printf_i+0x196>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	f023 0320 	bic.w	r3, r3, #32
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	2310      	movs	r3, #16
 80054ec:	e7b0      	b.n	8005450 <_printf_i+0xfc>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	f043 0320 	orr.w	r3, r3, #32
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	2378      	movs	r3, #120	; 0x78
 80054f8:	4828      	ldr	r0, [pc, #160]	; (800559c <_printf_i+0x248>)
 80054fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054fe:	e7e3      	b.n	80054c8 <_printf_i+0x174>
 8005500:	0659      	lsls	r1, r3, #25
 8005502:	bf48      	it	mi
 8005504:	b2b6      	uxthmi	r6, r6
 8005506:	e7e6      	b.n	80054d6 <_printf_i+0x182>
 8005508:	4615      	mov	r5, r2
 800550a:	e7bb      	b.n	8005484 <_printf_i+0x130>
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	6826      	ldr	r6, [r4, #0]
 8005510:	6961      	ldr	r1, [r4, #20]
 8005512:	1d18      	adds	r0, r3, #4
 8005514:	6028      	str	r0, [r5, #0]
 8005516:	0635      	lsls	r5, r6, #24
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	d501      	bpl.n	8005520 <_printf_i+0x1cc>
 800551c:	6019      	str	r1, [r3, #0]
 800551e:	e002      	b.n	8005526 <_printf_i+0x1d2>
 8005520:	0670      	lsls	r0, r6, #25
 8005522:	d5fb      	bpl.n	800551c <_printf_i+0x1c8>
 8005524:	8019      	strh	r1, [r3, #0]
 8005526:	2300      	movs	r3, #0
 8005528:	6123      	str	r3, [r4, #16]
 800552a:	4615      	mov	r5, r2
 800552c:	e7ba      	b.n	80054a4 <_printf_i+0x150>
 800552e:	682b      	ldr	r3, [r5, #0]
 8005530:	1d1a      	adds	r2, r3, #4
 8005532:	602a      	str	r2, [r5, #0]
 8005534:	681d      	ldr	r5, [r3, #0]
 8005536:	6862      	ldr	r2, [r4, #4]
 8005538:	2100      	movs	r1, #0
 800553a:	4628      	mov	r0, r5
 800553c:	f7fa fe58 	bl	80001f0 <memchr>
 8005540:	b108      	cbz	r0, 8005546 <_printf_i+0x1f2>
 8005542:	1b40      	subs	r0, r0, r5
 8005544:	6060      	str	r0, [r4, #4]
 8005546:	6863      	ldr	r3, [r4, #4]
 8005548:	6123      	str	r3, [r4, #16]
 800554a:	2300      	movs	r3, #0
 800554c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005550:	e7a8      	b.n	80054a4 <_printf_i+0x150>
 8005552:	6923      	ldr	r3, [r4, #16]
 8005554:	462a      	mov	r2, r5
 8005556:	4649      	mov	r1, r9
 8005558:	4640      	mov	r0, r8
 800555a:	47d0      	blx	sl
 800555c:	3001      	adds	r0, #1
 800555e:	d0ab      	beq.n	80054b8 <_printf_i+0x164>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	079b      	lsls	r3, r3, #30
 8005564:	d413      	bmi.n	800558e <_printf_i+0x23a>
 8005566:	68e0      	ldr	r0, [r4, #12]
 8005568:	9b03      	ldr	r3, [sp, #12]
 800556a:	4298      	cmp	r0, r3
 800556c:	bfb8      	it	lt
 800556e:	4618      	movlt	r0, r3
 8005570:	e7a4      	b.n	80054bc <_printf_i+0x168>
 8005572:	2301      	movs	r3, #1
 8005574:	4632      	mov	r2, r6
 8005576:	4649      	mov	r1, r9
 8005578:	4640      	mov	r0, r8
 800557a:	47d0      	blx	sl
 800557c:	3001      	adds	r0, #1
 800557e:	d09b      	beq.n	80054b8 <_printf_i+0x164>
 8005580:	3501      	adds	r5, #1
 8005582:	68e3      	ldr	r3, [r4, #12]
 8005584:	9903      	ldr	r1, [sp, #12]
 8005586:	1a5b      	subs	r3, r3, r1
 8005588:	42ab      	cmp	r3, r5
 800558a:	dcf2      	bgt.n	8005572 <_printf_i+0x21e>
 800558c:	e7eb      	b.n	8005566 <_printf_i+0x212>
 800558e:	2500      	movs	r5, #0
 8005590:	f104 0619 	add.w	r6, r4, #25
 8005594:	e7f5      	b.n	8005582 <_printf_i+0x22e>
 8005596:	bf00      	nop
 8005598:	080059b1 	.word	0x080059b1
 800559c:	080059c2 	.word	0x080059c2

080055a0 <memcpy>:
 80055a0:	440a      	add	r2, r1
 80055a2:	4291      	cmp	r1, r2
 80055a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80055a8:	d100      	bne.n	80055ac <memcpy+0xc>
 80055aa:	4770      	bx	lr
 80055ac:	b510      	push	{r4, lr}
 80055ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055b6:	4291      	cmp	r1, r2
 80055b8:	d1f9      	bne.n	80055ae <memcpy+0xe>
 80055ba:	bd10      	pop	{r4, pc}

080055bc <memmove>:
 80055bc:	4288      	cmp	r0, r1
 80055be:	b510      	push	{r4, lr}
 80055c0:	eb01 0402 	add.w	r4, r1, r2
 80055c4:	d902      	bls.n	80055cc <memmove+0x10>
 80055c6:	4284      	cmp	r4, r0
 80055c8:	4623      	mov	r3, r4
 80055ca:	d807      	bhi.n	80055dc <memmove+0x20>
 80055cc:	1e43      	subs	r3, r0, #1
 80055ce:	42a1      	cmp	r1, r4
 80055d0:	d008      	beq.n	80055e4 <memmove+0x28>
 80055d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055da:	e7f8      	b.n	80055ce <memmove+0x12>
 80055dc:	4402      	add	r2, r0
 80055de:	4601      	mov	r1, r0
 80055e0:	428a      	cmp	r2, r1
 80055e2:	d100      	bne.n	80055e6 <memmove+0x2a>
 80055e4:	bd10      	pop	{r4, pc}
 80055e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055ee:	e7f7      	b.n	80055e0 <memmove+0x24>

080055f0 <_free_r>:
 80055f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055f2:	2900      	cmp	r1, #0
 80055f4:	d044      	beq.n	8005680 <_free_r+0x90>
 80055f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055fa:	9001      	str	r0, [sp, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005602:	bfb8      	it	lt
 8005604:	18e4      	addlt	r4, r4, r3
 8005606:	f000 f913 	bl	8005830 <__malloc_lock>
 800560a:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <_free_r+0x94>)
 800560c:	9801      	ldr	r0, [sp, #4]
 800560e:	6813      	ldr	r3, [r2, #0]
 8005610:	b933      	cbnz	r3, 8005620 <_free_r+0x30>
 8005612:	6063      	str	r3, [r4, #4]
 8005614:	6014      	str	r4, [r2, #0]
 8005616:	b003      	add	sp, #12
 8005618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800561c:	f000 b90e 	b.w	800583c <__malloc_unlock>
 8005620:	42a3      	cmp	r3, r4
 8005622:	d908      	bls.n	8005636 <_free_r+0x46>
 8005624:	6825      	ldr	r5, [r4, #0]
 8005626:	1961      	adds	r1, r4, r5
 8005628:	428b      	cmp	r3, r1
 800562a:	bf01      	itttt	eq
 800562c:	6819      	ldreq	r1, [r3, #0]
 800562e:	685b      	ldreq	r3, [r3, #4]
 8005630:	1949      	addeq	r1, r1, r5
 8005632:	6021      	streq	r1, [r4, #0]
 8005634:	e7ed      	b.n	8005612 <_free_r+0x22>
 8005636:	461a      	mov	r2, r3
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	b10b      	cbz	r3, 8005640 <_free_r+0x50>
 800563c:	42a3      	cmp	r3, r4
 800563e:	d9fa      	bls.n	8005636 <_free_r+0x46>
 8005640:	6811      	ldr	r1, [r2, #0]
 8005642:	1855      	adds	r5, r2, r1
 8005644:	42a5      	cmp	r5, r4
 8005646:	d10b      	bne.n	8005660 <_free_r+0x70>
 8005648:	6824      	ldr	r4, [r4, #0]
 800564a:	4421      	add	r1, r4
 800564c:	1854      	adds	r4, r2, r1
 800564e:	42a3      	cmp	r3, r4
 8005650:	6011      	str	r1, [r2, #0]
 8005652:	d1e0      	bne.n	8005616 <_free_r+0x26>
 8005654:	681c      	ldr	r4, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	6053      	str	r3, [r2, #4]
 800565a:	4421      	add	r1, r4
 800565c:	6011      	str	r1, [r2, #0]
 800565e:	e7da      	b.n	8005616 <_free_r+0x26>
 8005660:	d902      	bls.n	8005668 <_free_r+0x78>
 8005662:	230c      	movs	r3, #12
 8005664:	6003      	str	r3, [r0, #0]
 8005666:	e7d6      	b.n	8005616 <_free_r+0x26>
 8005668:	6825      	ldr	r5, [r4, #0]
 800566a:	1961      	adds	r1, r4, r5
 800566c:	428b      	cmp	r3, r1
 800566e:	bf04      	itt	eq
 8005670:	6819      	ldreq	r1, [r3, #0]
 8005672:	685b      	ldreq	r3, [r3, #4]
 8005674:	6063      	str	r3, [r4, #4]
 8005676:	bf04      	itt	eq
 8005678:	1949      	addeq	r1, r1, r5
 800567a:	6021      	streq	r1, [r4, #0]
 800567c:	6054      	str	r4, [r2, #4]
 800567e:	e7ca      	b.n	8005616 <_free_r+0x26>
 8005680:	b003      	add	sp, #12
 8005682:	bd30      	pop	{r4, r5, pc}
 8005684:	200002dc 	.word	0x200002dc

08005688 <sbrk_aligned>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	4e0e      	ldr	r6, [pc, #56]	; (80056c4 <sbrk_aligned+0x3c>)
 800568c:	460c      	mov	r4, r1
 800568e:	6831      	ldr	r1, [r6, #0]
 8005690:	4605      	mov	r5, r0
 8005692:	b911      	cbnz	r1, 800569a <sbrk_aligned+0x12>
 8005694:	f000 f8bc 	bl	8005810 <_sbrk_r>
 8005698:	6030      	str	r0, [r6, #0]
 800569a:	4621      	mov	r1, r4
 800569c:	4628      	mov	r0, r5
 800569e:	f000 f8b7 	bl	8005810 <_sbrk_r>
 80056a2:	1c43      	adds	r3, r0, #1
 80056a4:	d00a      	beq.n	80056bc <sbrk_aligned+0x34>
 80056a6:	1cc4      	adds	r4, r0, #3
 80056a8:	f024 0403 	bic.w	r4, r4, #3
 80056ac:	42a0      	cmp	r0, r4
 80056ae:	d007      	beq.n	80056c0 <sbrk_aligned+0x38>
 80056b0:	1a21      	subs	r1, r4, r0
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 f8ac 	bl	8005810 <_sbrk_r>
 80056b8:	3001      	adds	r0, #1
 80056ba:	d101      	bne.n	80056c0 <sbrk_aligned+0x38>
 80056bc:	f04f 34ff 	mov.w	r4, #4294967295
 80056c0:	4620      	mov	r0, r4
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	200002e0 	.word	0x200002e0

080056c8 <_malloc_r>:
 80056c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056cc:	1ccd      	adds	r5, r1, #3
 80056ce:	f025 0503 	bic.w	r5, r5, #3
 80056d2:	3508      	adds	r5, #8
 80056d4:	2d0c      	cmp	r5, #12
 80056d6:	bf38      	it	cc
 80056d8:	250c      	movcc	r5, #12
 80056da:	2d00      	cmp	r5, #0
 80056dc:	4607      	mov	r7, r0
 80056de:	db01      	blt.n	80056e4 <_malloc_r+0x1c>
 80056e0:	42a9      	cmp	r1, r5
 80056e2:	d905      	bls.n	80056f0 <_malloc_r+0x28>
 80056e4:	230c      	movs	r3, #12
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	2600      	movs	r6, #0
 80056ea:	4630      	mov	r0, r6
 80056ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f0:	4e2e      	ldr	r6, [pc, #184]	; (80057ac <_malloc_r+0xe4>)
 80056f2:	f000 f89d 	bl	8005830 <__malloc_lock>
 80056f6:	6833      	ldr	r3, [r6, #0]
 80056f8:	461c      	mov	r4, r3
 80056fa:	bb34      	cbnz	r4, 800574a <_malloc_r+0x82>
 80056fc:	4629      	mov	r1, r5
 80056fe:	4638      	mov	r0, r7
 8005700:	f7ff ffc2 	bl	8005688 <sbrk_aligned>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	4604      	mov	r4, r0
 8005708:	d14d      	bne.n	80057a6 <_malloc_r+0xde>
 800570a:	6834      	ldr	r4, [r6, #0]
 800570c:	4626      	mov	r6, r4
 800570e:	2e00      	cmp	r6, #0
 8005710:	d140      	bne.n	8005794 <_malloc_r+0xcc>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	4631      	mov	r1, r6
 8005716:	4638      	mov	r0, r7
 8005718:	eb04 0803 	add.w	r8, r4, r3
 800571c:	f000 f878 	bl	8005810 <_sbrk_r>
 8005720:	4580      	cmp	r8, r0
 8005722:	d13a      	bne.n	800579a <_malloc_r+0xd2>
 8005724:	6821      	ldr	r1, [r4, #0]
 8005726:	3503      	adds	r5, #3
 8005728:	1a6d      	subs	r5, r5, r1
 800572a:	f025 0503 	bic.w	r5, r5, #3
 800572e:	3508      	adds	r5, #8
 8005730:	2d0c      	cmp	r5, #12
 8005732:	bf38      	it	cc
 8005734:	250c      	movcc	r5, #12
 8005736:	4629      	mov	r1, r5
 8005738:	4638      	mov	r0, r7
 800573a:	f7ff ffa5 	bl	8005688 <sbrk_aligned>
 800573e:	3001      	adds	r0, #1
 8005740:	d02b      	beq.n	800579a <_malloc_r+0xd2>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	442b      	add	r3, r5
 8005746:	6023      	str	r3, [r4, #0]
 8005748:	e00e      	b.n	8005768 <_malloc_r+0xa0>
 800574a:	6822      	ldr	r2, [r4, #0]
 800574c:	1b52      	subs	r2, r2, r5
 800574e:	d41e      	bmi.n	800578e <_malloc_r+0xc6>
 8005750:	2a0b      	cmp	r2, #11
 8005752:	d916      	bls.n	8005782 <_malloc_r+0xba>
 8005754:	1961      	adds	r1, r4, r5
 8005756:	42a3      	cmp	r3, r4
 8005758:	6025      	str	r5, [r4, #0]
 800575a:	bf18      	it	ne
 800575c:	6059      	strne	r1, [r3, #4]
 800575e:	6863      	ldr	r3, [r4, #4]
 8005760:	bf08      	it	eq
 8005762:	6031      	streq	r1, [r6, #0]
 8005764:	5162      	str	r2, [r4, r5]
 8005766:	604b      	str	r3, [r1, #4]
 8005768:	4638      	mov	r0, r7
 800576a:	f104 060b 	add.w	r6, r4, #11
 800576e:	f000 f865 	bl	800583c <__malloc_unlock>
 8005772:	f026 0607 	bic.w	r6, r6, #7
 8005776:	1d23      	adds	r3, r4, #4
 8005778:	1af2      	subs	r2, r6, r3
 800577a:	d0b6      	beq.n	80056ea <_malloc_r+0x22>
 800577c:	1b9b      	subs	r3, r3, r6
 800577e:	50a3      	str	r3, [r4, r2]
 8005780:	e7b3      	b.n	80056ea <_malloc_r+0x22>
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	42a3      	cmp	r3, r4
 8005786:	bf0c      	ite	eq
 8005788:	6032      	streq	r2, [r6, #0]
 800578a:	605a      	strne	r2, [r3, #4]
 800578c:	e7ec      	b.n	8005768 <_malloc_r+0xa0>
 800578e:	4623      	mov	r3, r4
 8005790:	6864      	ldr	r4, [r4, #4]
 8005792:	e7b2      	b.n	80056fa <_malloc_r+0x32>
 8005794:	4634      	mov	r4, r6
 8005796:	6876      	ldr	r6, [r6, #4]
 8005798:	e7b9      	b.n	800570e <_malloc_r+0x46>
 800579a:	230c      	movs	r3, #12
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	4638      	mov	r0, r7
 80057a0:	f000 f84c 	bl	800583c <__malloc_unlock>
 80057a4:	e7a1      	b.n	80056ea <_malloc_r+0x22>
 80057a6:	6025      	str	r5, [r4, #0]
 80057a8:	e7de      	b.n	8005768 <_malloc_r+0xa0>
 80057aa:	bf00      	nop
 80057ac:	200002dc 	.word	0x200002dc

080057b0 <_realloc_r>:
 80057b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b4:	4680      	mov	r8, r0
 80057b6:	4614      	mov	r4, r2
 80057b8:	460e      	mov	r6, r1
 80057ba:	b921      	cbnz	r1, 80057c6 <_realloc_r+0x16>
 80057bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057c0:	4611      	mov	r1, r2
 80057c2:	f7ff bf81 	b.w	80056c8 <_malloc_r>
 80057c6:	b92a      	cbnz	r2, 80057d4 <_realloc_r+0x24>
 80057c8:	f7ff ff12 	bl	80055f0 <_free_r>
 80057cc:	4625      	mov	r5, r4
 80057ce:	4628      	mov	r0, r5
 80057d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d4:	f000 f838 	bl	8005848 <_malloc_usable_size_r>
 80057d8:	4284      	cmp	r4, r0
 80057da:	4607      	mov	r7, r0
 80057dc:	d802      	bhi.n	80057e4 <_realloc_r+0x34>
 80057de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057e2:	d812      	bhi.n	800580a <_realloc_r+0x5a>
 80057e4:	4621      	mov	r1, r4
 80057e6:	4640      	mov	r0, r8
 80057e8:	f7ff ff6e 	bl	80056c8 <_malloc_r>
 80057ec:	4605      	mov	r5, r0
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d0ed      	beq.n	80057ce <_realloc_r+0x1e>
 80057f2:	42bc      	cmp	r4, r7
 80057f4:	4622      	mov	r2, r4
 80057f6:	4631      	mov	r1, r6
 80057f8:	bf28      	it	cs
 80057fa:	463a      	movcs	r2, r7
 80057fc:	f7ff fed0 	bl	80055a0 <memcpy>
 8005800:	4631      	mov	r1, r6
 8005802:	4640      	mov	r0, r8
 8005804:	f7ff fef4 	bl	80055f0 <_free_r>
 8005808:	e7e1      	b.n	80057ce <_realloc_r+0x1e>
 800580a:	4635      	mov	r5, r6
 800580c:	e7df      	b.n	80057ce <_realloc_r+0x1e>
	...

08005810 <_sbrk_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	4d06      	ldr	r5, [pc, #24]	; (800582c <_sbrk_r+0x1c>)
 8005814:	2300      	movs	r3, #0
 8005816:	4604      	mov	r4, r0
 8005818:	4608      	mov	r0, r1
 800581a:	602b      	str	r3, [r5, #0]
 800581c:	f7fb fd9e 	bl	800135c <_sbrk>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d102      	bne.n	800582a <_sbrk_r+0x1a>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	b103      	cbz	r3, 800582a <_sbrk_r+0x1a>
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	200002e4 	.word	0x200002e4

08005830 <__malloc_lock>:
 8005830:	4801      	ldr	r0, [pc, #4]	; (8005838 <__malloc_lock+0x8>)
 8005832:	f000 b811 	b.w	8005858 <__retarget_lock_acquire_recursive>
 8005836:	bf00      	nop
 8005838:	200002e8 	.word	0x200002e8

0800583c <__malloc_unlock>:
 800583c:	4801      	ldr	r0, [pc, #4]	; (8005844 <__malloc_unlock+0x8>)
 800583e:	f000 b80c 	b.w	800585a <__retarget_lock_release_recursive>
 8005842:	bf00      	nop
 8005844:	200002e8 	.word	0x200002e8

08005848 <_malloc_usable_size_r>:
 8005848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800584c:	1f18      	subs	r0, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	bfbc      	itt	lt
 8005852:	580b      	ldrlt	r3, [r1, r0]
 8005854:	18c0      	addlt	r0, r0, r3
 8005856:	4770      	bx	lr

08005858 <__retarget_lock_acquire_recursive>:
 8005858:	4770      	bx	lr

0800585a <__retarget_lock_release_recursive>:
 800585a:	4770      	bx	lr

0800585c <_init>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	bf00      	nop
 8005860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005862:	bc08      	pop	{r3}
 8005864:	469e      	mov	lr, r3
 8005866:	4770      	bx	lr

08005868 <_fini>:
 8005868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586a:	bf00      	nop
 800586c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586e:	bc08      	pop	{r3}
 8005870:	469e      	mov	lr, r3
 8005872:	4770      	bx	lr
